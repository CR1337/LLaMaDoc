{"checkpoints/finetuned_0": [["_pickle(self, path):\n    \n    Return self as a pickle file.\n    \n    Parameters\n    ----------\n    path : str\n        Path to save the pickle file.\n    \n    Returns\n    -------\n    str\n        Path to the saved pickle file.", ":param trainer: \n    :param output_dir:", "_get_label_issues()", "", "Sets the output keys for all datasets.\n\n    Args:\n        datasets (list): List of datasets to set the output keys for.\n        output_keys (list): List of output keys to set.", "", "", "", ":rtype: None\n    :param self:", "(Callable[..., \"ResultInterface\"])", "", "() -> int:", ":param nums:\n    :param target:\n    :return:\n    :rtype: int\n    :raises: \n    :raises: \n    :raises: \n    :raises:", "Returns a new search strategy that maps the given pack to this\n    search strategy.\n\n    :param pack: The pack to map to this search strategy.\n    :type pack: :class:`~pyvi.pack.Pack`\n\n    :return: A new search strategy that maps the given pack to this\n        search strategy.\n    :rtype: :class:`~pyvi.search.SearchStrategy`\n\n    :Example:", "(str) -> None", "Fix crontab lines.\n    \n    :return: 0 if success, 1 if failed.\n    :rtype: int\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises: :class:`~exceptions.CommandError` if failed.\n    :raises", ".  __init__(self):", ".retarget(mod_path)\n    :param mod:", "", "(element) -> bool\n\n    Check if element has the key and the value matches the regex.\n\n    :param element: The element to check.", ":param authentication: The authentication string to use\n    :param realm: The realm to use\n    :return: The challenge string to use", "", ":param dtype:  Optional[str] -  dtype for to_numpy", ":param prompt:  The prompt to display\n  :param float:  True if the input should be converted to float, False otherwise\n  :return:  The input as a string\n  :rtype:  str\n  :raises:  KeyboardInterrupt\n  :", "_proto2object(proto: DeleteDatasetMessage_PB) -> \"DeleteDatasetMessage\":", ":param wavsignal: numpy.ndarray, shape (n_frames, n_frames_per_frame)\n      :param fs: int, sampling frequency in Hz\n      :return: numpy.ndarray, shape (n_frames, n_frames_per_frame)\n      :return: numpy.ndarray, shape (n_frames, n_frames_per_frame)", "", "_forward", "", ":param fileDir: \u4e0a\u4f20\u6587\u4ef6\u7684\u8def\u5f84\n  :param isPicture: \u662f\u5426\u4e3a\u56fe\u7247\n  :param isVideo: \u662f\u5426\u4e3a\u89c6\u9891\n  :param toUserName: \u63a5\u6536\u65b9\u5e10\u53f7\n  :param file_: \u4e0a\u4f20\u6587\u4ef6\u7684\u5bf9\u8c61\n  :param preparedFile: \u4e0a\u4f20\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u4f20\u5165\u7684\u4e0a\u4f20\u6587\u4ef6\u5bf9\u8c61\n  :returnsummary_", "() -> int:\n    The main entry point for the application.", "", "", "(str)", "close the file", "", "Check if the exploit works as expected.", "", "_call__", "", "", "", "(str)", "", "_change(self, col, row, val):", "", "", "", "", "", "", "Test the Doc2Vec model with the same parameters as the\n  original one in gensim_doc2vec.py.\n\n  :param model: The model to test.\n  :type model: gensim.models.doc2vec.Doc2Vec\n  :param list_corpus: The list of sentences to train the model on.\n  :type list_corpus: list of str", "(int, file) ->", "", "Render a graph of an interface.\n\n    :param request:\n    :param pk:\n    :return:", "", "This is a main method for testing the catalog classes.\n  :return:", "_invoke(self, callback, *args, **kwargs) -> Any:", "_init_", "(int, file) ->", "", "", "", "_get_fsdp_wrap_policy() -> Optional[Callable[[torch.nn.Module, bool, int], bool]", "batch rename file extension\n    :param work_dir:\n    :param old_ext:\n    :param new_ext:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:\n    :rtype:\n    :return:", "", "", "_standard_exponential: Returns a random exponential value.\n        \n        Parameters\n        ----------\n        size: int\n            The number of elements to generate.\n        dtype: cupy.float_type\n            The data type to use for the generated values.\n\n        Returns\n        -------\n        cupy.ndarray\n            A random exponential value.", "_", "", "", "_is_rewrite_engine_on(self, vhost):", "", ":param ctx:\n  :param file:\n  :param quote:\n  :param export:\n  :return:", "Build a new session for the given session_id.\n\n  Args:\n    session_id (str): The session_id to build a session for.\n    system_prompt (str): The system prompt to use for the session.\n\n  Returns:\n    The session object.", "", "_append_package_path(self, package_name, directory):\n\n    _package_path_map = self._package_path_map.setdefault(package_name, [])\n        paths = self._package_path_map[package_name]\n        paths.append(directory)\n        return paths", "_save(self, name, resp)", "", "", "_init_", "\"Test the exploit check function\"", "(float | np.ndarray) -> float:", "", "Args:\n        pretrained (bool): If True, returns a model pre-trained on the ImageNet\n            dataset.\n        **kwargs (optional): Additional keyword arguments,\n            e.g. num_classes.", "", "", "", "", "Encode numpy arrays and scalars as lists.\n\n    Args:\n        obj (any): Any numpy array or scalar.\n\n    Returns:\n        list: List of numpy array elements.", ":param values: list of integers\n    :return: True if the list is a sequence of integers, False otherwise.", "_to_keypoints", "", "Return the maximum width or height of the token.\n\n    :param token: The token to check.\n\n    :return: The maximum width or height of the token.", ":param img1_path: str or list of str, image path or list of image path\n    :param img2_path: str or list of str, image path or list of image path\n    :return: list of image path or list of list of image path, boolean", "Convert a string to a boolean.\n    :param value: The string to convert.\n    :return: The boolean value.", ":param cfg:\n    :param signal_error:\n    :param no_daemon:\n    :param blur_usage:\n    :param advertise_version:\n    :param transit:\n    :param rendezvous:\n    :return: \n    :rtype:", "", "", "", "(index, name, session, data) -> Member", "", "Update a block in a pipeline.\n\n  :param pipeline_uuid: The UUID of the pipeline to update.\n  :param block_uuid: The UUID of the block to update.\n  :return: The updated block.\n  :raises: 404 if the block does not exist in the pipeline.\n  :raises: 400 if the request body is malformed.\n  :raises: 500 if an error occurs while updating the block.", "", "", ":param session: :class:`requests.Session`\n    :param class_name: str\n    :param args: argparse.Namespace\n    :return: :class:`~py_downloaders.BaseDownloader`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises: :class:`~py_downloaders.DownloadError`\n    :raises:", "", ":rtype: dict", "", "", ":param ago:  number of items to return\n    :param size: number of items to return (including the item requested)\n    :return: list of items in the range (inclusive)", "", ":param y: initial value for y", ":returns: iterator of all the entries in the table\n    :rtype: :class:`~collections.abc.Iterator`", "_init_model(self, device):\n\n    Initialize the model on the given device.\n    :param device: the device to initialize the model on.\n    :return:", "Returns the preferred width for the given box.\n\n  :param box: The box to check.\n  :type box: boxes.InlineBox, boxes.BlockContainerBox, boxes.LineBox.\n\n  :return: The preferred width for the given box.\n  :rtype: int.", "", "Convert a boolean value to Python boolean.\n\n    :param value: The value to convert.", "(env_var: Union[ConfigKey, str]) -> bool:", "", "Clean up a sentence.", "", ":return: \n    :rtype: str", "", "Initialize a Gluon-ResNet101-V1e model.\n\n  Parameters\n  ----------\n  pretrained : bool, optional (default=False)\n      If True, the model is pre-trained on ImageNet.\n  num_classes : int, optional (default=1000)\n      Number of classes to classify images.\n  in_chans : int, optional (default=3)\n      Number of input channels.\n  **kwargs :\n      Keyword arguments used to initialize the `GluonResNet` class.\n\n  Returns\n  -------\n  gluon_resnet101_v1e : `GluonResNet`\n      The initialized `GluonResNet101_V1e` model.", "remove batch from layout\n    :param layout:\n    :return:\n    :rtype:", "This function removes the stopwords from the text in the given columns of a given dataframe.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The dataframe to be cleaned.\n    sentence_cols : list\n        A list of the columns of the dataframe to be cleaned.\n    stop_cols : list\n        A list of the columns of the dataframe to be cleaned.\n\n    Returns\n    -------\n    pandas.DataFrame\n        The dataframe with the stopwords removed from the text in the given columns of the dataframe.", "\u6d4b\u8bd5\u5220\u9664\u4e00\u4e2a\u6570\u636e\u96c6", "_include_path(self, path, extensions=None)", "This method is deprecated. Please use `airflow.providers.google.cloud.hooks.bigquery.BigQueryHook.patch_table`\n  :param self: BigQueryHook\n  :param args:\n  :param kwargs:\n  :return:", "_grid_anchors(self, grid_sizes):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_over_all_feature_maps):\n\n    _get_rotated_box_list(self, anchors_", "", ":param objtxt:", "", "_make_args(args, **kwargs):", "_init_\n    Initialize the parameters of the model.\n\n    Parameters\n    ----------\n    init : str or callable\n        The initialization method for the model parameters.\n    scale : float\n        The standard deviation of the Gaussian distribution used to initialize the parameters.\n    bias : float\n        The bias parameter for the Gaussian distribution used to initialize the parameters.\n    regularizers : dict or None\n        The regularizers to be used for the model parameters.\n    constraints : dict or None\n        The constraints to be used for the model parameters.\n\n    Returns\n    -------\n    None", "", "", ":param path:\n    :return:", "calculate_ratio_and_resize(img,width,height,model_height)\n\n    :param img:\n    :param width:\n    :param height:\n    :param model_height:\n    :return:", "", ":param code:\n  :param handler:\n  :return:\n  :rtype:", "Create a SQL agent.\n\n    Args:\n        df: The dataframe to use as the prompt.\n        args: The arguments to use as the prompt.\n        pred_args: The arguments to use as the prediction.\n\n    Returns:\n        The SQL agent.", "Execute next action for the given agent execution id.\n    :param agent_execution_id: int\n    :param time: int\n    :return: None\n    :rtype: None\n    :raises: Exception\n    :", "(re)starts the jail and checks the database for any\n    tickets that are in the ignore list.", "Save the model to a file.\n\n  Args:\n      model_file (str or Path): The file to save the model to.", "", "", "", ":return:", ".ln(a)", "_execute_command_wrapper", "_val_loader(self, settings):", ":param cls: \n    :param element:", "", "", ":param kernel_type: primal or primal_dual\n  :param dim: dimension of the problem\n  :param lamb: parameter of the primal objective\n  :param rho: parameter of the primal objective\n  :param eta: parameter of the primal objective\n  :param p: parameter of the primal_dual objective\n  :param gamma: parameter of the primal_dual objective\n  :param T: parameter of the primal_dual objective\n  :return:", "_init_\n\n    :param id: int\n    :param first_line: Line\n    :return: None\n    :rtype: None", "", "", ":param suffix: \n    :param prefix: \n    :param dir: \n    :return:", ".get_input_keys() should return a list of input keys that can be used\n    to interact with the node.", "Clean up", "_set_input_type_socket(self, instance, name: str, type: Any, default: Any = _empty):\n\n    _set_input_type_socket(self, instance, name, type, default)\n    if not hasattr(instance, \"__haystack_input__\"):\n        instance.__haystack_input__ = {}\n    instance.__haystack_input__[name] = InputSocket(name=name, type=type, default_value=default)\n    return instance", "Returns the offset to the original data from the beginning of the file.\n  :returns: The offset to the original data.", "", "", "This function is called before every call to a trial function.\n\n  :param logger: The logger.\n  :param log_level: The log level.", "(batch_data, batch_label) -> (batch_data, batch_label)", "(current_input, new_input) -> None:", "", "", "", ":raises:  locale.Error  if the path is not a string", "\u590d\u5236\u5bf9\u8c61", "(self):", "Returns the edge_media_to_comment or edge_media_preview_comment\n  :param media: The media object\n  :return: The edge_media_to_comment or edge_media_preview_comment\n  :rtype: str\n  :raises:", "(paddle.fluid.dygraph.to_variable(input['A' if AtoB else 'B']),\n        paddle.fluid.dygraph.to_variable(input['B' if AtoB else 'A']),\n        input['A_paths' if AtoB else 'B_paths'])", "_clear(self, addr, ndx = 0)", "", "Returns a unicode string representation of the string.\n\n  :returns: A unicode string representation of the string.\n  :", "", "", "(See `_add_entry_for_section` for more information.)", ":param data:\n        :return:", "", "_calculate(self, transaction):", "_get_args(t: Type[Any]) -> Tuple[Any, ...]:", ":param signed: Whether the address is signed or not.\n    :param addr: The address to be read.\n    :param length: The length of the address.\n    :param label: The label of the address.\n    :return:", "_forward_pass()", "", "\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 settings.json\n    :return:  \u8fd4\u56de\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 settings.json", "", "(item_type, rec_src, sr, link, comment=None)", "", "_on(self, image)", "() -> str:", "_reset(self, level_infra: LevelInfrastructure = None, common_infra: CommonInfrastructure = None, outer_trade_decision=None, **kwargs):", "", "Extract style from the input image.\n    :return: list of (name, loss)", "_wrapper", "_stringify(data)", "", "", "_testCustomScorer", "", "_add_argument(self, *args, **kwargs):", "Render the data as JSON.\n\n  :param outfd: the output file descriptor\n  :param data: the data to be rendered", "Save the model for the `transformers.Trainer` to the `output_dir`.\n\n  :param trainer: The `transformers.Trainer` to save.\n  :param output_dir: The output directory to save the model to.", "Filters out tokens that are not meaningful to the tree", "", "Log before sleep.\n\n  :param logger: The logger.\n  :param log_level: The log level.", ".sync_with_dict(dict_agent)", "(broken)", "", "", "_get_groups(self, request, project):", "", ":param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list\n    :Example:\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype:", "Initialise the library with a configuration file.\n\n  :param config_file: The path to the configuration file.\n  :type config_file: str", ":param package_helper:\n  :param package:\n  :return: 0 if package is installed, 1 if not installed, -1 if error.", "", "Returns the fully-qualified name of the file.\n\n  :rtype: list\n  :returns: The fully-qualified name of the file.", "", "Set the volume of the mixer.\n\n    :param int volume: The volume to set.  Must be between 0 and 100.\n    :return: True if the operation succeeded, False otherwise.\n    :rtype: bool\n    :raises: :class:`~py.exceptions.ValueError` if the volume is out of range.\n    :raises: :class:`~py.exceptions.PermissionError` if the mixer is not connected.\n    :raises: :class:`~py.exceptions.PermissionError` if the mixer is not connected to the network.\n    :raises: :class:`~py.exceptions.PermissionError` if the mixer is not connected to the network.\n    :raises: :class:`~py.exceptions.PermissionError` if the mixer is not connected to the network.\n    :raises: :classemove SQL from a question.\n\n  :param question: The question to remove SQL from.\n  :type question: str", "Test that the repo is up to date and the attic key is valid.", "", "(str) -> str:\n\n    Return a string representation of the node.", "", "", "and the true", "", "https://github.com/d4/torch_distributed_zero_first.", "Adds a member to the group.\n\n    :param group: The group to add the member to.\n    :type group: Group\n    :return: The group.\n    :rtype: Group\n    :raises: ValueError if the group is not a member of the group.\n    :raises: ValueError if the group is already a member of the group.\n    :raises: ValueError if the group is not a member of the group.\n    :raises: ValueError if the group is already a member of the group.\n    :raises: ValueError if the group is not a member of the group.\n    :raises: ValueError if the group is already a member of the group.\n    :raises: ValueError if the group is not a member of the group.\n    :raises: ValueError if the group is already a member of the group.\n    :raises: ValueError if the group is not a member of the group.\n    :raises: ValueError if the group is already a member of the group.\n    :raises: ValueError if the group is not a member of the group.\n    :raises: ValueError if the group is already a member of the group.\n    :raises: ValueError if the group", "_call(self, tensor_input):\n    return self.basic_module(tensor_input)", "", "Returns the texture of the image.", "", "Sort by type and then by name.\n    :param t: type to sort by\n    :return: a tuple of (is_container, name)\n    :rtype: tuple", "", "Convert a list of messages to a list ofAnthro\n  :param history: list ofAnthro\n  :param is_demonstration: If True, useAnthro as a demonstration\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list ofAnthro\n  :return: list", "", "", "_frames: list of (int, int)", "Test that scan_file_for_barcodes correctly separates\n    barcodes from a file with many barcodes.\n\n    :return:", "(img: torch.FloatTensor) -> torch.FloatTensor:", "Returns the number of tokens used by a list", "\u83b7\u53d6\u5355\u4f8b\u5bf9\u8c61\n  :param cls: \u7c7b\u540d\n  :return: \u8fd4\u56de\u5b9e\u4f8b\u5bf9\u8c61\n  :rtype: object\n  :Example:\n    ```python\n    from singleton_class import singleton\n    @singleton\n    class A():\n        pass\n    a = A()\n    b = A()\n    print(a is b)  # True\n    ```", ".tokenize(filename)\n\n    Returns a list of tokens from the given file.\n\n    :param filename: The name of the file to be tokenized.", "Returns a list of redis keys to be used for ratelimit:user:domain:keytype\n    :param user: User object\n    :param domain: Domain object\n    :return: List of redis keys", "ite.", "(int num_samples, int current_device) -> (Tensor samples)", "(object) self - the object to be saved\n     (str) filename - the name of the file to be saved\n     (str) datapath - the path to the data directory\n     (dict) kwargs - the keyword arguments to be passed to the function", "", "Clear all jobs.", "_summary", "_init_function_for_class_with_static_method_and_no_args(self):\n\n    _init_function_for_class_with_static_method_and_one_arg(self, itag):\n\n    _init_function_for_class_with_static_method_and_two_args(self, itag, url):\n\n    _init_function_for_class_with_static_method_and_three_args(self, itag, url, filename):\n\n    _init_function_for_class_with_static_method_and_four_args(self, itag, url, filename, format_id):\n\n    _init_function_for_class_with_static_method_and_five_args(self, itag, url, filename, format_id, quality):\n\n    _init_function_for_class_with_static_method_and_six_args(self, itag, url, filename, format_id, quality,\n                                                           is_mobile):\n\n    _init_function_for_class_with_static_method_and_seven_args(self", "", "(Re)sets the forward list to empty.", "See the `pending_lookups` attribute of a `Model` instance for more information.", "", "", "", "", "", "", ":param headers:", "_get_identifiers(self):", "_authorize_redirect(self, redirect_uri=None, client_id=None,\n                       client_secret=None, extra_params=None)", "", "", ":return:", "", ":param x: \n    :return:", "Writes the changes to the project file.\n\n  :param show_message: Whether to show a message to the user.", "", "", ".get_summary_row(pkgname, obj)", "", "Returns the power spectral density of the signal.\n    :param omega: The frequencies at which the power spectral density is evaluated.\n    :return: The power spectral density of the signal.", "(400, 401, 403, 404, 405, 415, 416, 417, 422, 429, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511)\n\n    def handle_exception(self, e):\n\n        def handler(e):\n            return self.error_handler_spec[e.status_code].get(e.status_code, self.default_error_handler)(e)\n\n        return handler(e)\n    def default_error_handler(self, e):\n\n        return self.default_error_handler(e)\n\n    def log_exception(self, e):\n\n        return self.log_exception(e)", "_chunk_key_offset(self, key):", "- Initializes the Parse node.\n\n    :param input: The input to the node.\n    :param output: The output of the node.\n    :param node_config: The configuration of the node.\n    :param node_name: The name of the node.", ":param model: str\n    :return:", "", "", "_searching()\n    This function is used to search the goal node in the OPEN list.\n    :return:", "Run migrations in 'offline' mode.", ":param msg: Message\n    :return: string\n    :rtype: str\n    :example:\n    >>> from wxpy.api.messages import Message\n    >>> msg = Message(user_name='a123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567", "", "", "", ".is_managed_by_nm() -> bool:\n    Returns True if the node is managed by the network manager.", "Stop the timer.\n\n  Returns:\n      None:  The timer is no longer running.\n\n  Raises:\n      ValueError:  The timer has not been initialized: use start() or the\n          contextual form with Timer() as t:\n      AttributeError:  The timer has not been initialized: use start() or the\n          contextual form with Timer() as t:", "_transform_sentence", ".induced(nodes)\n\n    Return a induced sub-graph of the current DGLGraph.\n\n    Parameters\n    ----------\n    nodes : iterable of int or str or tuple of int or str\n        Nodes to be included in the induced sub-graph.\n\n    Returns\n    -------\n    induced_subgraph : DGLSubGraph\n        Induced sub-graph.\n\n    Notes\n    -----\n    This function is a wrapper around :func:`_graph.induced_subgraph`\n    which returns a DGLSubGraph.", "(key, value) -> list of values for the given key.\n\n    Return a list of values for the given key.", "", "Return a dictionary of the current object.\n\n  :return: A dictionary of the current object.\n  :rtype: dict", "", "", "", "_", "_add_to_parser(self, parser):\n\n    _add_to_parser(self, parser):", "", "", "_Permute.__init__(self, permutation_matrix):", "Remove a module from the module_conf", "Return the value of the Expect header.\n\n  :rtype: str\n  :returns: The value of the Expect header.\n  :raises: :class:`~django.http.Http400` if the header is not present.", "", ".default_value?", "_to_replicate_", "", "_start_streaming", "", "", "", "(1)", "() -> dict", "Return the Flask app if it is a Rest or a Gui, otherwise return None.\n\n  :param apps: The Flask app to run.\n  :param kwargs: The Flask app to run.\n  :return: The Flask app if it is a Rest or a Gui, otherwise return None.\n  :rtype: t.Optional[t.Union[Gui, Rest]].\n  :raises: :class:`~flask.Flask` is not found.\n  :raises: :class:`~flask_restful.Api` is not found.\n  :raises: :class:`~flask_login.LoginManager` is not found.\n  :raises: :class:`~flask_admin.Admin` is not found.\n  :raises: :class:`~flask_babel.Babel` is not found.\n  :raises: :class:`~flask_babel.gettext_lazy` is not found.\n  :raises: :class:`~flask_babel.ngettext_lazy` is not found.\n  :raises: :class:`~flask_babel.dgettext_lazy` is not found.\n  :raises: :class:`~flask_babel.d", "", ":param arch:\n  :return:", "(band_infinite)", ".frame.get_center() - Returns the center of the frame.\n        \n        :return: The center of the frame.", "_set_dns_challenge_txt(self, zone_id, domain, txt_challenge)", "Check if an attribute has nested attributes.\n\n  :param attribute_key: The attribute key to check.\n  :param attributes: The attributes to check.\n  :return: True if the attribute has nested attributes, False otherwise.", "", "_content: str\n    _kwargs: dict[str, Any]\n    _extra: dict[str, Any]\n    _extra_kwargs: dict[str, Any]\n    _extra_kwargs_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults_defaults_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults_defaults_defaults_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults_defaults_defaults_defaults_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults_defaults: dict[str, Any]\n    _extra_kwargs_defaults_defaults", "", ":param pair:\n    :param timeframe:\n    :param since_ms:\n    :param is_new_pair:\n    :return:\n    :rtype: List\n    :raises: :class:`~pybit.exceptions.PybitException`", "Test a redirect from a view.", "_command = self.add_command\n\n    def add_command(self, command):\n\n        self._command = command\n\n    def command(self, *args, **kwargs):\n\n        return self._command(*args, **kwargs)\n\n    def add_command(self, command):\n\n        self._command = command\n\n    def _command(self, *args, **kwargs):\n\n        return self._command(*args, **kwargs)\n\n    def command(self, *args, **kwargs):\n\n        return self._command(*args, **kwargs)\n\n    def add_command(self, command):\n\n        self._command = command\n\n    def _command(self, *args, **kwargs):\n\n        return self._command(*args, **kwargs)\n\n    def command(self, *args, **kwargs):\n\n        return self._command(*args, **kwargs)\n\n    def add_command(self, command):\n\n        self._command = command\n\n    def _command(self, *args, **kwargs):\n\n        return self._command(*args, **kwargs)\n\n    def command(self, *args, **kwargs):\n\n        return self._command(*args, **", "_call__", "", "_form_error(self, code, message):\n    '''form\u9519\u8bef\u8fd4\u56de'''", "", "Create a file at `path` if it doesn't exist.\n  :param path: The path to the file to create.\n  :param create_dirs: Whether to create any missing directories in the path.\n  :return: None.\n  :raises:", "_init_", "_call_function_type_from_args(self, *args):", "Finds the center of an arc by using the 4 points of the arc.\n    :return: The center of the arc.", "", ".stream(Image.open(image_path).convert(\"RGB\").resize((self.width, self.height)))\n        return self._postprocess_image(image_tensor)", "", "", "", "(Tensor) Sample from the posterior.", "", "", "_init_", "(message: str = \"Loading...\", delay: float = 0.1, plain_output: bool = False) -> None:", "_init_", ":param env:\n  :param noop_max:", "(self):\n    return [\n        {\"target\": target, \"params\": param}\n        for target, param in zip(self.target, self.params)\n    ]", "_predict(self, X):\n    Predict using the model.\n\n    Parameters\n    ----------\n    X : {array-like, sparse-matrix}\n        Data to predict.\n\n    Returns\n    -------\n    y_pred : array-like\n        The predicted values.", "", "Patch the client's chat completion creation function.\n\n    Args:\n        client (Union[OpenAI, AsyncOpenAI]): The client to patch.\n        mode (Mode, optional): The mode to use for the function. Defaults to Mode.FUNCTIONS.\n\n    Returns:\n        Union[OpenAI, AsyncOpenAI]: The client.", "(self, apt):\n\n    def dpt(self):\n\n    \t(self.dpt = self.idxmap.dpt.copy())\n\n        for var, slc, shp in self.idxmap.vmap:\n            self.dpt[var] = np.reshape(apt[slc], shp)\n\n\n        return self.dpt", "", "_get_loaded_models_info_helper_function_to_get_all_loaded_models_as_a_dict_of_dicts_", "_sanity_check()\n\n    Check that the object is in a valid state.\n\n    :raises: Exception if the object is not in a valid state.\n\n    :return: None.", "", "_init_signals:", "", "", "", ":type  sys.argv: list\n    :rtype:  None\n    :param sys.argv:  The command line arguments.\n    :return:  None\n    :rtype:  None\n    :raises:  None\n    :sideeffect:  None\n    :see:  None\n    :seealso:  None\n    :import:  None\n    :global:  None\n    :class:  None\n    :function:  None\n    :module:  None\n    :keyword:  None\n    :import:  None\n    :class:  None\n    :function:  None\n    :module:  None\n    :keyword:  None\n    :import:  None\n    :class:  None\n    :function:  None\n    :module:  None\n    :keyword:  None\n    :import:  None\n    :class:  None\n    :function:  None\n    :module:  None\n    :keyword:  None\n    :import:  None\n    :class:  None\n    :function:  None\n    :module:  None\n    :keyword:  None", "Returns a list of expert devices.\n\n    See Also:\n        :func:`~tensorflow.contrib.training.data_`", "", "", ":param file_path:\n      :param cls:\n      :return:", "", "_check_email:\n    Check if the email is a known suspicious email address.\n    :param email: The email to check.\n    :return: True if the email is a known suspicious email address, False otherwise.\n    :rtype: bool\n    :raises: ValueError if the email is empty.", "", "Show the success or failure modal.  If the success modal is\n  visible, call the showSuccess method.  If the failure\n  modal is visible, call the showFailure method.  If\n  the failure modal is not visible, call the showFailure\n  method.  If the success modal is not visible, call\n  the showSuccess method.  If the success modal is visible,\n  call the showSuccess method.  If the failure modal is\n  visible, call the showFailure method.  If the failure\n  modal is not visible, call the showFailure method.  If\n  the success modal is not visible, call the showSuccess\n  method.  If the success modal is visible, call the showSuccess\n  method.  If the failure modal is visible, call the showFailure\n  method.  If the failure modal is not visible, call the showFailure\n  method.  If the success modal is not visible, call the showSuccess\n  method.  If the success modal is visible, call the showSuccess method.  If the failure modal is visible, call the showFailure method.  If the failure modal is not visible, call the showFailure method.  If the", "_load_index(self, version_string) -> str:\n\n    Load the index for the given version string.", "", "", "", ".at_start()\n        :return: True if the position is at the start of the line, False otherwise.\n        :rtype: bool", ".like_from_image(url, amount=50)", "", "Get data for a particular doctype and name.\n\n    :param doctype: doctype\n    :param name: name\n    :return: data for a particular doctype and name\n\n    :rtype: dict\n    :Example:\n        >>> get_timeline_data('Blog', 'My First Blog Post')\n        {1542409600000: 1}\n    :Example:\n        >>> get_timeline_data('Blog', 'My Second Blog Post')\n        {1542409600000: 1}\n    :Example:\n        >>> get_timeline_data('Blog', 'My Third Blog Post')\n        {1542409600000: 1}\n    :Example:\n        >>> get_timeline_data('Blog', 'My Fourth Blog Post')\n        {1542409600000: 1}\n    :Example:\n        >>> get_timeline_data('Blog', 'My Fifth Blog Post')\n        {1542409600000: 1}", "_strict_mode_strategy(strict, config_file)\n\n    Returns the strict mode strategy to use, or None if strict mode is not\n    enabled.", "Return a queryset of all objects of this model.", "x is the same as y", "_re_qm = re.compile(r'[^a-zA-Z0-9\\s]')\n\n    def random_letter(cls, text):\n\n    \treturn random.choice('abcdefghijklmnopqrstuvwxyz')\n    \t\n    def random_digit(cls, text):\n\n    \treturn random.choice('0123456789')\n    \t\n    def random_space(cls, text):\n\n    \treturn ' '\n    \t\n    def random_word(cls, text):\n\n    \treturn random.choice('abcdefghijklmnopqrstuvwxyz')\n    \t\n    def random_punctuation(cls, text):\n\n    \treturn random.choice('!\"#$%&()[]{}*+-/\\\\,.:;<=>?@\\\\^_`{|}~')\n    \t\n    def random_symbol(cls, text):\n\n    \treturn random.choice('!\"#$%&()[]{}*+-/\\\\,.:;<=>?@\\\\^_`{|}~')\n    \t\n    def random_char(cls, text):\n\n    \treturn random.choice('!\"#$%&()[]{}*+-/\\\\,.:;<=>?@", "Pause the current track.\n\n  :return: :class:`~mpd.Mpd` object.", "Check if the action is a standard action.\n\n  :param action: The action to check.\n\n  :return: True if the action is a standard action, False otherwise.", "_get_pipeline", ":param kwargs:\n  :type kwargs:", "_set_upstream(self, nodes: DependencyType) -> None:", "Format the values of a dataframe.\n\n  :param value: The values to be formatted.\n\n  :return: The formatted values.\n  :rtype: List[Any]\n  :raises: ValueError if the value is not a dataframe.", "Build a sdist in the given directory.\n\n  :param sdist_directory: The directory to build a sdist in.\n  :param config_settings: The config settings to use.\n  :return: The name of the sdist.", "(n_samples, change_points) -> List[int]", ":return:", "Returns the requires for building a wheel.\n\n    :param config_settings: The config settings to use.\n    :type config_settings: dict\n    :return: The requires for building a wheel.\n    :rtype: list", "", "Test that the notebook can be read and written using the same\n  format.\n\n  Parameters\n  ----------\n  nb_file : str\n    The notebook file to be read and written.\n  ext : str\n    The format of the notebook.\n\n  Returns\n  -------\n  None.", "", "(sid, max_shares, max_notional) -> None", "Initializes a new instance of the MfeInternalAutologgerSettings class.\n\n  :param mlflow_autologger:\n      The mlflow autologger state.\n  :param kwargs:\n      The keyword arguments.\n  :type kwargs: dict", "_compare:", "_init_\n    :param kwargs:\n    :return:\n    :rtype: None", "_proto2object(proto: CreateRequestMessage_PB) -> \"CreateRequestMessage\":\n    _deserialize(blob=proto.msg_id)\n    _deserialize(blob=proto.address)\n    json.loads(proto.content)\n    _deserialize(blob=proto.reply_to)\n    return CreateRequestMessage(\n        msg_id=_deserialize(blob=proto.msg_id),\n        address=_deserialize(blob=proto.address),\n        content=json.loads(proto.content),\n        reply_to=_deserialize(blob=proto.reply_to),\n    )", "", "(str) Get the usage string for the command.\n\n    :param ctx: (Context)", "_init__", "Cancel a job.\n\n  :param job: The job to cancel.", "", "", "Parses a range or a comma-separated list of numbers.", "_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):", "", "", "_summary_or_description\n:return: str\n:rtype: str\n:raises: ValueError\n:", "", "", "", "", "Restart the server.\n    :param signal_error: signal error\n    :param no_daemon: no daemon\n    :param blur_usage: blur usage\n    :param advertise_version: advertise version\n    :param transit: transit\n    :param rendezvous: rendezvous\n    :param disallow_list: disallow list\n    :return: None\n    :rtype: None\n    :type cfg: wormhole.server.cmd_server.ServerConfig\n    :type signal_error: bool\n    :type no_daemon: bool\n    :type blur_usage: bool\n    :type advertise_version: str\n    :type transit: str\n    :type rendezvous: str\n    :type disallow_list: bool\n    :rtype: None\n    :type cfg: wormhole.server.cmd_server.ServerConfig\n    :type signal_error: bool\n    :type no_daemon: bool\n    :type blur_usage: bool\n    :type advertise_version: str\n    :type transit: str\n    :type rendezvous: str\n    :type disallow_list: bool\n    :rtype: None\n    :type cfg: worm", "_build_commands(self):", ":param wav:  np.array, 16-bit signed wav", "_read_tsv(self, input_file):", "_get_data_asset", "", "", "", "", "", "_connection_stacking_with_nested_connections(self):\n\n    _connection_stacking_with_nested_connections_with_nested_connections(self):\n\n    _connection_stacking_with_nested_connections_with_nested_connections_with_nested_connections(self):\n\n    _connection_stacking_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections(self):\n\n    _connection_stacking_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections(self):\n\n    _connection_stacking_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_nested_connections_with_", "Returns a list of (gradient, variable) pairs.\n    The gradient will be a list of (value, variable) pairs.\n    If size() > 1, this is an allreduce.\n    If size() == 1, this is a standard gradient computation.", ":param set_type:\n      :return: 1:\u8f6f\u5367 2:\u786c\u5367 3:\u786c\u5ea7 4:\u65e0\ufffd 9:\u7279\ufffd 10:\u65e0\ufffd 11:\u65e0\ufffd 12:\u65e0\ufffd 13:\u65e0\ufffd 14:\u65e0\ufffd 15:\u65e0\ufffd 16:\u65e0\ufffd 17:\u65e0\ufffd 18:\u65e0\ufffd 19:\u65e0\ufffd 20:\u65e0\ufffd 21:\u65e0\ufffd 22:\u65e0\ufffd 23:\u65e0\ufffd 24:\u65e0\ufffd 25:\u65e0\ufffd 26:\u65e0\ufffd 27:\u65e0\ufffd 28:\u65e0\ufffd 29:\u65e0\ufffd 30:\u65e0\ufffd 31:\u65e0\ufffd 32:\u65e0\ufffd 33:\u65e0\ufffd 34:\u65e0\ufffd 35:\u65e0\ufffd 36:\u65e0\ufffd 37:\u65e0\ufffd 38:\u65e0\ufffd 39:\u65e0\ufffd 40:\u65e0\ufffd 41:\u65e0\ufffd 42:\u65e0\ufffd 43:\u65e0\ufffd 44:\u65e0\ufffd 45:\u65e0\ufffd 46", "", "_set_in_memo(self, memo, k, v)", "", "(optional) Test that the 'SELECT users.' command is a valid\n    completion.", "_repr_html_():\n    return self.get_arr()._repr_html_()", "", "", "_init_", "(self, pwdhash):\n    if self.valid:\n        return\n    for entry in self.entries_list:\n        entry.decrypt_with_hash(pwdhash)\n    self.valid = True", "Exports a journal to a file or directory.\n\n  :param cls: the class to export\n  :param journal: the journal to export\n  :param output: the output directory or file to export to", "", "", "(dict)", "_find_first_cycle(self):", "_make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:", "(2017-06-04 18:42:46,000000000 +0000)\n     +------------------------------------+\n     |                                    |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |\n     |  Organization member created      |", ".csr2csc()", "(in_channels, out_channels, kernel_size, stride, bias=True)", "", "", "Create a help command.\n\n  :rtype: :class:`~boto3.session.Session`\n\n  :returns: The help command.", "_menu_loadPage(self, index: int):\n\n    _menu_group.button(index).setChecked(True)\n\n    page = self.ui.stackedWidget_11.currentWidget()\n    min_width = page.property('minimumFrameWidth')\n    self.ui.stackedWidget_11.setMinimumWidth(min_width)\n    self.ui.stackedWidget_11.setCurrentIndex(index)\n    self.menu_group.button(index).setChecked(True)", "", "", "_set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None):\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method", "", "", "", "", ".", "", ":param cls:\n    :param message_entity_array:\n    :return:", ">>> sizeof_fmt(1024)\n    '1.0K'\n    >>> sizeof_fmt(1024000)\n    '1.0M'\n    >>> sizeof_fmt(1024000000)\n    '1.0G'\n    >>> sizeof_fmt(1024000000000)\n    '1.0T'\n    >>> sizeof_fmt(1024000000000000)\n    '1.0P'\n    >>> sizeof_fmt(1024000000000000000)\n    '1.0E'\n    >>> sizeof_fmt(10240000000000000000000000000000000000000000000000000000000000000000000000000000000", ":param X:\n    :return:", "_check_write_conan(username, ref)\n\n    Check if the user can write to the given ref.\n\n    :param username: The username of the user to check.\n    :param ref: The ref to check.\n    :return: True if the user can write to the given ref, False otherwise.\n    :rtype: bool", "", "", "Check if a type is an AwaitableGenerator.\n  :param t: Type to check.\n  :return: True if a type is an AwaitableGenerator, False otherwise.", "(type) -> list[T] | tuple[T, ...]:\n    Return the data as a list of elements.\n    :param type: type of elements to return", "", "_get_release_info", "", "_load(self, data_loader, datafile)", ":return: :class:`str`", "", "get_providers()\n\n    Returns a list of providers from the lspci command.\n\n    Returns:\n        list: List of providers.\n\n    Example:\n        >>> get_providers()\n        ['10']", "", ":param url:\n    :param param:\n    :return:", "", "(configs, label_map_path) -> (configs, label_map_path)", "", "", "", "", "", "", ":return: The list of requires for building a wheel.\n      :rtype: list[str]", "", "", "Remove useless information from the coco object.\n    :param coco: The coco object to remove useless information from.\n    :return: The coco object with useless information removed.", ":return: True if all events are success, False otherwise.", "test broadcasting of the take_along_axis and put_along_axis functions", "", ":", "(fgraph) -> bool", ":param tracks: \n    :param detections: \n    :param metric:", "", "", "_api_version =", ":param args: command line arguments\n  :return: None\n  :rtype: None\n  :author:  \"William Adams\"", "", "Find a node by name in a given subgraph.\n\n    Args:\n        name (str): The name of the node to find.\n        package (str): The package of the node to find.\n        subgraph (str): The subgraph of the node to find.\n        node_type (str): The type of the node to find.", "Test that only with multiples works.\n\n    :param capfd: a `capfd.readouterr()` object.\n    :param home: a `home` object.\n    :param dotfiles: a `dotfiles` object.\n    :param run_dotbot: a `run_dotbot()` object.\n    :return: a `capfd.readouterr()` object.\n    :rtype: `capfd.readouterr()` object."], ["(self, path):", "", "_get_label_issues:\n    Returns the label issues array.", "", "", "", "", "", "This method is called when the task is run.\n    :return:", "(Callable[..., \"ResultInterface\"]) -> \"ResultInterface\":", "", "\u83b7\u53d6\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\n  :return: \u4f18\u5148\u7ea7", ":param nums:\n    :param target:\n    :return: \n    :rtype: \n    :Example: \n    >>> bsearch_right([1, 2, 3, 3, 3, 3, 3, 4, 5], 3)\n    3\n    >>> bsearch_right([1, 2, 3, 3, 3, 3, 3, 4, 5], 3)\n    5\n    >>> bsearch_right([1, 2, 3, 3, 3, 3, 3, 4, 5], 4)\n    6\n    >>> bsearch_right([1, 2, 3, 3, 3, 3, 3, 4, 5], 5)\n    7\n    >>> bsearch_right([1, 2, 3, 3, 3, 3, 3, 4, 5], 6)\n    -1\n    :", "_map(self, pack):", "(user: User) -> None:", ":return: 0 if success, -1 if fail\n    :rtype: int\n    :raises:", "(self):", "(optional) hook to retarget the module to the distutils_path.\n    :param mod: the module to retarget", "_go(self):", "(element) -> bool\n\n    Return True if the element has the key and the value matches the\n    regular expression.", ":param authentication:  The authentication string to be used in the challenge.\n    :param realm:  The realm to be used in the challenge.\n    :return:  The challenge string.", "", "", ":param prompt:\n    :param float:\n    :return:", "_proto2object(proto: DeleteDatasetMessage_PB) -> \"DeleteDatasetMessage\":", "", "", "(value, size) -> (array, idx)", "Close the recordio writer.\n\n    :return: The return value of the underlying recordio writer.", "", "_summary", ".plot_bar_chart(df, x, y)\n    .set_x_label(x)\n    .set_y_label(y)\n    .set_title(f\"Bar Chart with {x} and {y}\")\n    .set_x_ticks(x)\n    .set_y_ticks(y)\n    .set_x_labels(x)\n    .set_y_labels(y)\n    .set_title(f\"Bar Chart with {x} and {y}\")\n    .set_x_ticks(x)\n    .set_y_ticks(y)\n    .set_x_labels(x)\n    .set_y_labels(y)\n    .set_title(f\"Bar Chart with {x} and {y}\")\n    .set_x_ticks(x)\n    .set_y_ticks(y)\n    .set_x_labels(x)\n    .set_y_labels(y)\n    .set_title(f\"Bar Chart with {x} and {y}\")\n    .set_x_ticks(x)", "", "Generates batches of data from a list of waveform data.\n\n    Args:\n        data (List[List[float]]): List of waveform data.\n        sample_rate (int): Sampling rate of the input waveform data.\n        batch_size (int): Number of waveforms in each batch.\n        **kwargs: Additional arguments for the mel_spect function.\n\n    Returns:\n        Generator[List[List[float]], None, None]: Generator of batches of waveform data.\n\n    Example:\n        ```python\n        data = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]\n        batch_size = 2\n        batchify(data, sample_rate=16000, batch_size=batch_size)\n        ```", ":param text:", "(int, object, object) -> str", "", "Read a notebook from a file.\n\n  Parameters\n  ----------\n  nb_file : str\n    Path to the notebook file.\n  format_name : str\n    Name of the format to use for the notebook.\n    If None, the notebook will be read using the default format.\n\n  Returns\n  -------\n  str\n    The content of the notebook.", "", "", "_call__", "", "_unicode__\n\n    :returns: The string representation of the object.\n\n    :rtype: str\n\n    :raises: :class:`UnicodeEncodeError`\n\n    :raises: :class:`UnicodeDecodeError`\n\n    :raises: :class:`UnicodeError`\n\n    :raises: :class:`Unicode\ufffd", "", ".get_text(joiner='|')\n    .itemCount\n    .caretPos\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(joiner='|')\n    .get_text(", ":param filename:\n    :param mode:\n    :return:", "_summary_", "", "\u4ece\u6307\u5b9a\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\n\n  :param filename: \u6587\u4ef6\u8def\u5f84\n  :return: \u6570\u636e\u5217\u8868", "", "Parse a command from a string.\n\n    Args:\n        input_str (str): The string to parse.\n\n    Returns:\n        tuple: A tuple containing the command and accompanying text.", ".", "Prepare the build directory.", "Test the dmc_hs_fromfile method.\n\n  :return:", "(int, file) ->", "", "Render the graph for the given interface.\n\n    :param request:\n    :param pk:\n    :return:", "", "This is the main method of the Catalog class.\n    :param param_value: The value of the parameter.\n    :return: The value of the parameter.\n    :rtype: The value of the parameter.\n    :raises: An exception if the parameter is not valid.\n    :", "(self, *args, **kwargs):", "_init_", "(int, file) ->", "(str)", "", "", "auto_wrap_policy: (optional) function to control the auto-wrap policy of the model.\n        Default is to use the flash-attention-based auto-wrap policy.", "batch rename files in a directory\n\n    Args:\n        work_dir (str): the directory you want to rename files in\n        old_ext (str): the extension of the files you want to rename\n        new_ext (str): the extension of the new files you want to rename\n\n    Returns:\n        None: the directory will be renamed with the new extension", "", "", "_standard_exponential returns a random standard exponential with the same\n    distribution as the original random sample.", "(100% coverage)", "", ":param kwargs:\n  :type kwargs: dict\n  :return:\n  :rtype: ComponentJobOutput\n  :raises:", "_is_rewrite_engine_on(self, vhost):", "", "", "Build a new session or return an existing session.\n\n  Args:\n    session_id (str): The session identifier.\n    system_prompt (str, optional): The system prompt to use for the session.\n\n  Returns:\n    Session: The session object.", "Test accuracy.mae", "_append_package_path(self, package_name, directory):", "_save(self, name, resp)", "", ":param x: \n    :param y:", "_init_", "Test the check_success function.\n\n  :return: None", "_call(self, inputs: Dict[str, Any], run_manager: Optional[CallbackManagerForChainRun] = None) -> Dict[str, Any] :", "", "- `pretrained` (bool): If True, returns a model pre-trained on the ImageNet-768-224-ViT-B-12-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224-224", "", "", "Get the location of the dropbox home folder\n\n    :return: The location of the dropbox home folder\n    :rtype: str", "", "Encode numpy array to json array.\n  :param obj: numpy array\n  :return: json array", ":param values: list of integers\n    :return: boolean", "(x1, y1, x2, y2) -> [Keypoint(x, y)]", "", "() -> str\n\n  Returns the maximum width and height of a token as a string.", ":param img1_path:", "", "start the server.\n\n    :param cfg: configuration\n    :param signal_error: signal error\n    :param no_daemon: no daemon\n    :param blur_usage: blur usage\n    :param advertise_version: advertise version\n    :param transit: transit\n    :param rendezvous: rendezvous\n    :return:", "", "Test the legacy user installation of simple2.\n\n  This tests the simple2 package installed with the simple package\n  installed with simple2.", "", "Returns a Member instance.\n\n  :param index: The index of the member.\n  :param name: The name of the member.\n  :param session: The session this member is associated with.\n  :param data: The data associated with the member.", "", ":param pipeline_uuid:\n    :param block_uuid:\n    :return:\n    :rtype:", "", "_check_fit_called(self):", "", "Check for links in the text.\n\n    :param text: The text to check for links.\n    :return: A list of links found in the text.\n    :rtype: list", ":return: a dict of name-code pairs.", ":param document: A document to get the date created from.\n    :return: The date created.", "", ":param ago: number of items to return\n    :param size: number of items to return\n    :return: list of items", "", ":param y: initial value of y\n    :param t: initial time", "Iterator for the table.", "_init_model(self, device):\n\n    :param device: The device to use for the model.\n        :type device: str or torch.device\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a valid device.\n        :raises ValueError: if the device is not a", "Returns the preferred width of the given box.\n\n  :param box: The box to get the preferred width of.\n  :type box: :class:`~textx.boxes.Box`\n\n  :return: The preferred width of the box.\n  :rtype: float", "Delete a document from the index.\n\n  Parameters\n  ----------\n  doc_id : str\n    The document identifier.\n  **delete_kwargs : Any\n    The delete arguments.\n\n  Returns\n  -------\n  None", "Convert a boolean string to a Python boolean.\n\n    :param value: The boolean string to convert.\n    :return: The Python boolean.\n    :rtype: bool or None.", "(env_var: Union[ConfigKey, str]) -> bool:", "", "", "Return True if the request was successful.  This is a\n  shortcut for the :meth:`~flask_restful.Resource.get` method.", ":return: \n    :rtype: str\n    :author:", "", "Parameters\n    ----------\n    pretrained : bool, optional (default=False)\n        If True, load the default pre-trained weights from gluoncv.\n    num_classes : int, optional (default=1000)\n        Number of classes.\n    in_chans : int, optional (default=3)\n        Number of input channels.\n    \n    Returns\n    -------\n    model : gluon.", "remove batch from layout\n    :param layout: layout\n    :return: layout without batch", "Parameters\n    ----------\n    df : pd.DataFrame\n        Input data frame.\n    sentence_cols : list\n        Columns of the input data frame that contains sentences.\n    stop_cols : list\n        Columns of the input data frame that contains stop words.\n\n    Returns\n    -------\n    pd.DataFrame\n        Input data frame with stop words removed.", "Delete one dataset with success.\n    :return:", "_include_path(self, path, extensions=None):", "", "_grid_anchors(self, grid_sizes):\n\n    _get_rotated_boxes(self, grid_sizes):\n\n    def _get_rotated_boxes(self, grid_sizes):\n\n    def __call__(self, features):\n\n    def __repr__(self):\n\n    def __str__(self):\n\n    def __len__(self):\n\n    def __getitem__(self, index):\n\n    def __iter__(self):\n\n    def __contains__(self, item):\n\n    def __eq__(self, other):\n\n    def __ne__(self, other):\n\n    def __lt__(self, other):\n\n    def __le__(self, other):\n\n    def __gt__(self, other):\n\n    def __ge__(self, other):", "", "", ":param signum: \n    :param frame: \n    :return: \n    :rtype:", "_make_task(cls, args: Namespace, **kwargs):", "(self, init='glorot_uniform', scale=0.5, bias=1.0, regularizers=None, constraints=None):", ":param rules_paths: list of paths to rules files\n    :return: list of rules", ":param args: tuple of arguments to pass to the function\n  :param kwargs: dict of keyword arguments to pass to the function\n  :param rtn: the return value of the function, default is ''", "send static files", "", "", ":param code:\n  :param handler:\n  :return:\n  :rtype:", "Create a SQL agent to answer questions about the data.\n\n    Args:\n        df (pd.DataFrame): The data to be used for the agent.\n        args (dict): The arguments to be used for the agent.\n        pred_args (dict): The arguments to be used for the prediction.\n\n    Returns:\n        The SQL agent.", "Execute next action of the agent.\n\n  Args:\n      agent_execution_id (int): The id of the agent execution.\n      time (int): The time of the execution.\n\n  Returns:\n      None: Nothing is returned.", "(Re)start the jail.\n    :return: None", "Save the model to a file.\n\n  Args:\n    model_file (str or Path): The file to save the model to.\n\n  Returns:\n    None: The model is saved to a file.", ":param df:\n  :return:\n  :rtype:", ":param filename: \n    :return: \n    :return type:", "", "", ".ln(self, a)", "log.info(f\"Executing command: {run_cmd}\")\n    for i, item in enumerate(run_cmd):\n        log.info(f\"{i}: {item}\")\n    command_to_run = ' '.join(run_cmd)\n    log.info(f\"Executings command: {command_to_run}\")\n    self.process = subprocess.Popen(run_cmd, **kwargs)\n    self.process.wait()\n    self.process = None\n    log.info(\"Command executed successfully.\")\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0\n    return self.process.returncode == 0", "_val_loader(self, settings):", "Return the coordinates of the element in the box.\n\n  :param cls:  The class to use for the box.\n  :param element:  The element to get the coordinates from.\n\n  :return:  The coordinates of the element in the box.\n  :rtype:  Rect.", "", ":param fields: list of fields to be used for this object.", ":param kernel_type: 'primal' or 'dual'\n  :param dim: dimension of the space\n  :param lamb: the parameter of the kernel", "", "", "", "Returns a temporary directory in which to store temporary files.", "(str)", ":return: \n    :rtype: None\n    :raises: \n    :raises:", "(type: Any, default: Any = _empty) -> None:\n\n    Sets the input type of the socket.\n\n    Args:\n        type: The type of the socket.\n        default: The default value of the socket.", "The offset of the original data in the module.", "_update_title(self, title):\n    Updates the title of the sheet.\n\n    :param str title: The new title of the sheet.\n    :return: The response from the API.", "", "", "() -> BatchDataType:", "(Optional) Remaps the current input to a new input.\n\n    :param current_input: The current input to be remapped.\n    :param new_input: The new input to be used instead of the current input.\n    :return: None.", "", "_estimate_dummy_outcome", "", "", "\u590d\u5236\u5bf9\u8c61\n:return: \u590d\u5236\u5bf9\u8c61\n:rtype: str", "(self) -> None:\n    Initialize a new `Diff` object.", "", "(def) set_input(self, input)\n\n    :param input:\n    :return:", "_clear(self, addr, ndx=0, len=2)\n\n    Clear the contents of a window.\n\n    Parameters\n    ----------\n    addr : int\n        Address of the window to clear.\n    ndx : int\n        Window number to clear.\n        If 0, all windows are cleared.\n    len : int\n        Length of the window to clear.\n        If 0, all windows are cleared.\n        If 1, the first window is cleared.\n        If 2, the second window is cleared.", "", "Returns a unicode string representation of the object.\n  :returns: A unicode string.\n  :", ".convert_objects(convert_dates=True, convert_numeric=False, copy=True)", "Delete a bookmark.\n\n  Args:\n    key: The key of the bookmark to delete.\n\n  Returns:\n    Nothing.", "_add_entry_from_context(page, content, toc)\n\n    Creates an entry for a given page and content.", ":param data:\n:return:\n:rtype:", ":param s: str\n    :return: int", "_calculate(self, transaction):", "(type -> Any) -> Tuple[Any, ...]\n\n    :param t: type to get args from.", ":param signed: bool, default=False, whether to sign the address\n  :param addr: int, default=None, the address to be signed\n  :param length: int, default=None, the length of the address to be signed\n  :param label: str, default=None, the label of the address to be signed\n  :return:", "", "", "", ":param num_new_computed_tokens: The number of new tokens that have been added to the model.\n  :return:", "(item_type, rec_src, sr, link, comment=None)", "", "_on(self, image)", "", "_reset_level_infra(self, level_infra: LevelInfrastructure = None):\n    _reset_common_infra(self, common_infra: CommonInfrastructure = None):\n    _reset_outer_trade_decision(self, outer_trade_decision=None):\n    _reset_all(self, level_infra=None, common_infra=None, outer_trade_decision=None):\n    _reset_all_with_kwargs(self, level_infra=None, common_infra=None, outer_trade_decision=None, **kwargs):\n    _reset_all_with_kwargs_and_kwargs(self, level_infra=None, common_infra=None, outer_trade_decision=None, **kwargs, **kwargs):\n    _reset_all_with_kwargs_and_kwargs_and_kwargs(self, level_infra=None, common_infra=None, outer_trade_decision=None, **kwargs, **kwargs, **kwargs):\n    _reset_all_with_kwargs_and_kwargs_and_kwargs_and_kwargs(self, level_infra=None, common_infra=None, outer_", "", "", "_make_url_absolute(url: str) -> str:\n\n_check_local_file_access(url: str) -> bool:\n\n_sanitize_url(url: str) -> str:\n\n_is_valid_url(url: str) -> bool:\n\n_func(url: str, *args, **kwargs) -> Any:\n\n_get_local_file_content(url: str) -> str:", "_stringify(data)", "Save the current state of the form to a cookie.\n\n    :param resp: The response object to send back to the client.\n    :return: None.", "", "_testCustomScorer(self):", "", ".add_argument(self, *args, **kwargs)", "(data) -> (outfd)\n\n    Render data as JSON.", "Save the model for the `transformers.Trainer` to a directory.\n\n  :param trainer: The `transformers.Trainer` to save.\n  :param output_dir: The output directory to save the model to.", "Filters out tokens that are not relevant for the\n    tree structure.\n\n    :param uwline: A :class:`~treebank.line.UWLined` object.\n\n    :return: A list of tokens that are relevant for the\n    tree structure.\n    :rtype: list of :class:`~treebank.token.UWToken` objects.\n\n    :raises: :class:`~treebank.line.UWLined` objects are\n    invalid.\n    :raises: :class:`~treebank.token.UWToken` objects are\n    invalid.\n    :raises: :class:`~treebank.token.UWToken` objects are\n    not relevant for the tree structure.\n    :raises: :class:`~treebank.token.UWToken` objects are\n    not relevant for the tree structure.\n    :raises: :class:`~treebank.token.UWToken` objects are\n    not relevant for the tree structure.\n    :raises: :class:`~treebank.token.UWToken` objects are\n    not relevant for the tree structure.\n    :raises: :class:`~treebank.token", "Convert text to phonemes.\n\n    Args:\n        text (str): The text to be converted.\n        language (str): The language of the text.\n\n    Returns:\n        str: The phonemes of the text.", "'Before sleep logging'", "_sync_with_dict(self, dict_agent)", "(python-2.7.12-x86_64-win32) -", "", "", "_get_group_tombstones(self, request, project):\n\n    \tReturn a list of group tombstones to be included in the response.\n\n    \t:param request:\n    \t:param project:\n    \t:return:", "", ":param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :return:", "", ":param package_helper:\n  :param package:\n  :return:\n  :rtype: int\n  :raises:", "", "Return the fully-qualified name of this file.\n\n    :return: a list of the parts of the fully-qualified name of this file.", "", "_set_volume(self, volume):\n    Sets the volume of the mixer.\n\n    :param int volume: The volume to set.", "", "Stops all jobs in the current session.", "(result=None) ->", ":return:  :class:`~django.conf.settings.BASE_DIR`\n  :rtype: str", "", "Test that the repo is upgraded and the key is valid.\n\n  :param tmpdir: temporary directory to use as a repository\n  :param attic_repo: repository to upgrade\n  :param attic_key_file: key file to use to upgrade the repository\n  :return: None", "", "_   _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _   _  _", "", "", "Calculate the WER between the predicted sequences and the true sequences.\n\n    :param seqs_hat: List of predicted sequences.\n    :param seqs_true: List of true sequences.\n    :return:", "", "https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero_first.py.\n  https://github.com/d4/torch_distributed_zero", "Adds a member to a group.", "_call(self, tensor_input):", "", "Returns the texture of the image.", "", "Sort by the following criteria:\n    1. is it a subclass of collections.Container?\n    2. is it None?\n    3. is it a type?", "", "Convert a list of messages to a list ofAnthro\n  Anthropic-specific implementation.", "Returns all the keys in the database.", "", "_frames: list of Frame objects.", "Tests that a file containing a single qr barcode is correctly\n    detected and that it is added to the list of barcodes.\n\n    :return: None.", "(img) -> torch.FloatTensor", ".num_tokens_from_messages(messages: List[Message]) -> int:\n\n    ..", ":param cls:", "_tokenize(filename) -> list[Token]\n\n    Tokenize the given file and return a list of tokens.\n\n    Parameters\n    ----------\n    filename : str\n\n    Returns\n    -------\n    list[Token]\n\n    List of tokens.", "Returns a list of redis keys for a user/domain/keytype.\n\n    :param user: The user to generate the keys for.\n    :param domain: The domain to generate the keys for.\n    :param keytype: The type of key to generate. One of 'list', 'zset', or 'block'.\n\n    :return: A list of redis keys.", "ite_type:\n    - string\n    - integer\n    - float\n    - boolean\n    - date\n    - datetime\n    - time\n    - timestamp", "(int num_samples, int current_device) -> Tensor", "_summary_", "", "Clear all jobs.", "_create_valid_env", "_init__", "Saves the page permission inline form.\n\n    :param commit: whether to commit the instance or not.\n    :type commit: bool", "(see :class:`Device` for details)", "", "", "Initialize the node with the input and output types.\n\n  Args:\n    input (str): The type of the input data.\n    output (List[str]): The type of the output data.\n    node_config (Optional[dict], optional): The configuration of the node.\n    node_name (str, optional): The name of the node.", "", "", "", "", "Extracts headers from the headers string.\n    \n    :param headers: The headers string.\n    :type headers: str\n    :return: A dictionary of headers.\n    :rtype: dict\n    :Example:\n    ```python\n    headers = \"Content-Type: application/json\\n\" + \\\n              \"Authorization: 1234567890\\n\" + \\\n              \"Content-Length: 10\\n\" + \\\n              \"Content-Type: application/json\\n\" + \\\n              \"Authorization: 1234567890\\n\" + \\\n              \"Content-Length: 10\\n\" + \\\n              \"Content-Type: application/json\\n\" + \\\n              \"Authorization: 1234567890\\n\" + \\\n              \"Content-Length: 10\\n\" + \\\n              \"Content-Type: application/json\\n\" + \\\n              \"Authorization: 1234567890\\n\" + \\\n              \"Content-Length: 10", "_get_identifiers(self):\n\n    Returns a list of Parameter objects for this method.\n    :returns: List of Parameter objects.\n    :rtype: List of Parameter objects.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class:`~exceptions.UndefinedError` if the method is not defined.\n    :raises: :class", "_authorize_redirect(self, redirect_uri=None, client_id=None,\n                           client_secret=None, extra_params=None)", "", "", "", ":param assets: list of assets to be installed\n  :param account_prefer: the prefered account for the new account\n  :param account_policy: the policy for the new account\n  :param host_callback: callback function for the host", ":param x: \n    :return:", "", "", "", ".get_summary_row(self, pkgname, obj)", "", ":param omega: The angular frequency\n    :return: The power spectral density", "(400, 404, 500, 503) -> (int, int, int, int)\n\n    Returns a function that will be called to handle the exception.\n\n    :param e: The exception that was raised.\n\n    :return: The function that will be called to handle the exception.", "_chunk_key_offset - Returns the offset in bytes of a given chunk key", "(input: str, output: List[str], node_config: dict, node_name: str = \"Parse\") ->", "Sets the model to use for the current environment.\n\n    :param model: The model to use for the current environment.\n    :type model: str", ":param arch:  :class:`arch.Arch`\n  :return:", "", "(self):\n    (self.s_start, self.s_goal) = self.get_start_goal()\n    self.OPEN.put(self.s_start)\n    while self.OPEN:\n        s = self.OPEN.get()\n        if s == self.s_goal:\n            break\n        self.CLOSED.append(s)\n        for s_n in self.get_neighbor(s):\n            if s_n not in self.PARENT:\n                self.OPEN.put(s_n)\n                self.PARENT[s_n] = s\n    return self.extract_path(), self.CLOSED", "", "\u63d0\u53d6\u7528\u6237 ID\n    :param msg: \u6d88\u606f\n    :param max_len: \u6700\u5927\u957f\u5ea6\n    :param re_sub: \u63d0\u53d6\u89c4\u5219\n    :return: \u7528\u6237 ID\n    :rtype: str\n    :Example:\n        >>> get_context_user_id(Message(text='test_user_name'))\n        'test'\n        >>> get_context_user_id(Message(text='test_user_name_2'))\n        'test_2'\n        >>> get_context_user_id(Message(text='test_user_name_3'), max_len=2)\n        'test'\n        >>> get_context_user_id(Message(text='test_user_name_4'), max_len=2, re_sub=r'[^a-zA-Z\\d]')\r\n        'test_4'\n        >>> get_context_user_id(Message(text='test_user_name_5'), max_len=2, re_sub=r'[^a-zA-Z\\d]')\r\n        'test_5'\n        >>> get_context_user_id(Message", "", "", "", "", "Stop the timer.\n\n  :raises ValueError: if the timer has not been initialized.", "_transform_sentence_for_training(self, sentences: Union[Sentence, List[Sentence]]) -> List[EncodedSentence]:\n\n_encode_sentence_for_training(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_prediction(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_generation(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_training_and_prediction(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_generation_and_training(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_training_and_prediction_and_generation(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_generation_and_training_and_prediction(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_training_and_prediction_and_generation_and_generation(self, sentence: Sentence) -> List[EncodedSentence]:\n\n_encode_sentence_for_generation_and_training_and_prediction", ".induced(self, nodes):\n    Return a DGLSubGraph of the DGLGraph with the given nodes.\n    Args:\n        nodes (list of int): List of node indices.\n    Returns:\n        DGLSubGraph: DGLSubGraph of the DGLGraph with the given nodes.", "_add(self, key, value)", "_get_dictionary_values(self, dictionary)", "", "", "", "", "_get_best_index_", "_add_to_parser:\n    Adds a command line argument to the parser.\n\n    Parameters\n    ----------\n    parser : argparse.ArgumentParser\n        The parser to add the argument to.\n\n    Returns\n    -------\n    argparse.ArgumentParser\n        The parser with the argument added.\n\n    See Also\n    --------\n    argparse.ArgumentParser.add_argument:\n        The argument to add to the parser.", "_get(self, query_id)", "", "_Permute(self, num_permutations=1):", "", "Return the value of the 'Expect' header.\n\n  :returns: The value of the 'Expect' header, or None if the header\n  is not set.", "This method is called to update the state of the stream.\n    :param current_stream_state: The current state of the stream.\n    :param latest_record: The latest record from the stream.\n    :return: The updated state of the stream.\n    :rtype: Mapping[str, Any]\n    :raises: ValueError if the latest record is not a dictionary.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the cursor field.\n    :raises: ValueError if the latest record is missing the", ".has_default_value() -> bool:", "_to_replicate_  (self):\n  return self._replicate_", "", "_start_streaming_with_callback_function_to_get_tweets_from_twitter_api_and_call_callback_function_with_the_tweets_in_it_as_argument_in_the_callback_function_call_order_is_not_guaranteed_by_the_twitter_api_response_order_of_the_tweets_in_the_response_of_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_request_to_the_twitter_api_", "", "", "", "(self, message, *args, **kwargs):", "", "Returns a Flask application or a Flask-RESTful application.\n\n  :param apps: A list of Flask or Flask-RESTful applications.\n  :param kwargs: The same arguments as :func:`~flask_restful.Api.run`.\n  :return: A :class:`~flask_restful.Api` or a :class:`~flask.Flask`\n      instance.", "", ":param str arch:", "_band_infinite()", ".frame.get_center() - center of the frame", "_set_dns_challenge_txt(self, zone_id, domain, txt_challenge)", "Returns True if the attribute is a nested attribute.\n\n    Args:\n        attribute_key (str): The attribute key to check.\n        attributes (Dict[str, Any]): The attributes to check.\n\n    Returns:\n        bool: True if the attribute is a nested attribute.", "", "_content: str\n\n    :param content: The content of the page.\n    :type content: str", "", ":param pair: pair to get data for\n    :param timeframe: timeframe to get data for\n    :param since_ms: since_ms to get data for\n    :param is_new_pair: if the pair is new or not\n    :return: list of ohlcv data for the pair and timeframe", "Test that a redirect is followed by a 200 response.", "", "_ = lambda self, cfg: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "Extracts a .tar.gz file to a specified folder.\n\n    Parameters\n    ----------\n    file_path : str\n        Path to the .tar.gz file.\n    extract_folder : str\n        Path to the folder to extract the .tar.gz file to.\n\n    Returns\n    -------\n    None.", "_post_form_data(self, form, data):", "Refresh the themes dictionary.\n    :return:  None.\n    :rtype:  None.", "Create a file at the given path.\n\n  :param path: the path to the file\n  :param create_dirs: whether to create any directories in the path", "_init_", "_get_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function_type_function", "", "Run the tests with the following command:\n    ```\n    poetry run pytest --cov=./ --cov-report=xml\n    ```", ".", "", "", "", "(def sample(self,\n               num_samples:int,\n               current_device: int) -> Tensor):", ":param cls:\n  :param queryset:\n  :return:\n  :rtype: :class:`django.db.models.query.QuerySet`", "", "_init_", "_init_", "_init_", "Initialize the wrapper.\n\n  Args:\n    env (gym.Env): the environment to be wrapped.\n    noop_max (int): the maximum number of no", "(self):\n    return [{\"target\": target, \"params\": param} for target, param in zip(self.target, self.params)]", "_predict(self, X):\n    Predict using the model.\n\n    Parameters\n    ----------\n    X : {array-like}, shape = [n_samples, n_features]\n        Training data.", "", "Patch the client's chat completion methods to use the async version.\n  :param client: The client to patch.\n  :param mode: The mode to use for the async version.\n  :return: The patched client.", "(x,y,z) -> (x,y,z)", "Apply gradients to the given set of variables.\n\n    Args:\n      * `grads_and_vars` - a list of `(gradient, variable)` tuples.\n      * `global_step` - optional variable to increment every time we run a\n        training step.  If `None` is provided, the global step is not used\n        (i.e. the global step is not incremented).  This is useful for", "_get_loaded_models_info", "_sanity_check()\n    Check that the object is in a valid state.\n    :raises: Exception if the object is in an invalid state.\n    :return: None.", "", "_init_signals", "", "", "", ":rtype: None\n    :param str[] args:\n    :return: None\n    :rtype: None\n    :raises: :class:`~exceptions.Exception`", "", "Returns a dictionary of packages that are available and those that are\n  outdated.\n\n  :return: A dictionary of packages that are available and those that are\n  outdated.\n\n  :rtype: dict[str, set[str]]\n  :raises: :class:`~conda_installer.exceptions.CondaError`", "Set the tag of the current cipher context.\n\n  :param tag:  The tag to set.\n\n  :return:  The number of bytes written.\n\n  :raises:  Exception if the tag couldn't be set.", "", "", "_check_email - Check if email is a known suspicious email address\n    :param email: - Email to check\n    :return: - True if email is a known suspicious email address, False otherwise\n    :rtype: bool", "Add a speech to the current speech.", "Show the success or failure modal, depending on the success status.", "_load_index(self, version_string) -> str:", "", "Generates a new domain key.\n\n    :return: True if successful, otherwise raises an error.", "", ".at_start()\n        :return: True if the position is at the start of the line, False otherwise.\n        :rtype: bool", ".", "", "Returns a dictionary with a list of timestamps and counts for\n    a given communication type and name.\n\n    :param doctype: the communication type\n    :param name: the name of the communication\n\n    :return: a dictionary with a list of timestamps and counts for a given\n    communication type and name.", "_strict_mode_strategy(strict, config_file)", "Return a queryset of all the objects in the model.\n\n    :return: A queryset of all the objects in the model.", "", "_re_qm.sub(lambda x: BaseProvider.random_letter(), text)\n    return text", "Pause the current track.\n\n  :return: :class:`~pydub.utils.Proxy` object for this object.", "", "", "", "_set_upstream(self, nodes: DependencyType) -> None:", "Returns a list of lists of values for a given dataframe.\n\n  Args:\n    value: A dataframe to be formatted.\n\n  Returns:\n    A list of lists of values for a given dataframe.\n\n  Example:\n    ```python\n    >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n    >>> format_dataframe_values(df)\n    [[1, 4], [2, 5], [3, 6]]\n    ```", ":param sdist_directory: directory to build sdist to\n    :param config_settings: configuration settings to use\n    :return: name of sdist file", "(n_samples, change_points) -> List[int] :", ":return:", "Returns a list of requires for the build_wheel command.\n\n    :param config_settings: The configuration settings to use.\n    :type config_settings: :class:`~poetry.core.config.ConfigSettings`\n    :return: The requires for the build_wheel command.\n    :rtype: list[str]\n    :raises: :class:`~poetry.core.config.ConfigSettingsError`", "", "Test that the notebook can be read and written.\n\n    :param nb_file:  path to the notebook file\n    :param ext:  the extension of the notebook (e.g. 'ipynb' or 'md')\n    :return:  the notebook as a jupytext.py notebook object.", "", ".set_max_order_size(sid=None, max_shares=None, max_notional=None)\n\n    :param sid:\n    :param max_shares:\n    :param max_notional:\n    :return:\n    :rtype:", "", "_compare:", "_init__ :", "_proto2object(proto: CreateRequestMessage_PB) -> \"CreateRequestMessage\":\n    _logger.debug(f\"proto2object: {proto}\")\n    return CreateRequestMessage(\n        msg_id=proto.msg_id,\n        address=proto.address,\n        content=proto.content,\n        reply_to=proto.reply_to,\n    )", "", "(", "_init__", "", "", ":param notebook: :class:`~jupytext.", "", "_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):", "Initialize the population with random numbers.", "_inverse_transform(self, X):", "_summary_for_method_to_params", "Login to nijie.info.", "Returns a copy of the feature.\n\n  :return: A copy of the feature.\n  :rtype: :class:`DirectFeature`\n  :Example:\n    >>> from direct_feature import DirectFeature\n    >>> feature = DirectFeature(1, \"df1\", (True, \"df2\"))\n    >>> feature.copy()\n    DirectFeature(1, \"df1\", (True, \"df2\"))\n    >>> feature.copy().copy()\n    DirectFeature(1, \"df1\", (True, \"df2\"))\n    >>> feature.copy().copy().copy()\n    DirectFeature(1, \"df1\", (True, \"df2\"))\n    >>> feature.copy().copy().copy().copy()\n    DirectFeature(1, \"df1\", (True, \"df2\"))", ":param a:", "", "restart the server\n    :param cfg: the server configuration\n    :param signal_error: the signal error\n    :param no_daemon: the no_daemon\n    :param blur_usage: the blur usage\n    :param advertise_version: the advertise version\n    :param transit: the transit\n    :param rendezvous: the rendezvous\n    :param disallow_list: the disallow list\n    :return:", "Returns a list of commands to run.\n    :rtype: list\n    :return: list of commands to run.", ":param wav: np.array, 1-D array of 8-bit signed mu-law encoded signal\n  :param qc: int, quantization coefficient\n  :return: np.array, 1-D array of 32-bit signed", ".", "_get_data_asset()", "", "", "", "Execute a pip command.\n\n  Args:\n    command: The name of the pip command to execute.\n    args: The arguments to pass to the command.\n    env_vars: A dictionary of environment variables to set.\n    shim: A function that will be called to execute the command.\n\n  Returns:\n    A tuple of (return code, stdout, stderr)", "Initialize a new engine.\n\n  :param shellClass: Class to use as the interpreter.\n  :param mpi: The :class:`~mpi4py.MPI` object to use for parallel\n      execution.  If None, the engine will run in serial.\n  :type shellClass: class\n  :type mpi: :class:`~mpi4py.MPI`\n  :return: An engine object.\n  :rtype: :class:`~engine.Engine`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException`\n  :raises: :class:`~engine.EngineException", "(self):", "", "\u83b7\u53d6\u4e58\u5ba2\u8f66\u7968\u7c7b\u578b\n    :param set_type: \u4e58\u5ba2\u8f66\u7968\u7c7b\u578b\n    :return: \u4e58\u5ba2\u8f66\u7968\u7c7b\u578b", "", "_set_in_memo(self, memo, k, v)", ":param module:\n    :param module_in:\n    :param module_out:\n    :return:\n    :rtype: np.ndarray", "(1)", "Deep copy of this instance.", "", "", "_init_", "_decrypt_with_hash", "Exports a journal to a file or directory.\n\n    :param cls: The class to export.\n    :param journal: The journal to export.\n    :param output: The output directory or file.\n\n    :return: The output file or directory.", "Return a dictionary of this object's attributes.\n\n    :return: A dictionary of this object's attributes.", "", "(recursive) traverse a dictionary and apply the given resolver method to all values.\n\n    :param input_dict: dictionary to traverse.\n    :param resolution_data: data to use for resolution.\n    :param resolver_method: method to apply to all values.", ".is_valid()", "_make_save_file_name", "Test that a user can be associated with a junk data.", ".csr2csc()\n    :return: :class:`~torch.Tensor`\n    :rtype: :class:`~torch.Tensor`\n    :Example:\n        >>> import torch\n        >>> import torch.sparse.csgraph as csgraph\n        >>> a = torch.sparse.spsp.spsp_csr_matrix(torch.tensor([[0, 1, 2], [0, 1, 2], [0, 1, 2]]), torch.tensor([[0, 1, 2], [0, 1, 2], [0, 1, 2]]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch.tensor([0, 1, 2]), torch", "", "", "Fix an AWS lambda function ARN.\n\n    :param str arn: The function ARN to fix", "", "_menu_loadPage(self, index: int):\n\n    Loads the specified page into the stacked widget.\n\n    Parameters\n    ----------\n    index: int\n        The index of the page to load.", "", "", "_set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None):\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None)\n\n    _set_validation(self, batch_size, X_val, Y_val, trigger, val_method", "", ":return: \u5ef6\u8fdf\u65f6\u95f4, \u5355\u4f4d\u4e3a\u79d2", "", "", "(url: URL) -> httpcore.SyncHTTPTransport:", "", ":param cls:\n  :param message_entity_array:\n  :return:", ":param size: \n    :param suffix: \n    :return: \n    :rtype:", ":param X:\n    :return:\n    :rtype: np.ndarray\n    :type: np.ndarray\n    :param n_neighbors:\n    :param ref_set_:\n    :param k_ref_:\n    :param n_ref_:\n    :param n_ref_dim_:\n    :param n_ref_dim_2:\n    :param n_ref_dim_3:\n    :param n_ref_dim_4:\n    :param n_ref_dim_5:\n    :param n_ref_dim_6:\n    :param n_ref_dim_7:\n    :param n_ref_dim_8:\n    :param n_ref_dim_9:\n    :param n_ref_dim_10:\n    :param n_ref_dim_11:\n    :param n_ref_dim_12:\n    :param n_ref_dim_13:\n    :param n_ref_dim_14:\n    :param n_ref_dim_15:\n    :param n_ref_dim_16:", "_check_write_conan(username, ref)\n\n    Check if the current user has write permissions on the given ref.\n    :param username: username to check\n    :param ref: ref to check\n    :return: True if the current user has write permissions on the given ref, False otherwise.", "set_output(self, data)\n    :param data: list of outputs to set for each node.", "", "Check if the type is an awaitable.\n\n  :param t: type to check.\n  :return: True if the type is an awaitable.", "_mask:\n    _data:\n    _data:\n        if _mask is nomask:\n            return self._data.tolist()\n        result = []\n        for (d, m) in zip(self._data, self._mask):\n            if m:\n                result.append(None)\n            else:\n\n                result.append(d.item())\n        return tuple(result)\n    _mask:\n    _data:\n        if _mask is nomask:\n            return self._data.tolist()\n        result = []\n        for (d, m) in zip(self._data, self._mask):\n            if m:\n                result.append(None)\n            else:\n\n                result.append(d.item())\n        return tuple(result)", "", "_get_release_info\n    :param name:\n    :param version:\n    :return:", "_get_ending_note:", "_load(self, data_loader, datafile)", "", "", "Returns a list of providers.\n\n  Returns:\n    list: List of providers.\n\n  Examples:\n    >>> get_providers()\n    ['ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI', 'ATI',", "Test setting a cookies model.\n\n  This test will test that the cookies are set correctly.", "", "", "Update the label map path in the configs.", "", "", "", "", "Return an iterator of :class:`~S3Object` objects.\n\n    :rtype: iterator of :class:`~S3Object` objects.\n\n    :returns: An iterator of :class:`~S3Object` objects.\n\n    :raises: :class:`~botocore.client.ClientError` if the operation fails.\n    :raises: :class:`~botocore.exceptions.ResponseError` if the operation fails.\n    :raises: :class:`~botocore.exceptions.ClientError` if the operation fails.\n    :raises: :class:`~botocore.exceptions.ParamValidationError` if the operation fails.\n    :raises: :class:`~botocore.exceptions.ClientError` if the operation fails.\n    :raises: :class:`~botocore.exceptions.ResponseError` if the operation fails.\n    :raises: :class:`~botocore.exceptions.ParamValidationError` if the operation fails.", "", "", "", "", "Remove useless information from the COCO dataset.", "Return True if all events are success.\n    :return: True if all events are success.\n    :rtype: bool", "Broadcast a 3D array to a 2D array.\n\n  :param a: 3D array.\n  :param ai: 2D array.\n  :return: 2D array.\n  :rtype: np.ndarray.\n  :return_type: np.ndarray.\n\n  :rtype: np.ndarray.\n  :return_type: np.ndarray.\n  :return_type: np.ndarray.\n  :return_type: np.ndarray.", "Get the last error message from the last-error.txt file.\n\n  :return: The last error message, or False if there is no error.", "-", "(fgraph) -> bool\n\n    Check that the graph is consistent with the given graph.\n\n    :param fgraph: The graph to check.", "Computes the embedding distance between a list of tracks and a list of\n  detections.\n\n  Parameters\n  ----------\n  tracks : list of `Track`\n    The list of tracks to be embedded.\n  detections : list of `Detection`\n    The list of detections to be embedded.\n  metric : str\n    The distance metric to be used.\n\n  Returns\n  -------\n  cost_matrix : np.ndarray\n    The embedding distance matrix.\n\n  Notes\n  -----\n    The distance metric is defined as a function from two numpy\n    arrays.", "", "", ".api_version = '1.0'", "Launch training or testing", "", "Returns a node by name.\n\n  Args:\n      name: The name of the node.\n      package: The package of the node.\n      subgraph: The subgraph to search.\n      node_type: The type of the node.\n\n  Returns:\n      The node.", "Test only with multiples.\n\n    :param capfd:\n    :param home:\n    :param dotfiles:\n    :param run_dotbot:\n    :return:\n    :rtype: None"], ["_pickle(self, path):\n    :param self:\n    :param path:", "", "_get_label_issues:\n    Returns a numpy array of boolean values, where the boolean values are\n    True for the label issues in the image and False otherwise.", "2.0:\n    Show the image in the UI.\n    :param is_img2img: True if the image is from img2img, False if the image is from img2img", "", "Print to stderr or to a file.\n\n  :param args:\n  :param kwargs:\n  :return:\n  :rtype: None\n  :raises:\n  :see: https://docs.python.org/3/library/stdtypes.html#str", "Generate a plan for writing a Python-based calculator.", "", "Run the build.\n\n    :return: None.", "_to_result_impl(self, result_handler: ResultHandler = None) -> \"ResultInterface\":", "", "()", ":param nums: \n    :param target: \n    :return: \n    :rtype:", "_map(self, pack):", "(user) -> None", "Fix the crontab file.\n    \n    :return: 0 on success, -1 on failure.", ".  Initialize the client.\n\n    :return:  None.", "(distutils.distutils_path)", "(self, message):", "_call__\n    :param element:\n    :return:", "Return the \"WWW-Authenticate\" header value to use in an HTTP\n    \"401\" response.", "", ":param dtype: The data type to convert to.\n  :param dtype: The data type to convert to.\n  :return: None.", "", "_proto2object(proto: DeleteDatasetMessage_PB) -> \"DeleteDatasetMessage\":", "", "", "_array = []\n    _idx = 0", "", "", ".plot_bar_chart(x, y) -> None:", "_summary_", "", "", ":param text: text to be cleaned\n    :return: cleaned text", "(str)", "", "Read a notebook file.\n\n  Parameters\n  ----------\n  nb_file : str\n    The path to the notebook file.\n  format_name : str, optional\n    The name of the format to use.\n\n  Returns\n  -------\n  dict\n    The notebook data.", "", "", "_call__", "", "", "", "_str__():\n\n    _str__ = super(TextItem, self).__str__", "", "_summary_\n\n    Args:\n        col (Column): The column to set the value on.\n        row (Row): The row to set the value on.\n        val (Any): The value to set.\n\n    Returns:\n        None: No return value.", "", "Parses data from a file.\n\n  :param filename: path to the file", "", "Parses a command from a string.\n\n    Args:\n        input_str (str): The string to parse.\n\n    Returns:\n        str: The command.\n        str: The accompanying text.", ".", "Prepare the build directory for the current build.", "Test that we can load a line-delimited corpus from a file.", "(int, file) ->", "", "", "", "This is the main method for the class", "(self, *args, **kwargs):\n    Invoke a callback.", "_init_", "(int, file) ->", "", "", "", "_get_fsdp_wrap_policy() -> Optional[Callable[[torch.nn.Module, bool, int], bool]", "batch rename file in the folder\n\n    Args:\n        work_dir (str): the folder where the file is located\n        old_ext (str): the original file extension\n        new_ext (str): the new file extension\n\n    Returns:\n        None: the file is renamed and the file is in the folder\n\n    Example:\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\", \".txt\", \".txt2\")\n        batch_rename(\"D:/test/a\",", "", "", "(x) -> (log(x))", "_test_connected_components_with_empty_graph(self):", "", "", "_is_rewrite_engine_on(self, vhost):\n\n    Return True if the rewrite engine is enabled on the given vhost.\n\n    :param vhost: Vhost object.\n    :return: bool.", "Returns 2 splits that contain the \"train\" and \"test\"", ":param ctx:\n  :param file:\n  :param quote:\n  :param export:\n  :return:", "", "Tests the accuracy.mae function.\n\n    :param pred: A function that takes a point and a timestamp and returns a prediction.", "_append_package_path", "_save(self, name, resp):", "", ":param x: \n    :param y: \n    :return:", "_init_", "Check if the exploit can be run successfully.\n\n  :return: None\n\n  :rtype: None\n\n  :raises: :class:`~core.exploits.exploit_exceptions.AuthenticationError`\n  :raises: :class:`~core.exploits.exploit_exceptions.AuthenticationRequiredError`\n  :raises: :class:`~core.exploits.exploit_exceptions.PermissionDeniedError`\n  :raises: :class:`~core.exploits.exploit_exceptions.TargetNotReachableError`\n  :raises: :class:`~core.exploits.exploit_exceptions.TargetNotReachableError`\n  :raises: :class:`~core.exploits.exploit_exceptions.TargetNotReachableError`\n  :raises: :class:`~core.exploits.exploit_exceptions.TargetNotReachableError`\n  :raises: :class:`~core.exploits.exploit_exceptions.TargetNotReachableError`\n  :raises: :class:`~core.exploits.exploit_exceptions.TargetNotReachableError`\n  :raises: :class:`~core.exploits.exploit", "_call(self, inputs: Dict[str, Any], run_manager: Optional[CallbackManagerForChainRun] = None) -> Dict[str, Any]:", "", "(x) in the name is to make sure this is the same as the original paper.\n    vit_base_resnet50d_224 is the same as vit_base_resnet50d_192\n    vit_base_resnet50d_192 is the same as vit_base_resnet50d_160\n    vit_base_resnet50d_160 is the same as vit_base_resnet50d_144\n    vit_base_resnet50d_144 is the same as vit_base_resnet50d_120\n    vit_base_resnet50d_120 is the same as vit_base_resnet50d_100\n    vit_base_resnet50d_100 is the same as vit_base_resnet50d_96\n    vit_base_resnet50d_96 is the same as vit_base_resnet50d_80\n    vit_base_resnet50d_80 is the same as vit_base_resnet50d_72", "", "", "", "", "Encode a numpy array as a list of numbers.\n\n    Parameters\n    ----------\n    obj : np.ndarray\n\n    Returns\n    -------\n    list", "", "_to_keypoints", "", "Returns the maximum width and height of a token.", ":param img1_path: list or str\n    :param img2_path: list or str\n    :return: list of image paths, boolean", "", "", "Check that the wordcloud has been calculated.", "", "", "Returns a Member object.\n\n  :param index: the index of the member\n  :param name: the name of the member\n  :param session: the session object\n  :param data: the data of the member\n  :return: a Member object\n  :rtype: Member\n  :raises:", "", "", ":param data:\n  :param next:", "", "", "Check for links in the text.\n\n    Args:\n        text (str): The text to check for links.\n\n    Returns:\n        list: A list of dictionaries, each containing the \"url\" key.", ":rtype: dict", ":param document: The document to check.\n    :return: The date the document was created.", ":type connections: List[Connection]\n    :rtype: List[Connection]\n    self.connections = []\n\n    self.connections = []\n    self.connections = []", "", "", "", ":returns: :class:`~django.db.models.QuerySet`\n  :rtype: :class:`~django.db.models.QuerySet`\n  :raises: :class:`~django.db.models.expressions.", "_init_model(self, device):", "Returns preferred width of the given box.  If the box is a block container,\n    then this will be the preferred width of the block container.  If\n    the box is an inline box, then this will be the preferred width of\n    the inline box.  If the box is a line box, then this will be the\n    preferred width of the line box.  If the box is not a block container,\n    inline box, or line box, then this will raise a TypeError.\n\n  :param box:  Box to get preferred width for.  Can be a block container,\n               inline box, or line box.\n\n  :return:  Preferred width of the box.", "Delete a document from the index.", "", "(env_var: Union[ConfigKey, str]) -> bool:", "", ":param sentence: str\n    :param ignore_map: dict\n    :param bpe_delimiter: str\n    :return: str", "Returns True if the request was successful.", ":return: \n    :rtype: str", ":return: next parameter dictionary", "Gluon-ResNet-101-v1e (https://arxiv.org/pdf/1909.09548.pdf)", "()\n    remove batch from layout\n    :param layout:", "", "\u6d4b\u8bd5\u5220\u9664\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u5e76\u68c0\u67e5\u6570\u636e\u96c6\u662f\u5426\u5220\u9664\u6210\u529f\u3002\n  :return:", "_include_path(self, path, extensions=None)", "This method is deprecated.\n  Please use `airflow.providers.google.cloud.hooks.bigquery.BigQueryHook.patch_table`", "_grid_anchors(self, grid_sizes):", "", "", ":param signum:\n  :param frame:\n  :return:\n  :rtype: None", "_make_args(cls, args, **kwargs):\n    return cls(args, **kwargs)\n    \n    def __init__(self, args, **kwargs):\n        super(cls, self).__init__(args, **kwargs)\n        self.args = args", "(self, init='glorot_uniform', scale=0.5, bias=1.0, regularizers=None, constraints=None):", "", "", "", "Calculate the ratio and resize the image.\n    :param img: The image to be resized.\n    :param width: The width of the image.\n    :param height: The height of the image.\n    :param model_height: The height of the model.\n    :return: The resized image and the ratio.", "", ":param code:\n  :param handler:\n  :return:\n  :rtype:", "Create a SQL agent for the given dataframe and arguments.\n\n    Args:\n        df (pd.DataFrame): The dataframe to be used for the SQL agent.\n        args (dict): The arguments to be used for the SQL agent.\n\n    Returns:\n        object: The SQL agent.\n\n    Example:\n        ```python\n        df = pd.read_csv('path/to/data.csv')\n        args = {'executor': self.executor, 'model_name': 'openai-chat'}\n        sql_agent = self.sql_agent_completion(df, args)\n        ```", "Execute next action of the agent.\n    :param agent_execution_id: int\n    :param time: int\n    :return: None\n    :", "(re)", "Save the model to a file.\n\n  Args:\n      model_file (str or Path): The file to save the model to.", "", "\u5c0632*32\u7684\u56fe\u7247\u5411\u91cf\u5316\u62101*1024\u7684\u5411\u91cf\n  :param filename:\n  :return:\n  :rtype: numpy.ndarray\n  :", "Convert a 2D tensor to a list.\n\n    Args:\n        tensor (np.ndarray): 2D tensor.\n\n    Returns:\n        List: 1D list.", "", ".ln()", "(description=\"Execute command\", **kwargs)\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.process = None\n        self.run_cmd = []", "_val_loader(self, settings):", "Returns the coordinates of the element as a Rect object.\n\n  :param cls: The class that contains the element.\n  :param element: The element to get the coordinates of.", ":param port:\n      :return:", "", ":param kernel_type: 'primal' or 'dual'\n  :param dim: dimension of the space\n  :param lamb: the parameter of the kernel", "_init_", "", "", "Create a temporary directory in the given directory, and\n    register a function to remove it.\n    \n    :param suffix: \n    :param prefix: \n    :param dir: \n    :return:", ".get_input_keys(state) -> List[str]", "", "(haystack.haystack_input_socket)", "The offset of the original data.", "Update the title of the sheet.\n\n    :param title: The new title of the sheet.\n    :return: The response from the API.\n    :rtype: google.api_core.client_", "", "", "", "(self, current_input: Any, new_input: Any) -> None:", "", "_estimate_dummy_outcome", "Run the API server in a thread.\n\n  :param api_port:  The port on which the API server will run.\n  :param address:  The address on which the API server will run.\n  :return:  A list of socket names for the API server.", ">>> path_join_robust('/foo', 'bar', 'baz')\n  /foo/bar/baz\n  >>> path_join_robust('/foo', 'bar', 'baz', 'quux')\n  /foo/bar", "\u590d\u5236\u5bf9\u8c61\n :param self:\n :param src:\n :param dest:\n :return:", "(self):", "", "(self, input):", "(0, 1) - clear the word at the given address\n        0 - clear the word at the given address\n        1 - clear the word at the given address and the following 32 bits of the next word\n        2 - clear the word at the given address and the following 32 bits of the next word and the following 32 bits of the next word\n        3 - clear the word at the given address and the following 32 bits of the next word and the following 32 bits of the next word and the following 32 bits of the next word\n        4 - clear the word at the given address and the following 32 bits of the next word and the following 32 bits of the next word and the following 32 bits of the next word and the following 32 bits of the next word\n        5 - clear the word at the given address and the following 32 bits of the next word and the following 32 bits of the next word and the following 32 bits of the next word and the following 32 bits of the next word and the following 32 bits of the next word\n        6 - clear the word at the given address", "The iou\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd", "Returns a unicode string representation of the string.\n\n  :return: A unicode string.\n\n  :rtype: str\n  :see: :func:`str`\n  :see: :func:`unicode`\n  :see: :func:`str`", "_convert_objects(self, convert_dates=True, convert_numeric=False, copy=True)", "Delete a bookmark.", "(see :class:`ContentParser` for details)", ":param data:\n    :return: \n    :rtype:", "32-bit FNV-1a_32", "(0.0, 0.0)", "(t: Type[Any]) -> Tuple[Any, ...]:", ":param signed:  If True, the value is signed.\n    :param addr:  The address of the data.\n    :param length:  The length of the data.\n    :param label:  The label of the data.", "_forward_pass(X, training=True) -> np.array:", "Handle a directory keyword.\n\n  :param keywords: The keyword arguments.", "\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6", "Update number of computed tokens in all sequences.\n    Args:\n        num_new_computed_tokens (int): Number of new computed tokens.", "(item_type, rec_src, sr, link, comment=None)", "Registers an error handler for the given error code.\n\n  :param code: The error code to be handled.", "_on(self, image)", "", "_reset_level_infra(self, level_infra: LevelInfrastructure = None):\n    _reset_common_infra(self, common_infra: CommonInfrastructure = None):\n    _reset_outer_trade_decision(self, outer_trade_decision: OuterTradeDecision = None):\n    _reset_outer_trade_decision_with_level_infra(\n        self,\n        level_infra: LevelInfrastructure = None,\n        outer_trade_decision: OuterTradeDecision = None,\n    ):\n    _reset_outer_trade_decision_with_common_infra(\n        self, common_infra: CommonInfrastructure = None, outer_trade_decision: OuterTradeDecision = None,\n    ):\n    _reset_outer_trade_decision_with_level_infra_and_common_infra(\n        self,\n        level_infra: LevelInfrastructure = None,\n        common_infra: CommonInfrastructure = None,\n        outer_trade_decision: OuterTradeDecision = None,\n    ):\n    _reset_outer_trade_decision_with_level_infra_and_common_infra_and_outer_trade_decision(", "", "Extract style from the image.\n\n    Args:\n        style_layers (list): The layers to extract style from.\n\n    Returns:\n        list: A list of tuples, where the first item is the loss function,\n            the second item is the layer name, and the third item is the\n            weight of the loss function.", "_make_url(url: str) -> str:", "_stringify()", "", "", "_testCustomScorer()", "", ".add_argument(self, *args, **kwargs)", "", "Saves the model to the specified output directory.\n\n    Args:\n        trainer: The trainer object.\n        output_dir: The output directory.\n        state_dict: The state dictionary.", "Filter line to remove tokens that are not semantic.\n\n    :param uwline:  The line to filter.", ":param text: The text to be converted to phonemes\n    :param language: The language of the text. Can be \"zh-CN\" or \"en-US\"\n    :return: The phonemes of the text", ":param logger: The logger to use for logging.\n    :param log_level: The log level to use.\n    :return: A function to be called before the sleep action is called.\n    :rtype: callable(call_state) -> None", ".sync_with_dict(dict_agent)\n\n    :param dict_agent:\n    :return:\n    :rtype: None", "(from: https://github.com/pypa/pip/issues/1938)", "", "", "_get_group_tombstone_results(self, request, project):", "", "", "Initializes the Dejavu object with the configuration file.\n    :param config_file: the path to the configuration file.\n    :return: a Dejavu object.", "Check if the package is installed.\n  :param package_helper: The package helper.\n  :param package: The package to check.\n  :return: 0 if the package is installed, 1 if the package is not installed.\n  :rtype: int", "", "Returns the fully-qualified name of the file.\n\n  :return: The fully-qualified name of the file.\n  :rtype: list of str", "", "_set_volume(self, volume):\n    Set the volume of the mixer.\n\n    :param int volume: The volume to set.  Must be between 0 and 100.", "", "", "_init_ -", "", "Removes the SQL from a question.\n\n  :param question: The question to remove the SQL from.\n  :type question: str", "", "", "_  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str__  __str", "", "", "_calculate_wer", "Returns a list of categories that are in the file.\n\n  :param fileids: File ids or file ids to return categories for.\n  :type fileids: str or list of str", "# noqa", "", "_call(self, tensor_input):", "", "", "", "", "", "Convert a list ofAnthroHistory to a list ofAnthroMessage.\n\n  :param history: A list ofAnthroHistory.\n  :param is_demonstration: Whether theAnthroHistory is for demonstration.\n  :return: A list ofAnthroMessage.\n  :rtype: list[dict[str, str]] | str", ":return: list of all the user IDs in the database.", "", "_frames: list of Frame objects", "Tests that the function can scan a file for any barcodes that\n     are separated by a page break.", "(img: torch.FloatTensor) -> torch.FloatTensor:", "Returns the number of tokens used by a list", "", ".tokenize(filename) -> list(Token)\n\n    Tokenize a file.\n\n    :param filename: str", "", "ite(self, **kwargs):", "(Tensor) Sample from the latent space.\n\r\n    Args:\n    - num_samples: (int) Number of samples to generate.\n    - current_device: (int) The device to run the sampling on.", "_summary_", "", "() -> None:\n    Clear the current jobs.", "_create_valid_env(self):\n    Create a valid environment and check that it is created.\n    :return:", "_init_function_for_class_with_many_arguments(", "", "(re)", "", "", "(str, List[str], Optional[dict], Optional[str]) -> None", "", "", "", "\u83b7\u53d6\u5ba2\u6237\u7aef\u4ee4\ufffd", ":param headers:", "_identifiers:\n    :return:", "_authorize_redirect(self, redirect_uri=None, client_id=None,\n                       client_secret=None, extra_params=None)", "Test the insert_content method.", "", "Show the traceback dialog.", "", "", "", "", "", "_summary_row(self, pkgname, obj)", ":return:  :class:`~torch.Tensor`\n      :class:`~torch.nn.Embedding`  `torch.nn.Embedding`\n      :class:`~torch.nn.Parameter`  `torch.nn.Parameter`\n      :class:`~torch.nn.EmbeddingBag`  `torch.nn.EmbeddingBag`\n      :class:`~torch.nn.Parameter`  `torch.nn.Parameter`\n      :class:`~torch.nn.EmbeddingBag`  `torch.nn.EmbeddingBag", ":param omega: The spectral density function's frequency.\n    :return: The power spectral density.", "(request, exception) -> (HttpResponse, bytes) or (HttpResponse, str) or (HttpResponse, bytes, bytes)\n\n    This method is called when a request fails.", "_chunk_key_offset() - Returns the offset in bytes of a chunk key.\n    @param key - The chunk key to look up.\n    @return - The offset in bytes of the chunk key.", "(str, List[str], dict) -> None", "Set the model to use in the environment.\n\n  Args:\n    model (str): The name of the model to use.\n\n  Returns:\n    None\n\n  Raises:\n    Exception: If the model is not found in the environment or if it is not set as the model in the\n      environment.\n\n  Example:\n    ```python\n    set_model('my-model')\n    ```", ":param str arch:", "", "(self):\n    (self.s_start, self.s_goal) = (self.s_start, self.s_goal)\n    self.CLOSED = []\n    self.PARENT = {self.s_start: None}\n    self.OPEN = self.get_neighbors(self.s_start)", "Run migrations in 'offline' mode.\n\n    This might be used for", "get user_id from a wxpy.api.messages.Message or wxpy.api.chats.Group\n\n  :param msg: wxpy.api.messages.Message or wxpy.api.chats.Group\n  :return: user_id from a wxpy.api.messages.Message or wxpy.api.chats.Group\n  :rtype: str\n  :example: get_context_user_id(msg)\n  :note: re_sub is used to remove non-alphanumeric characters, for example,\n  :note: get_context_user_id(msg, re_sub=r'[^a-zA-Z\\d]')\n  :note: get_context_user_id(msg, re_sub=r'[^a-zA-Z\\d]'.replace('d', 'D'))\n  :note: get_context_user_id(msg, re_sub=r'[^a-zA-Z\\d]'.replace('d', 'D').replace('D', 'd'))\n  :note: get_context_user_id(msg, re_sub=r'[^a-zA-Z", "'", "", "", "", "", "", ".induced_subgraph(nodes) -> DGLSubGraph", "_dict.setdefault(self, key, []).append(value)\n    return self.dict[self][key]", "_get_dictionary_values(self, dictionary)", "", "", "", "", "_get_best_index_", "_add_to_parser(self, parser):", "", "", "_Permute(self):", ":param module_name:\n  :return:\n  :rtype:", "Returns the `EXPECT` header of the request.\n\n    :rtype: str\n    :returns: The `EXPECT` header of the request.", "", ".", "", "", "_start_streaming(self, callback)", "", "", ":return: :class:`~pyg.types.PageMode` or :const:`None`", "(str)", "", "", ":return: True if the request is ready to be processed.\n  :rtype: bool\n  :raises: :class:`~fastapi.Request.exceptions.HTTPException`\n  :raises: :class:`~fastapi.Request.exceptions.ConnectionError`\n  :raises: :class:`~fastapi.Request.exceptions.ConnectTimeout`\n  :raises: :class:`~fastapi.Request.exceptions.ReadTimeout`\n  :raises: :class:`~fastapi.Request.exceptions.ResponseError`\n  :raises: :class:`~fastapi.Request.exceptions.ClientError`\n  :raises: :class:`~fastapi.Request.exceptions.ServerError`\n  :raises: :class:`~fastapi.Request.exceptions.ConnectionError`\n  :raises: :class:`~fastapi.Request.exceptions.ConnectionError`\n  :raises: :class:`~fastapi.Request.exceptions.ConnectionError`\n  :raises: :class:`~fastapi.Request.exceptions.ConnectionError`\n  :raises: :class:`~fastapi.Request.exceptions.ConnectionError`\n  :raises: :class:`~", ":param arch: :class:`arch.Arch` object.\n    :return:", "(band_infinite)", ".frame.get_center() - get the center of the frame.\n    :return: (int, int) - the center of the frame.", "_set_dns_challenge_txt(self, zone_id, domain, txt_challenge):", "Check if the attribute key has nested attributes.\n\n  :param attribute_key: The attribute key to check.\n  :param attributes: The attributes to check.\n  :return: True if the attribute key has nested attributes, False otherwise.\n  :rtype: bool\n  :raises:", "", "_content: str = None", "", "", "Test that a redirect is followed.", "", "", "", "(POST) /api/task/add", "", "Create a file at the given path.\n\n  :param path: The path to the file.\n  :param create_dirs: Whether to create any missing directories.", "_init_", "_call_", ":return: (x, y)", "", ":param image_path: Path to the image file.\n    :return: The processed image.\n    :rtype: Image.Image\n    :raises: :class:`~streamlit.runtime.error.ImageLoadError` if the image could not be loaded.\n    :raises: :class:`~streamlit.runtime.error.ImageLoadError` if the image could not be loaded.\n    :raises: :class:`~streamlit.runtime.error.ImageLoadError` if the image could not be loaded.\n    :raises: :class:`~streamlit.runtime.error.ImageLoadError` if the image could not be loaded.\n    :raises: :class:`~streamlit.runtime.error.ImageLoadError` if the image could not be loaded.\n    :raises: :class:`~streamlit.runtime.error.ImageLoadError` if the image could not be loaded.\n    :raises: :class:`~streamlit.runtime.error.ImageLoadError` if the image", "", "", "", "(Tensor) sample from the latent space.", "", "", "_init_", "_init_\n        message: str = \"Loading...\",\n        delay: float = 0.1,\n        plain_output: bool = False,\n    ):", "_init_", ":param env: The environment to be wrapped.\n  :param noop_max: The maximum number of consecutive no", "(self):\n    return [\n        {\"target\": target, \"params\": param}\n        for target, param in zip(self.target, self.params)\n    ]", "_predict(self, X):\n    Predict using the regressor.\n\n    Parameters\n    ----------\n    X : {array-like, sparse-matrix}\n        Data to predict.\n\n    Returns\n    -------\n    y_pred : array-like\n        Predicted values.", "", "Patch the client to use the new chat completion API.\n\n    :param client: The client to patch.\n    :param mode: The mode to use for the new chat completion API.\n    :return: The client.\n    :raises: :class:`~openai.error.PermissionError` if the client is not an instance of :class:`~openai.client.AsyncOpenAI` or :class:`~openai.client.OpenAI`.", "(self, apt):\n\n    def dpt(self):\n\n    \t(self.dpt = self.dpt.copy())\n\n        for var, slc, shp in self.idxmap.dmap:\n            self.dpt[var] = np.reshape(apt[slc], shp)\n\n\n        return self.dpt", "Apply the gradients to the global step.\n  :param grads_and_vars: A list of (gradient, variable) tuples.\n  :param global_step: The global step to use for the gradient descent.\n  :param name: The name of the operation.\n  :return: The global step.\n  :rtype: int", "_get_loaded_models_info_result_type_dict_dict_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str", "_sanity_check()\n    \n    Check that the NyanObject is in a valid state.\n    \n    :raises: Exception if the NyanObject is not in a valid state.\n    \n    :return: None", "", "_init_signals:", "", "", ":param config:", ":rtype: None\n    :param str[] args:\n    :return: None\n    :rtype: None\n    :raises: :class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:class:`:", "", ":returns: A dictionary of available packages.\n    :type: dict[str, set[str]]", "", ":param file_path: Path to the file containing the pipeline template.\n        :type file_path: str", "", "_check_email:\n    Check if email is in ioc list and return True if found.\n    :param email: The email to check.\n    :return: True if email is in ioc list, False otherwise.", "", "Called when the transaction has finished.  This is where the\n  success or failure dialogs are shown.  This method is called\n  from the thread that is running the transaction.\n\n  @param args:  The arguments passed to the transaction\n  @param kwargs:  The keyword arguments passed to the transaction\n  @return:  None\n\n  @rtype:  None\n  @raises:  None", "_load_index(self, version_string)", "", "Generates a new domain key.\n\n  :return: True if the key was created, False otherwise.\n  :rtype: bool", "", ".at_start() should return True if the current position is at the start of the line.", "", "", "Get timeline data for a given document type and name.\n\n    :param doctype: Document type.\n    :param name: Document name.\n\n    :return: Dictionary of timeline data.\n\n    :rtype: dict\n    :see: get_communication_data\n    :see: get_timestamp\n    :see: add_years\n    :see: dict\n    :see: get_timestamp\n    :see: dict\n    :see: get_communication_data\n    :see: get_timestamp\n    :see: add_years\n    :see: dict\n    :see: get_communication_data\n    :see: get_timestamp\n    :see: add_years\n    :see: dict\n    :see: get_communication_data\n    :see: get_timestamp\n    :see: add_years\n    :see: dict\n    :see: get_communication_data\n    :see: get_timestamp\n    :see: add_years\n    :see: dict\n    :see: get_communication_data\n    :see: get_timestamp\n    :see: add_years\n    :see: dict\n    :see", "_strict_mode_strategy(strict, config_file)", "", "", "_re_qm = re.compile(r'[^a-z]?', re.I)\n\n    def lexify(cls, text='????'):\n\n    \treturn _re_qm.sub(lambda x: BaseProvider.random_letter(), text)\n\n    def random_letter(cls):\n\n    \treturn chr(97 + random.randint(0, 25))\n\n    def random_digit(cls):\n\n    \treturn chr(48 + random.randint(0, 9))", "", "", "_get_pipeline(self, pipeline_name):", "", ".set_upstream(self, nodes: DependencyType) -> None:", "Format a dataframe value.\n\n  Args:\n      value (pd.DataFrame): The dataframe to format.\n\n  Returns:\n      list: The formatted dataframe values.", "Build a sdist in the given directory.\n\n  :param sdist_directory: the directory to build the sdist in\n  :param config_settings: the configuration settings to use when building the sdist\n  :return: the name of the sdist file.", "(n_samples: int, change_points: List[int]) -> List[int]:", ":return:  The location of the host.db file in the Dropbox install.\n    :rtype:  str", "", "", "Test that a notebook can be written and read back", "Stream a thread with a given method.\n\n    :param method: The method to call.\n    :param kwargs: The arguments to pass to the method.\n    :return: The result of the method.\n    :rtype: The result of the method.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`~stream_chat.exceptions.StreamChatException` if the method fails.\n    :raises: :class:`", "(sid=None, max_shares=None, max_notional=None) -> None:", "Initialize MfeInternalAutologgerSettings with mlflow_autologger.\n\n    :param mlflow_autologger: Optional[Union[str, MfeInternalMLFlowAutologgerState]]\n        :param str: The name of the autologger to use.\n        :param MfeInternalMLFlowAutologgerState: The state of the autologger to use.\n    :return: MfeInternalAutologgerSettings: The autologger settings.\n    :raises: ValueError: If the autologger name is invalid.", "_compare", "_init_ -", "", ":param graph:\n    :return:", "(str) Return the usage of this command.\n\n    :param ctx: The context to use to get the usage.", "_init_function_\n    :param self:\n    :param self.Diff_Timeout:\n    :param self.Diff_EditCost:\n    :param self.Match_Threshold:\n    :param self.Match_Distance:\n    :param self.Patch_DeleteThreshold:\n    :param self.Patch_Margin:\n    :param self.Match_MaxBits:\n    :param self.Patch_EditCost:\n    :param self.Patch_Distance:\n    :param self.Patch_Format:\n    :param self.Patch_Format_Options:\n    :param self.Patch_Content:\n    :param self.Patch_Content_Options:\n    :param self.Patch_Create_Distance:\n    :param self.Patch_Create_Threshold:\n    :param self.Patch_Create_EditCost:\n    :param self.Patch_Create_Content:\n    :param self.Patch_Create_Content_Options:\n    :param self.Patch_Create_Format:\n    :param self.Patch_Create_Format_Options:\n    :param self.Patch_Create_Format_Options:\n    :param", "", "", "", "", "_time:\n    Apply a function to the time_func, which is a function that takes\n    a single argument and returns a float.\n\n    Args:\n        time_func (function): The function to apply to the time.\n        apply_to (list): The attributes to apply the function to.\n        keep_duration (bool): Whether to keep the duration of the function.\n\n    Returns:\n        float: The time after applying the function.", "Initialize population with random numbers.", "", "_summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_or_none(self):\n    _summary_", "", ":return: DirectFeature", "", "", ":param cfg: the wormhole configuration\n        :param signal_error: the signal to send to the error handler\n        :param no_daemon: if True, the server will not be started as a\n            daemon process\n        :param blur_usage: if True, the usage of the wormhole server will\n            be blurred\n        :param advertise_version: the version of the wormhole server\n        :param transit: if True, the wormhole server will use the\n            transit protocol\n        :param rendezvous: if True, the wormhole server will use the\n            rendezvous protocol\n        :param disallow_list: if True, the wormhole server will use the\n            disallow list protocol\n    :return: None", "Return a list of suggested commands to run.\n\n    :return: list of suggested commands to run.\n    :rtype: list of str", ":param wav: \n    :param qc:", ".", "_get_data_asset", "", "", "Add a route to the router.", "Execute a pip-wrapped command.\n\n  :param command: The pip-wrapped command to execute.\n  :param args: The arguments to pass to the command.\n  :param env_vars: The environment variables to pass to the command.\n  :param shim: The shim to use to run the command.", "", "_connection_stacking_1_2_3(self):\n    _connection_stacking_1_2_3_4_5(self):\n    _connection_stacking_1_2_3_4_5_6(self):\n    _connection_stacking_1_2_3_4_5_6_7(self):\n    _connection_stacking_1_2_3_4_5_6_7_8(self):\n    _connection_stacking_1_2_3_4_5_6_7_8_9(self):\n    _connection_stacking_1_2_3_4_5_6_7_8_9_10(self):\n    _connection_stacking_1_2_3_4_5_6_7_8_9_10_11(self):\n    _connection_stacking_1_2_3_4_5_6_7_8_9_10_11_12(self):\n    _connection_stacking_1_2_3_4_5_6_", "", "\u83b7\u53d6\u4e58\u5ba2\u7c7b\u578b", "", "_set_in_memo(self, memo, k, v)", ":param module:\n    :param module_in:\n    :param module_out:\n    :return:", "(def-", "_deepcopy__", "Return the help text for the command.  This is the help text\n  that will be shown when the command is called with no arguments.\n\n  :rtype: str", "", "_init_\n\n    :param args:\n    :param config:\n    :return:\n    :rtype: None", "(str)", "Exports the given journal to a file or directory.\n\n  :param cls: The class to export.\n  :param journal: The journal to export.\n  :param output: The output file or directory to export the journal to.\n\n  :return: The path to the exported journal.", "Convert the model to a dictionary.\n\n  Args:\n      None\n\n  Returns:\n      dict: A dictionary of the model.", "", "(recursive) traverse a dictionary and resolve values using the provided\n    resolver method.", "(self):", "_make_save_file_name", "(organization.member_role)", ".tocsr() returns a CSR array.\n\n    :return: a CSR array.\n    :rtype: :class:`~torch.DoubleTensor`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :see: :func:`~torch.DoubleTensor.tocsr`\n    :", "Parameters:\n      in_channels: int, number of input channels\n      out_channels: int, number of output channels\n      kernel_size: int, size of the convolution kernel\n      stride: int, stride of the convolution kernel\n      bias: bool, whether to use bias in the convolution kernel", "", "Fix an AWS lambda function ARN.\n\n    :param str arn: The function's ARN.\n\n    :returns: The canonicalized function's ARN.", "Create a help command for this client.\n\n  :returns: A help command.", "_menu_loadPage(self, index: int):", "", "", "(int, JTensor, JTensor, int, callable) ->", "", ":return: \u968f\u673a\u5ef6\u8fdf 1-3 \u6beb\u79d2", ".", "", ".", "", ":param cls:\n  :param message_entity_array:\n  :return:", ":param size: size to format\n    :param suffix: unit suffix\n    :return: formatted size string\n    :rtype: str\n    :raises: ValueError if size is not a number", ":param X:\n    :return:\n    :rtype: np.ndarray", "_check_write_conan(username, ref)\n\n    Check if a user can write a given ref.\n\n    :param username: The username to check.\n    :param ref: The ref to check.\n    :return: True if the user can write the ref, False otherwise.", "", "", "Check if the type is an AwaitableGenerator or Awaitable.\n\n  :param t: Type to check.\n\n  :return: True if the type is an AwaitableGenerator or Awaitable.", "_data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.tolist()\n\n    _data.tolist() + _mask.", "", ".get_release_info(name, version)\n    .get_release_info(name, version, force=False)\n    .get_release_info(name, version, force=False, timeout=60)\n    .get_release_info(name, version, force=False, timeout=60, cache_key_prefix=None)\n    .get_release_info(name, version, force=False, timeout=60, cache_key_prefix=None, cache_key_suffix=None)\n    .get_release_info(name, version, force=False, timeout=60, cache_key_prefix=None, cache_key_suffix=None, cache_key_suffix_separator=None)\n    .get_release_info(name, version, force=False, timeout=60, cache_key_prefix=None, cache_key_suffix=None, cache_key_suffix_separator=None, cache_key_suffix_separator_separator=None)\n    .get_release_info(name, version, force=False, timeout=60, cache_key_prefix=None,", "", ".", "", "", "", "Test setting a cookie with a `CookiesModel` object.", ":param url:\n    :param param:\n    :return:", "x is the same as y", ":param configs:\n  :param label_map_path:\n  :return:", "", "", "", ":param name:\n      :param value:\n      :return:", "", "", "", "", "", "Remove useless information from the coco object.\n\n  Parameters\n  ----------\n  coco : object\n    A coco object.\n\n  Returns\n  -------\n  None.", ":return: True if all events are successful.\n    :rtype: bool\n    :raises: :class:`~exceptions.FailureException` if any event is failure.", "test broadcast of a numpy array with a scalar", "", "(self) -> OptionList:\n        return self.selection_list", "(fgraph) -> bool\n\n    Check if the dependency graph is consistent.\n\n    :param fgraph: the dependency graph to check", "", "", "Kill the process.\n  :return:", ".get_api_version(self):", "Launch the job.\n  :param args:  The arguments.\n  :return: None.", "", "Returns a single node by name.\n\n    Args:\n      name (str): The name of the node.\n      package (str): The name of the package.\n      subgraph (str): The name of the subgraph.\n      node_type (str): The type of node to search for.\n\n    Returns:\n      A single node by name.\n\n    Raises:\n      NotImplementedError: If the subgraph is not implemented.", "Test the --only option.\n\n    :param capfd: a `capfd.readouterr()` object.\n    :param home: the home directory.\n    :param dotfiles: the Dotfiles object.\n    :param run_dotbot: a function that runs dotbot.\n    :return: None.\n    :rtype: None."], ["_pickle(self, path):\n\n    _pickle(self, path)\n    return path.replace('.csv', '.pkl') + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv' + '.pkl' + '.csv'", "Save the model for the deepspeed trainer.\n\n  Args:\n    trainer (transformers.Trainer): The trainer.\n    output_dir (str): The output directory.", "_get_label_issues returns the label issues for the current model.\n    This method is called by the `fit` method of the model.", "", "", "Print to stdout and stderr.\n\n  :param args:\n  :param kwargs:\n  :return:\n  :rtype: None\n  :raises:", "", "", "Run the build script.\n\n    :return: None.", "(function)", "", "\u83b7\u53d6\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\n  :return: \u4f18\u5148\u7ea7", ":param nums:\n    :param target:\n    :return:", "_map(self, pack):", "_add_user()", "Fix the crontab.\n    \n    :return: 0 if successful, -1 otherwise.\n    :rtype: int\n    :raises: :class:`OSError` if the crontab could not be fixed.\n    :raises: :class:`PermissionError` if the crontab could not be fixed.\n    :raises: :class:`ValueError` if the crontab could not be fixed.\n    :raises: :class:`TypeError` if the crontab could not be fixed.\n    :raises: :class:`ImportError` if the crontab could not be fixed.\n    :raises: :class:`KeyboardInterrupt` if the crontab could not be fixed.\n    :raises: :class:`Exception` if the crontab could not be fixed.\n    :raises: :class:`Exception` if the crontab could not be fixed.\n    :raises: :class:`Exception` if the crontab could not be fixed.\n    :raises: :class:`Exception` if the crontab could not be fixed.\n    :raises: :class:`Exception` if the crontab could not be fixed.\n    :raises: :class:`Exception` if the cron", "(self):", "(distutils.distutils_path)", "_go(self):", "_call_method(self, element):", ":param authentication:\n      :param realm:\n      :return:", "", ":param dtype: the data type to convert to.\n  :param dtype: the data type to convert to.\n  :return: None.", "", "_proto2object(proto: DeleteDatasetMessage_PB) -> \"DeleteDatasetMessage\":", "", "", "(Returns a value at the specified index)", "", "", "(x: list, y: list) -> None:", "_summary_\n\n    _details_\n\n    _example_ =", "", "", "Sanitize text to be used in the query.\n\n  :param text: The text to be sanitized.\n\n  :return: The sanitized text.", "(str)", "close: close the output streams", "Read a notebook file.\n\n  Parameters\n  ----------\n  nb_file : str\n    The path to the notebook file.\n  format_name : str\n    The format name of the notebook file.\n\n  Returns\n  -------\n  notebook : Notebook\n    The notebook object.", "", "", "_call__", "", "", "", "_str__", ":param filename:\n    :param mode:\n    :return:", "_get_value(self, col, row):\n    Return the value of a cell in a sheet.\n\n    :param col: The column to retrieve the value from.\n    :param row: The row to retrieve the value from.\n    :return: The value of the cell.\n    :raises: ValueError if the value cannot be converted to the type of the column.\n    :raises: TypeError if the value cannot be converted to the type of the column.\n    :raises: ValueError if the value cannot be converted to the type of the column.\n    :raises: TypeError if the value cannot be converted to the type of the column.\n    :raises: ValueError if the value cannot be converted to the type of the column.\n    :raises: TypeError if the value cannot be converted to the type of the column.\n    :raises: ValueError if the value cannot be converted to the type of the column.\n    :raises: TypeError if the value cannot be converted to the type of the column.\n    :raises: ValueError if the value cannot be converted to the type of the column.\n    :raises: TypeError if the value cannot be converted to the type of the column.\n    :raises", "", "", "", "Parses a command from an input string.\n\n    Args:\n        input_str (str): The input string to parse.\n\n    Returns:\n        tuple: A tuple containing the command and accompanying text, or None if the command is not found.", "_return: bool", "", "Test the doc2vec model from a line-separated file.", "(int, file) ->", "", "", "", ":param param_value_1:\n    :param param_value_2:\n    :return:", "_invoke(self, callback, *args, **kwargs) -> Any:", "_init_", "(int, file) ->", "- Returns the domain of the URL.\n\n    :returns: str", "", "", "_get_fsdp_wrap_policy() -> Optional[Callable[[torch.nn.Module, bool, int], bool]]:", "\u6279\u91cf\u91cd\u547d\u540d\u6587\u4ef6\n  :param work_dir: \u6587\u4ef6\u5939\u8def\u5f84\n  :param old_ext: \u539f\u6587\u4ef6\u540e\u7f00\n  :param new_ext: \u65b0\u6587\u4ef6\u540e\u7f00\n  :return:", "", "", "_standard_exponential(self, size=None, dtype=float)", "_summary_", ":param a:\n  :param b:\n  :param c:\n  :param d:\n  :return:\n  :rtype: List[int]", "", "_is_rewrite_engine_on(self, vhost):", "", ":param ctx:\n  :param file:\n  :param quote:\n  :param export:\n  :return:", "", "Tests the accuracy.mae function.", "_append_package_path(self, package_name, directory):\n\n    :param str package_name:\n    :param str directory:\n\n    :return: None:", "_save(self, name, resp):", "", "", "_init_", "Test the exploit", "_call(self, inputs: Dict[str, Any], run_manager: Optional[CallbackManagerForChainRun] = None) -> Dict[str, Any]:", "", "(x) is the number of times the feature extractor is expanded.\n     (d) is the number of times the feature extractor is downsampled.\n     (b) is the number of times the feature extractor is both expanded and downsampled.", "", "", "Get the location of the dropbox home directory.\n\n    :return: The dropbox home directory.\n    :rtype: str", "", ":param obj: \n    :return: \n    :rtype:", ":param values: list of integers\n    :return: boolean", "(x1, y1), (x2, y1), (x2, y2), (x1, y2)", "", "Return the max width or height of a token.", ":param img1_path: str or list of str, path of the image\n    :param img2_path: str or list of str, path of the image\n    :return: list of str, path of the image\n    :return: bool, if the image is a bulk of image or not\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return: list of str, path of the image\n    :return:", "", ":param cfg:\n    :param signal_error:\n    :param no_daemon:\n    :param blur_usage:\n    :param advertise_version:\n    :param transit:\n    :param rendezvous:\n    :return:", "", "Test that simple2 is not listed as a user dependency.", "", "Parses connection string data into a dictionary.\n\n  :param index: The index of the member.\n  :param name: The name of the member.\n  :param session: The session.\n  :param data: The connection string data.\n  :return: The member.", "", "PUT /pipelines/{pipeline_uuid}/blocks/{block_uuid}", "", "", ":param session: :class:`requests.Session`\n  :param class_name: :class:`str`\n  :param args: :class:`argparse.Namespace`\n  :return: :class:`BaseDownloader`\n  :raises: :class:`AttributeError`\n  :raises: :class:`ModuleNotFoundError`\n  :raises: :class:`KeyError`\n  :raises: :class:`TypeError`\n  :raises: :class:`Exception`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError`\n  :raises: :class:`KeyError", "", ":rtype: dict\n    :return: \u5e01\u79cd\u540d\u79f0\u4e0e\u82f1\u6587\u540d\u79f0\u7684\u6620\u5c04\u5b57\u5178, \u952e\u4e3a\u82f1\u6587\u540d\u79f0, \u503c\u4e3a\u82f1\u6587\u540d\u79f0", "Returns the creation date of the document.\n    :param document: The document to get the creation date of.\n    :return: The creation date of the document.\n    :rtype: int", "", "", "Returns a pre-defined `ResNet18` model.\n\n    This function is called by :func:`~torchvision.models.detection.fast_scnn`\n    and :func:`~torchvision.models.detection.fast_rcnn`.", "", "", "_init_model(self, device):\n\n    Initialize the model with the given device.\n\n:param device: The device to use for the model.\n:return:", "Returns the preferred width of the given box.\n\n  :param box:  The box to get the preferred width of.\n  :type box:  :class:`~pyglet.text.Label` or :class:`~pyglet.text.MultilineLabel` or :class:`~pyglet.text.LineBox` or :class:`~pyglet.text.BlockContainer` or :class:`~pyglet.text.InlineContainer` or :class:`~pyglet.text.LineContainer` or :class:`~pyglet.text.BlockContainer` or :class:`~pyglet.text.InlineContainer` or :class:`~pyglet.text.LineContainer` or :class:`~pyglet.text.BlockContainer` or :class:`~pyglet.text.InlineContainer` or :class:`~pyglet.text.LineContainer` or :class:`~pyglet.text.BlockContainer` or :class:`~pyglet.text.InlineContainer` or :class:`~pyglet.text.LineContainer`.", "", ":param value:\n      :return:", "(env_var: Union[ConfigKey, str]) -> bool:", "", "Clean up the sentence.\n\n    :param sentence:  The sentence to clean up.\n    :param ignore_map:  The ignore map to use.\n    :param bpe_delimiter:  The bpe delimiter to use.\n    :return:  The cleaned up sentence.", "", "Returns a formatted xml string for the resource.\n  :rtype: str\n  :returns: The formatted xml string for the resource.\n  :returns: str\n  :raises: :class:`~botocore.exceptions.ClientError`\n  :raises: :class:`~botocore.exceptions.ParamValidationError`\n  :raises: :class:`~botocore.exceptions.EndpointNotFound`\n  :raises: :class:`~botocore.exceptions.EndpointConnectionError`\n  :raises: :class:`~botocore.exceptions.Validation\ufffdError`\n  :raises: :class:`~botocore.exceptions.Service\ufffdError`\n  :raises: :class:`~botocore.exceptions.Response\ufffdError`\n  :raises: :class:`~botocore.exceptions.Client\ufffdError`\n  :raises: :class:`~botocore.exceptions.Client\ufffdError`\n  :raises: :class:`~botocore.exceptions.Client\ufffdError`\n  :raises: :class:`~botocore.exceptions.Client\ufffdError`\n  :raises: :class:`~botocore.exceptions.", "", "Parameters\n    ----------\n    pretrained: bool, optional (default=False)\n        If True, load the pre-trained model from `default_cfgs`\n    num_classes: int, optional (default=1000)\n        Number of classes to classify\n    in_chans: int, optional (default=3)\n        Number of input channels\n    \n    Returns\n    -------\n    gluon_resnet101_v1e: gluon.model_zoo.GluonModule\n        The gluon_resnet101_v1e model.", "()\n    :param layout:", "Remove stopwords from the sentences.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        Dataframe with sentences.\n    sentence_cols : list\n        List of columns containing sentences.\n    stop_cols : list\n        List of columns to store the stopwords removed sentences.\n\n    Returns\n    -------\n    pd.DataFrame\n        Dataframe with stopwords removed sentences.", "", ".include_path(path, extensions=None)", "This method is deprecated.\n    Please use `airflow.providers.google.cloud.hooks.bigquery.BigQueryHook.patch_table`", "_grid_anchors(self, grid_sizes):\n\n    _get_anchor_for_grid_location(self, grid_location):\n\n    _get_anchor_for_grid_locations(self, grid_locations):\n\n    _get_anchor_for_grid_locations_with_anchors(self, grid_locations, anchors):\n\n    _get_anchor_for_grid_locations_with_anchors_and_anchors(self, grid_locations, anchors):\n\n    _get_anchor_for_grid_locations_with_anchors_and_anchors_and_anchors(self, grid_locations, anchors):\n        return [x for x in anchors_over_all_feature_maps if x is not None]\n        return [x for x in anchors_over_all_feature_maps if x is not None and x[0] is not None]\n        return [x for x in anchors_over_all_feature_maps if x is not None and x[0] is not None and x[0][0] is not None]\n        return [x for x in anchors_over_all_feature_maps if x is not None and x[", "", "", ":param signum: \n    :param frame: \n    :return: \n    :rtype:", "_make_task(cls, args, **kwargs):\n    return cls(args, **kwargs)\n    \n    def __call__(self, *args, **kwargs):\n    return self.setup_task(cls, *args, **kwargs)\n\n    def setup_task(cls, args: Namespace, **kwargs):\n    return cls(args, **kwargs)", "_init_\n    Initialize the parameters of the model.\n    Parameters\n    ----------\n    init : str or callable, default='glorot_uniform'\n        - 'uniform' or 'uniform_scaling' or 'uniform_scaling_bias' or 'uniform_scaling_bias_scale' or 'uniform_scaling_bias_scale_bias'\n        - 'normal' or 'normal_scaling' or 'normal_scaling_bias' or 'normal_scaling_bias_scale' or 'normal_scaling_bias_scale_bias'\n        - 'uniform_scaling_bias_scale_bias_bias' or 'normal_scaling_bias_scale_bias_bias'\n    scale : float, default=0.5\n        - The scale of the uniform or normal initialization.\n    bias : float, default=1.0\n        - The bias of the uniform or normal initialization.\n    regularizers : dict, default=None\n        - A dictionary of regularizers to be added to the loss.\n    constraints : dict, default=None\n        - A dictionary of constraints to be added to the loss.", "", "", "", ":param img: input image\n    :param width: width of the input image\n    :param height: height of the input image\n    :param model_height: height of the model\n    :return: resized image and ratio of the image", "", ":param code:\n  :param handler:\n  :return:\n  :rtype:", "Returns an agent that can use the given SQL database to answer questions.\n\n    Args:\n        df (pd.DataFrame): The dataframe to use as the SQL database.\n        args (dict): The arguments to use as the SQL database.\n        pred_args (dict): The arguments to use as the SQL database.\n\n    Returns:\n        The agent that can use the given SQL database to answer questions.\n\n    Example:\n        ```python\n        from langchain import OpenAI, SQLDatabase, SQLDatabaseToolkit, create_sql_agent\n        from langchain.agents import", "Execute the next action of the agent.\n\n  Args:\n      agent_execution_id (int): The ID of the agent execution.\n      time (str): The time when the action is executed.\n\n  Returns:\n      None: This function does not return anything.", "(Re)starts the jail.", "Save the model to a file.\n\n  Args:\n      model_file (str or Path): The file to save the model to.\n\n  Returns:\n      None: The model is saved to the file.", "", "", "", "", ".ln()", "(run_cmd: list) -> None", "_val_loader(self, settings):", ":param cls:\n    :param element:\n    :return: \n    :rtype:", "", "", "", "_init_", ":param value:", "", "Create a temporary directory for use in tests.  \n    \n    :param suffix: The suffix to use for the temporary directory.\n    :param prefix: The prefix to use for the temporary directory.\n    :param dir: The directory to use for the temporary directory.\n    :return: The temporary directory.\n    :rtype: str", ".get_input_keys() should return a list of input keys that can be\n    provided by the user.", "Clean up after ourselves.", ".set_input_type(instance, name, type, default=None) -> None:\n\n    :param instance:\n    :param name:\n    :param type:\n    :param default:\n    :return:\n    :raises:", "Returns the offset of the original data in the file.", "", "", ":param logger: The logger to use for logging.\n    :param log_level: The level of logging to use.", "Returns the data type of the batch.\n\n  Returns:\n    The data type of the batch.", "(Remap input to new input)", "ignore_collect: ignore all modules with version marker in name\n\n  :param path:  path to module\n  :param config:  pytest configuration\n  :return:  ignore or not\n  :rtype:  bool\n  :seealso:  https://docs.pytest.org/en/latest/how-to/ignore.html#using-version-markers-in-module-names", "", "start tornado server to handle api requests\n\n    :param api_port: port number of the tornado server\n    :param address: address of the tornado server\n    :return: list of socket names", ":param path: str\n    :param paths: list of str\n    :return: str", "\u590d\u5236\u5bf9\u8c61\u5230\u53e6\u4e00\u4e2a\u5b58\u50a8\ufffd", "(self):", "", "(0)", "_clear(self, addr, ndx = 0)\n    Clear the contents of a memory address.\n    :param addr: The address to clear.\n    :param ndx: The index of the memory to clear.\n    :return: The number of bytes cleared.", "", "Return a unicode string.\n\n  :rtype: str\n  :returns: The string.", "_convert_objects(self, convert_dates=True, convert_numeric=False, copy=True)", "", "(page, content, toc) -> None", "back_adjust\n    :param data:\n    :return:\n    :rtype: pd.DataFrame", "32-bit FNV-1a hash function", "(amount, cost)", "_get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any, ...]:\n\n    _get_args(t: Type[Any]) -> Tuple[Any,", ":param signed:  The signedness of the address.\n  :param addr:  The address to read.\n  :param length:  The length of the address.\n  :param label:  The label of the address.\n  :type:  int,  int,  int,  str.", "_forward_pass", "", "", "", "(item_type, rec_src, sr, link, comment=None)", "Registers an error handler for the given error code.\n  :param code: The error code.\n  :type code: int", "_on(self, image)", "() -> str:\n    Return the name of the object.", "_reset(self, level_infra: LevelInfrastructure = None, common_infra: CommonInfrastructure = None, outer_trade_decision=None, **kwargs):", "", "Extract style from the image.\n\n    Args:\n        style_layers (list): List of style layers to extract.\n\n    Returns:\n        List of (name, layer, weight, loss)", "_wrapper:\n    :param url:\n    :return:\n    :raises ValueError: if the URL is invalid or too long\n    :raises ValueError: if the URL is not a valid URL\n    :raises ValueError: if the URL is not a local file", "_stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data)\n    _stringify(data", "", "", "_testCustomScorer()", "", ".add_argument(self, *args, **kwargs)", "Render a tree as JSON.", "Saves the model to the output directory.\n  Args:\n      trainer (transformers.Trainer): The trainer to save.\n      output_dir (str): The output directory to save the model to.", "", ":param text: str, the text to be converted\n      :param language: str, the language of the text\n      :return: str, the converted text", "", "_sync_with_dict", "(broken_emits_utf8)\n\n    Test that a package that emits unicode is installed without error.", "", "", "_get_groups(self, request, project):", "", ":param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :return: \u5151\u6362\u5238\u5217\u8868\n    :rtype: list", "Initializes the Dejavu object with the configuration file.\n\n    :param config_file: The path to the configuration file.\n    :type config_file: str", ":param package_helper:\n  :param package:\n  :return:\n  :rtype: int\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package_helper.RPackageHelperError`\n  :raises: :class:`~r_package", "", "Return the fully-qualified name of this file.\n\n  :returns: the fully-qualified name of this file.\n  :rtype: list of str", "", "Sets the volume of the mixer.\n\n    :param int volume: The volume to set.\n        Must be between 0 and 100.\n    :return: True if the volume was set, False otherwise.\n    :raises: :class:`~py.exceptions.ValueError` if the volume is out of range.\n    :raises: :class:`~py.exceptions.AttributeError` if the mixer is not set.\n    :raises: :class:`~py.exceptions.AttributeError` if the mixer is not set.\n    :raises: :class:`~py.exceptions.AttributeError` if the mixer is not set.\n    :raises: :class:`~py.exceptions.AttributeError` if the mixer is not set.\n    :raises: :class:`~py.exceptions.AttributeError` if the mixer is not set.", ":param val:\n  :return:", "Stop all jobs.", "_init_function:", ":return: dict of environment variables", "Removes SQL from the database.\n\n  :param question: The question to remove the SQL from.\n  :type question: strcalculate_wer(self, seqs_hat, seqs_true):\n    :param seqs_hat:\n    :param seqs_true:\n    :return:", "", "https://github.com/facebook/torch_distributed_zero_first/blob/master/torch_distributed_zero_first/zero_first.py#L16-L20", "", "_forward(self, tensor_input):\n    return self.basic_module(tensor_input)", "", "Returns the texture of the image.", ":param executable: The name of the script to run.\n    :param args: The arguments to pass to the script.\n    :return: The process ID of the process.\n    :rtype: int\n    :raises: FileNotFoundError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ImportError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.\n    :raises: ValueError if the script does not exist.", "Returns a tuple of (is_container, str(t))", "", "Convert a list of messages to a list ofAnthropicHistory objects.\n\n  Args:\n      history: The list of messages to convert.\n      is_demonstration: Whether or not this is a demonstration.\n\n  Returns:\n      A list ofAnthropicHistory objects.\n\n  Example:\n      ```python\n      messages = [\n          {\"role\": \"user\", \"content\": \"Hello, how are you?\"},\n          {\"role\": \"assistant\", \"content\": \"I am good, how about you?\"},\n          {\"role\": \"user\", \"content\": \"I am great, thanks!\"},\n      ]\n      anthropic_messages = history_to_messages(messages)\n      print(anthropic_messages)\n      # [\n      #   {\"role\": \"user\", \"content\": \"Hello, how are you?\"},\n      #   {\"role\": \"assistant\", \"content\": \"I am good, how about you?\"},\n      #   {\"role\": \"user\", \"content\": \"I am great, thanks!\"},\n      # ]\n      ```", "Returns a list of all the unique sender_id's in the database.\n\n  Returns:\n    List[str]", "", "_frames: list of frames", "Test scan_file_for_barcodes() method.", "(img) -> torch.Tensor", "(Required) Returns the number of tokens used by a list", "Returns a singleton instance of a class.", "_tokenize(filename)\n\n    Returns a list of tokens from a file.\n\n    Args:\n        filename (str): The name of the file to tokenize.\n\n    Returns:\n        list: A list of tokens.\n\n    Raises:\n        TokenizerError: If the file does not exist.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a valid file.\n        TokenizerError: If the file is not a", "", "ite.", "(int) num_samples: Number of samples to generate.\n(int) current_device: The device to run the sampling on.", "(optional) Save the current object to an hdf5 file.\n\n    :param filename: The path to the file to save to.\n    :param datapath: The path to the data to save.\n    :param kwargs: The keyword arguments to pass to the `to_hdf5` method.\n    :return: The path to the file that was saved to.\n    :rtype: str", ":rtype: ServerMountPoint", "Clear all jobs.\n    :return:", "_create_valid_env", "_init_function:", "Saves the form, creating a new instance if necessary.\n    :param commit: Whether to save the form.\n    :type commit: bool\n    :return: The newly saved instance.\n    :rtype: PagePermission", "(1) Remove all forwards that are no longer needed.", "", ":type self: object\n    :type other: object\n    :rtype: bool", "", "", "", "", "Returns a client token for the given payment gateway.\n  :param str gateway_name: The name of the payment gateway.\n  :param TokenConfig token_config: The token config.\n  :return: The client token.\n  :rtype: str\n  :raises: PaymentGatewayException if the payment gateway is not found.\n  :raises: PaymentGatewayException if the payment gateway is not supported.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.\n  :raises: PaymentGatewayException if the payment gateway is not configured.", ":param headers: string of headers to extract\n    :return: a dictionary of the headers and their values", "_get_identifiers(self):\n\n    Returns a list of Parameter objects that are defined by this\n    class.  This includes the class and all of its superclasses.\n\n    :return: List of Parameter objects.  This includes the class\n        and all of its superclasses.", "_authorize_redirect(self, redirect_uri=None, client_id=None,\n                       client_secret=None, extra_params=None)", "", "", ":return:", ":param assets:\n  :param account_policy:\n  :param account_prefer:\n  :param host_callback:", "", "Writes the changes to the project file.\n\n  :param show_message: Show the success message.\n  :type show_message: bool\n  :return: None.\n  :rtype: None.\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectWriteError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectReadError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectParseError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectWriteError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectReadError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectParseError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectWriteError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectReadError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectParseError`\n  :raises: :class:`~pyproject_tools.exceptions.PyprojectWriteError`", "", "", "- get_summary_row(self, pkgname, obj)\n\n    -", "", "Returns the power spectral density of the signal.\n\n    Parameters\n    ----------\n    omega : `TensorVariable`\n        The frequency of the signal.\n\n    Returns\n    -------\n    `TensorVariable`\n        The power spectral density of the signal.\n\n    See Also\n    --------\n    :class:`~pt.signal.Signal` : The signal.\n\n    Notes\n    -----\n    The power spectral density is the power of the signal at a given frequency.", "(request, exception) -> Response\n\n    If the exception is not handled by the error_handler_spec, an\n    InternalServerError is returned.", "_chunk_key_offset(self, key):\n\n    Returns the offset of the given key in the chunk.\n\n    :param key: The key to get the offset of.\n    :return: The offset of the key in the chunk.", "", "Sets the model to use for the experiment.\n\n  :param model: The name of the model to use for the experiment.", ":param arch: :class:`arch.Arch` object.\n  :return: None.", "", "_searching(self):", "", "\u83b7\u53d6\u6d88\u606f\u53d1\u9001\u8005id\n\n    :param msg: \u6d88\u606f\n    :type msg: Message\n\n    :return: \u7528\u6237id\n    :rtype: str\n\n    :Example:\n        >>> get_context_user_id(msg)\n        'wx12345678901234567890123456789012'\n        >>> get_context_user_id(msg, max_len=16)\n        'wx1234567890123456789012345678901'\n        >>> get_context_user_id(msg, max_len=16, re_sub=r'[^a-zA-Z\\d]')\r\n        'wx1234567890123456789012345678901'", "", "Initialize the loss function.\n\n    Args:\n        self (RTDETR): The current instance of the class.\n\n    Returns:\n        RTDETR: The loss function is being initialized.\n\n    .. note::\n        The `use_vfl` parameter is a boolean parameter that determines whether the loss function is using the\n        VFL loss function or not.", "", "_is_managed_by_nm:\n    :return: True if the node is managed by the network manager.", "", "", ".induced_subgraph(nodes) -> DGLSubGraph", "(dict, key, value) -> None:\n    Add value to the list of values for key in dict.\n    :param dict: The dictionary to add the value to.\n    :param key: The key to add the value to.\n    :param value: The value to add to the list of values for key in dict.\n    :return: None.", "_get_dictionary_values(dictionary)", "", "", "", "", "(df: pd.DataFrame) -> int:", "_add_to_parser(self, parser):", "_get(self, query_id):\n    Get a query by its ID.\n\n    :param query_id: ID of the query to get.\n    :type query_id: int\n    :return: A dictionary of the query.\n    :rtype: dict", "", "_Permute(self):", ":param module_name:\n  :return:\n  :rtype:", "Return the \"Expect\" header value from the request.\n\n  :rtype: str\n  :returns: The \"Expect\" header value.", ":param current_stream_state:\n    :param latest_record:\n    :return:\n    :rtype: Mapping[str, Any]", ".default_value?", "_to_replicate_", "", "_start_streaming", "", "", "Return the current page mode.\n\n  @return: The page mode, or None if the page mode is not set.", "(self):\n    def raise_custom_error(self):\n    \traise CustomError(self.derived_message)\n    \treturn True", "", "Returns a Flask app or None.\n\n  :param apps: a list of Flask apps or a single Flask app.\n  :param kwargs: a list of parameters to pass to the Flask app.\n  :return: a Flask app or None.", "", "", "(t, t) -> np.ndarray", ".frame.get_center()", "_set_dns_challenge_txt(self, zone_id, domain, txt_challenge)", ":param attribute_key:\n    :param attributes:\n    :return:", ":returns: The maximum sequence length for the model", "_content: str = None", "Tests the query_dict_for_request method for the panel.", ":param pair: pair of two currencies\n    :param timeframe: timeframe of the data\n    :param since_ms: since_ms of the data\n    :param is_new_pair: if is_new_pair is True, then the pair is not in the pair_list,\n                        so we need to download the data from the database.\n    :return: a list of 5-tuple of (time, open, high, low, close)", "Test get request with follow_redirect.", "_command(func):\n    def decorator(func):\n            result = command(*args, **kwargs)(func)\n            self.add_command(result)\n            return result\n\n        return decorator", "_get_default_config(self, cfg):\n    return 100", "", "_post:\n    :return:", "", "", "_init_", "_call__", "", "", "_postprocess_image: postprocess the image tensor to a PIL Image.\n\n    Args:\n        image_tensor (torch.Tensor): The image tensor to postprocess.\n\n    Returns:\n        Image.Image: The postprocessed image.", "", "Shutdown the global client.", "", "(def sample(self, num_samples:int, current_device: int) -> Tensor):", "", "", "_init_\n    :param int terrain_id:\n    :param GenieObjectContainer full_data_set:\n    :param dict[str, ValueMember] members:", "_init_", "_init_", ":param env: The environment to be wrapped.\n  :param noop_max: The maximum number of no", "(self):", "_predict(self, X):\n    Predict using the trained model.\n    Parameters\n    ----------\n    X : array-like, shape = [n_samples, n_features]\n        Training data.\n    Returns\n    -------\n    y_pred : array-like, shape = [n_samples]\n        Predicted target values.", "", "", "(self, apt):\n\n    def dpt(self):\n\n    \treturn self.dpt.copy()\n\n    def idxmap(self):\n\n    \treturn self.idxmap.copy()\n\n    def vmap(self):\n\n    \treturn self.vmap.copy()", "Apply a list of gradients returned by `compute_gradients`.\n    :param grads_and_vars: List of (gradient, variable) tuples.\n    :param global_step: Integer-valued global step.\n    :param name: Name of the operation.", "_get_loaded_models_info", "_sanity_check()\n    Check if the NyanObject is in a valid state.\n    :raises: Exception if the NyanObject is in an invalid state.\n    :return: None.", "Returns the site path of the current site.\n\n    :param joins: The joins to the site path.\n    :return: The site path.\n    :rtype: str", "_init_signals", "", "", ":param config:  InitConfig", ":rtype: None\n    :param str args: command line arguments\n    :return: None\n    :rtype: None\n    :raises: :class:`Exception`\n    :raises: :class:`~mpv.MpvException`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpv.MpvError`\n    :raises: :class:`~mpvet the tag to be used in the authentication function.\n  :param tag:  The tag to be used in the authentication function.", ":param file_path: Path to the file to load from.\n  :return: The loaded pipeline template.", "", ".get_iocs(\"emails\") returns a list of email indicators from the database.\n    The function checks if the email is a known suspicious email address.\n    :param email: The email to check.\n    :return: True if the email is a known suspicious email address, False otherwise.\n    :rtype: bool", "", "", "_load_index(self, version_string) -> str:", "", "", "", ".at_start() is a method that returns True if the current\n    position is at the start of the sequence, False otherwise.", "-", "", "Returns a dictionary with the number of communications in the last year\n    :param doctype: the doctype of the document\n    :param name: the name of the document\n    :return: a dictionary with the number of communications in the last year\n    :rtype: dict\n    :Example:\n        >>> get_timeline_data('Blog', 'My first blog post')\n        {1464832000000: 1}\n    :Example:\n        >>> get_timeline_data('Blog', 'My second blog post')\n        {1464832000000: 1}\n    :Example:\n        >>> get_timeline_data('Blog', 'My third blog post')\n        {1464832000000", "_strict_mode_strategy()", "", "", "", "Pause the current track.\n\n  :return: True if the track was paused, False otherwise.\n  :rtype: bool", "", ".get_pipeline(self, pipeline_name)", ":param kwargs:", ".set_upstream(self, nodes: DependencyType) -> None:", ":param value:", "Builds a sdist from a given directory.\n\n    :param sdist_directory: The directory to build the sdist from.\n    :param config_settings: The configuration settings to use.\n    :return: The name of the sdist.", "(n_samples, change_points) -> List[int]", ":return: The location of the dropbox folder on the user's machine.", "", "", "Test that the notebook can be read and written to the same\n  format.", "", "(sid=None, max_shares=None, max_notional=None) -> None:", "", "_compare(self, statement, other_statement):", "_init__", "", "", "_get_usage()", "_init_function_for_class_Diff_Match_Patch", "", "", "Filter the notebook's metadata.", "Parse a range of numbers.", "_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):", "Initializes the population with random numbers.\n  \n  :return:", "", "_summary_or_dict_or_list: Return a string of the parameters for the request.\n    :return: A string of the parameters for the request.\n    :rtype: str\n    :raises: 400: If the request is invalid.\n    :raises: 401: If the request is not authorized.\n    :raises: 403: If the request is not allowed.\n    :raises: 404: If the request is not found.\n    :raises: 405: If the request is not allowed.\n    :raises: 406: If the request is not acceptable.\n    :raises: 407: If the request is not authorized.\n    :raises: 408: If the request is not complete.\n    :raises: 409: If the request is not unique.\n    :raises: 410: If the request is not valid.\n    :raises: 411: If the request is not valid.\n    :raises: 412: If the request is not valid.\n    :raises: 413: If the", "", "Return a copy of the feature.\n\n  Returns:\n    :class:`DirectFeature`: A copy of the feature.", "", "", ":param no_daemon:\n        :param blur_usage:\n        :param advertise_version:\n        :param transit:\n        :param rendezvous:\n        :param disallow_list:\n        :return:", "_build_command_list(self):", "", "_create_examples(", "_get_data_asset", "", "", "Add a route to the router.\n\n  :param uri: The URI to route to the handler.\n  :param methods: The HTTP methods to route to the handler.\n  :param host: The host to route to the handler.\n  :return: The decorated handler.\n  :rtype: function", "Execute a command and return the results.\n\n    :param command: The command to execute.\n    :param args: The arguments to pass to the command.\n    :param env_vars: The environment variables to use when executing the command.\n    :param shim: The shim to use when executing the command.\n    :return: The return code, the output and the error.", "", "_connection_stacking(self):\n    _test_connection_stacking(self, new_connection)\n    _test_connection_stacking(self, new_connection, \"with_connection\")", ":param *args:\n    :param **kwargs:\n    :return:", "\u83b7\u53d6\u4e58\u5ba2\u7c7b\u578b", "", "_set_in_memo(self, memo, k, v)", "Returns:\n        torch.Tensor: The output of the module.", "", "_repr_html_():", "", ":param value: value to find\n    :return: node with value or None if not found", "_init_", "(string)", ":param cls: The class to export.\n    :param journal: The journal to export.\n    :param output: The output directory or file.\n    :return: The exported journal.", "", "", "_traverse_dict(input_dict, resolution_data, resolver_method)\n\n    :param input_dict:\n    :param resolution_data:\n    :param resolver_method:\n    :return:", ".find_first_cycle(self):", "_make_save_file_name(store_type: str) -> str:\n\n    :param store_type: str", "Test that a user can be added to an organization as an associate.\n\n    :param rando:  A random user.\n    :param admin_user:  An admin user.\n    :param organization:  An organization.\n    :param post:  A function that makes a POST request.\n    :return:  A 204 response.\n    :rtype:  A 204 response.\n    :raises:  An error if the user is not added to the organization as an associate.\n    :raises:  An error if the user is not added to the organization as an associate.\n    :raises:  An error if the user is not added to the organization as an associate.\n    :raises:  An error if the user is not added to the organization as an associate.\n    :raises:  An error if the user is not added to the organization as an associate.\n    :raises:  An error if the user is not added to the organization as an associate.\n    :raises:  An error if the user is not added to the organization as an associate.\n    :raises:  An error if the user is not added to the organization as", "Returns a :class:`~torch.FloatTensor` with the same shape as this :class:`~torch.FloatTensor` but in CSR format.\n    :param copy: if True, return a new :class:`~torch.FloatTensor` with the same shape as this :class:`~torch.FloatTensor` but in CSR format.\n    :return: a :class:`~torch.FloatTensor` with the same shape as this :class:`~torch.FloatTensor` but in CSR format.\n    :rtype: :", "Initialize the class.\n\n  Args:\n      in_channels (int): Number of input channels.\n      out_channels (int): Number of output channels.\n      kernel_size (int): Size of the kernel.\n      stride (int): Stride of the deconvolution.\n      bias (bool, optional): Whether to include a bias term in the\n          convolution.\n\n  Returns:\n      None.", ":param val:\n  :param env:\n  :param fallback_to_os_env:\n  :return:\n  :rtype: str", "Convert an AWS lambda ARN to a canonical lambda_function_arn\n\n    :param str arn: The lambda function's canonical ARN\n\n    :return: The lambda function's canonical function_arn\n    :rtype: str\n    :raises: :class:`~botocore.exceptions.ClientError`", "Create a help command that displays all available commands.\n\n  :rtype: :class:`~boto3.client.s3.S3HelpCommand`\n  :return: The help command.", "_menu_loadPage(self, index: int):\n\n    :param index: int\n    :return:", "", "", "_set_validation\n        Sets validation data for the model.", "", ":return: \u5ef6\u8fdf\u65f6\u95f4", ".", "Convert bytes to human readable format.\n    \n    Parameters\n    ----------\n    n : int\n        The number of bytes to convert.\n    \n    Returns\n    -------\n    str\n        The number of bytes converted to human readable format.", ".get_transport_for_url() returns a `SyncHTTPTransport` for the given\nURL.", "", ":param cls:\n  :param message_entity_array:\n  :return:\n  :rtype: list", "Returns a human readable string of the specified size\n    \n    :param size: The size to be formatted\n    :type size: int or float\n    :param suffix: The suffix to be added to the size\n    :type suffix: str\n    :return: The size as a human readable string\n    :rtype: str\n    :raises ValueError: If the size is negative\n    :raises ValueError: If the size is too large\n    :raises ValueError: If the suffix is too long\n    :raises ValueError: If the suffix is not a string\n    :raises ValueError: If the suffix is not a string of length 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,", ":param X:\n    :return:", "_check_write_conan(username, ref)", ":param data: List of outputs to set.", "", ":param t:", "_data.tolist()\n    _mask.tolist()\n    _mask is nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:\n    _mask is not nomask:", "", ".get_release_info(name, version)\n    .get_release_info(name, version, force=False)\n    .get_release_info(name, version, force=False, timeout=0)\n    .get_release_info(name, version, force=False, timeout=None)\n    .get_release_info(name, version, force=False, timeout=None, cache=None)\n    .get_release_info(name, version, force=False, timeout=None, cache=None, error_handler=None)\n    .get_release_info(name, version, force=False, timeout=None, cache=None, error_handler=None, timeout_handler=None)\n    .get_release_info(name, version, force=False, timeout=None, cache=None, error_handler=None, timeout_handler=None, logger=None)\n    .get_release_info(name, version, force=False, timeout=None, cache=None, error_handler=None, timeout_handler=None, logger=None, timeout_handler=None)\n    .get_", "", ".read_episodes(self.data_loader, self.datafile)\n        for episode in self.read_episodes(self.data_loader, self.datafile):\n            self.data.append(episode)\n        return self.data", "", "", "", "Test that set_cookie works with the cookies model.\n\n  This is a very simple example of a use case for the set_cookie function.", ":param url:\n    :param param:\n    :return:", "", "Update label map path in configs.\n\n  Args:\n    configs: The configs to update.\n    label_map_path: The label map path to update.", "Load the item's metadata into the record.\n  :return:", "", "", "", "", "", "", "", "", ":param coco:", "Check if all the events are successful.\n\n    :return: True if all the events are successful.", "Broadcast the input array to the specified axis.", "Get the last error text.\n\n    :return: The last error text.", "_control(self) -> OptionList:", "(fgraph) -> bool", "", "", "", ".api_version = '1.0'", ":param args: command line arguments\n  :return: None", ".rng()", "Find a node by name in a given subgraph.\n\n  Args:\n    name (str): Name of the node to find.\n    package (str): Package of the node to find.\n    subgraph (str): Subgraph to search.\n    nodetype (str): Type of the node to find.", "Test that only creates the files that are in the config.\n\n    :param capfd:\n    :param home:\n    :param dotfiles:\n    :param run_dotbot:\n    :return:\n    :rtype: None\n    :raises:"]], "google/codegemma-2b": [["(self, path):\n        Save the DataFrame as a pickle file.\n\n        Parameters\n        ----------\n        path : str\n            Path to the file.", "Saves the model for HF Trainer. \n    \n    Args:\n        trainer: A HuggingFace Trainer object.\n        output_dir: The directory to save the model to.\n    \n    Returns:\n        None.", "for a given label, return a mask of the image that contains\n    the label.", ".", "Sets the output keys for all datasets in the list.\n    \n    Parameters\n    ----------\n    datasets : list\n        A list of Dataset objects.\n    output_keys : list\n        A list of strings representing the output keys.\n    \n    Returns\n    -------\n    None\n        Sets the output keys for all datasets in the list.", "Print to stderr or stdout.\n    \n    >>> print(\"Hello\")\n    >>> print(\"Hello\", file=sys.stderr)\n    >>> print(\"Hello\", file=sys.stderr, flush=True)\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end=\"\")\n    >>> print(\"Hello\", file=sys.stderr, flush=True, end", "Returns a tuple of the example input, system prompt, and user prompt for the dispatcher.", "Returns True if any of the preferences are enabled.", "Delete all the files in the build directory.", ".\n    :param result_handler:\n    :return:", "This method is used to invoke a callback with the context of the\n    command.", "_stat = self.get_stat()\n    if _stat:\n        return _stat[2]", "Binary search to find the rightmost index of a target value in a sorted array.", ",\n    *args,\n    **kwargs,", ".", "Fix crontab", ".", "_hook_distutils_path_for_python_modules_in_submodules_", ".", "for key in self._keys:\n\n        if key not in element:\n            return False\n\n        if self._re_method == 'match':\n            return re.match(self.regex, element[key])\n\n        if self._re_method == 'search':\n            return re.search(self.regex, element[key])", "", "This function takes two strings as input and returns a dictionary with a key \"output\" and a value \"Hello, {word1} and {word2}!\".", "Convert all the items in the dictionary to the specified type.\n    \n    Parameters\n    ----------\n    dtype : str, optional\n        The data type to convert to, by default None\n    \n    Returns\n    -------\n    None\n    \n    Example\n    -------\n    >>> from datetime import datetime\n    >>> from my_class import MyClass\n    >>> my_dict = {\"a\": 1, \"b\": \"hello\", \"c\": datetime.now()}\n    >>> my_class = MyClass(my_dict)\n    >>> my_class.to(dtype=\"int\")\n    >>> print(my_class.a)\n    1\n    >>> print(my_class.b)\n    hello\n    >>> print(my_class.c)\n    datetime.datetime(2023, 7, 16, 16, 19, 25, 583564)", "", "_proto2object(\n        proto: DeleteDatasetMessage_PB,\n    ) -> DeleteDatasetMessage:", "Runs the model and returns the output.\n    \n    Parameters\n    ----------\n    wavsignal : array\n        Input audio signal.\n    fs : int, optional\n        Sampling frequency of the signal.\n        The default is 16000.\n\n    Returns\n    -------\n    array\n        Output audio signal.", "Check if all engines are working fine", "(self, value=NAN, size=1):", "_close:\n\n    Close the writer.", ":param fileDir: \n    :param isPicture: \n    :param isVideo: \n    :param toUserName: \n    :param file_: \n    :param preparedFile: \n    :return:", ".\n\n    Args:\n        x (list): The x values.\n        y (list): The y values.\n\n    Returns:\n        None", ",", "This is the main function of the cli", "", "Removes URLs, special characters, and extra spaces from the text.", ".format_tb(self.limit)", "::close::\n\n        Closes the file.", "Read a notebook file\n    \n    Parameters\n    ----------\n    nb_file : str\n        Path to the notebook file\n    format_name : str\n        Name of the format to read the notebook file.\n        If None, the format name is guessed from the file extension.\n        \n    Returns\n    -------\n    notebook : nbformat.NotebookNode\n        The notebook object", "@param generic_target: GenericTarget", "@param: key: fieldname\n    @param: value: value\n    @param: sigmaparser: sigmaparser", ".", "Check if the synset name is the same as the word.n.01.\n    \n    Parameters:\n    - synset (Synset): The Synset object.\n    - word (str): The word to check.\n    \n    Returns:\n    - bool: True if the synset name is the same as the word.n.01, False otherwise.", "for Python 2", ".\n    Returns a list of the names of all microphones on the system.", "Returns a string representation of this object.", "Opens the file and returns it as a file object.", ".\n    Sets the value of the cell at the given row and column.\n    :param col: The column to set the value in.\n    :param row: The row to set the value in.\n    :param val: The value to set the cell to.\n    :return: None", ":param message_context: SnsMessage\n    :param subscriber: SnsSubscription\n    :return: str", "Parses data from a file into a list of lists.\n    \n    Args:\n        filename (str): Path to the file.\n    \n    Returns:\n        list: List of lists containing the parsed data.", "", "import openai\n\ndef get_response(prompt, engine=\"text-davinci-003\", max_tokens=1024, temperature=0.7, top_p=1, frequency_penalty=0, presence_penalty=0, stop=None):", ".\n    Returns True if the command has output.", "", "Test the doc2vec model with a corpus file.", "(self, step=10, file=sys.stderr)", "", "Render graph of an interface.", "Initialize a model with a given w0 value.\n    \n    Parameters\n    ----------\n    w0 : float\n        The initial frequency of the model.", "_summary_", ".", "configures sanity test runner", "(Optional) Sets the step between triggers. \n\n    If the step is set to 10, the first trigger will be after 10 steps, \n\n    the second after 20 steps, and so on.", "for the domain of the current instance", "", "Return the width of the nested group.", "Returns the function that wraps the transformer encoder to enable\n    flash attention.", "rename files in a folder\n    \n    Args:\n        work_dir (str): work dir\n        old_ext (str): old file extension\n        new_ext (str): new file extension\n    \n    Return:\n        rename files in a folder", "Returns the number of elements in the array.", "Reads the configuration file and stores it in self.config.", ".\n\n    Returns a standard exponential distribution.", ".\n    Tests the count_components function with an empty graph.", "This is a mock function that returns a list of integers.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n        d (int): The fourth integer.\n    \n    Returns:\n        List[int]: A list of integers.", "_init__", ".", "Returns a list of `SplitGenerators` that take a URL and extract the data\n    from the zip file.", "'CLI' function to initialize the context object.", "::param session_id: str\n    ::param system_prompt: str\n    ::param session_args: dict", "", ".\n    Adds a directory to the package path map.", "(self, name, resp):", "Returns the number of iterations in an epoch.", "matmul(x, y) = x @ y.T", "(self, window)", "Test if the check function works properly.", "(Callable[\n        [Dict[str, Any], Optional[CallbackManagerForChainRun]],\n        Dict[str, Any],\n    ])", "Sets the key for the encryption/decryption\n    \n    @param key: The key to use for encryption/decryption", "_create_vision_transformer", "Computes the log-probability of a given value.\n    \n    Parameters\n    ----------\n    value : array_like\n        The value to be evaluated.\n    n : int\n        The number of possible outcomes.\n    p : array_like\n        The probability of each outcome.\n    \n    Returns\n    -------\n    logp : array_like\n        The log-probability of the given value.", "Callback function for the MQTT client.", "Return the location of the Dropbox installation on the user's system.", "This method is called when a snapshot is taken.", "Convert numpy array to json. \n    \n    Args:\n        obj (numpy array): numpy array to be converted to json. \n        \n    Returns:\n        (list): list of json objects.", ">>> are_sequential_integers(['1', '2', '3'])\n    True\n    >>> are_sequential_integers(['1', '2', '3', '4'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5'])\n    True\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7', '8'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n    True\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n    False\n    >>> are_sequential_integers(['1", "Returns the keypoints of the face.", "Returns True if the iterator has no more elements.", "Returns the width or height of a token, or the length of a token with a percentage.", "img1_path: str or list of str\n    img2_path: str or list of str", "'Convert a string to a Python boolean value.", "start wormhole server", "Check if the layout has been generated.", "", "Returns:\n        [type]: [description]", "", "Get the page title.", "Updates the block with the given uuid with the given data.", "", ", n: int] -> TimeSeries:\n\n    Predict the next n time steps.\n\n    Args:\n        n: The number of time steps to predict.\n\n    Returns:\n        The predicted time series.", "@param session: session object\n    @param class_name: downloader class name\n    @param args: arguments\n    @return: downloader instance", "This function takes in a text and returns a list of all the links found in the text.", "\u83b7\u53d6\u4e2d\u6587\u540d\u79f0\u4e0e\u82f1\u6587\u540d\u79f0\u7684\u5bf9\u5e94\u5173\u7cfb\n    :return:", "Returns the date created for the document. \n    \n    :param document: The document to get the date created from.\n    :return: The date created for the document.", "v", "@param ago: the number of elements to return before the current element\n    @param size: the number of elements to return after the current element\n    @return: the list of elements", "Constructs a ResNet-18 model.\n    \n    Args:\n        weights (ResNet18_Weights): The weights to load.\n        progress (bool): If True, displays a progress bar of the download to stderr.\n        **kwargs: Keyword arguments for the model constructor.\n\n    Returns:\n        ResNet: A ResNet-18 model.", "Set the initial value of the ODE system.\n    \n    Parameters\n    ----------\n    y : array_like\n        Initial values of the ODE system.\n    t : float, optional\n        Initial time.\n    \n    Returns\n    -------\n    self : object\n        Reference to self.", "Return an iterator over the table's keys.", "(Device) -> None", "_summary_\n\n    Args:\n        box (_type_): _description_\n        containing_block (_type_, optional): _description_. Defaults to None.\n\n    Raises:\n        TypeError: _description_\n\n    Returns:\n        _type_: _description_", "Delete a document from the index.\n    \n    Args:\n        doc_id (str): The document ID to delete.\n        **delete_kwargs (Any): Additional keyword arguments to pass to the delete method.", "", "(bool)\n\n    Checks if the given environment variable is set.\n\n    Args:\n        env_var (Union[ConfigKey, str]): The environment variable to check.\n\n    Returns:\n        bool: True if the environment variable is set, False otherwise.", "", "Cleans a sentence by removing punctuation, whitespace, and any \n    characters that are not in the ignore_map. \n    \n    Args:\n      sentence: The sentence to clean.\n      ignore_map: A dictionary of characters to ignore.\n      bpe_delimiter: A delimiter to use for BPE.\n    \n    Returns:\n      The cleaned sentence.", "Returns true if the request was successful", "Returns XML body for resource record.", "This function is called by NNI framework to get the next trial parameters.\n    \n    :return: a dictionary of trial parameters", "ResNet101 model from\n        `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        num_classes (int): Number of classes to classify images into\n        in_chans (int): Number of input channels\n        stem_width (int): Width of conv layers in first convolution block\n        deep_stem (bool): If True, use a conv layer as the first convolution block\n        avg_down (bool): If True, use average pooling instead of max pooling", "Remove the batch from the layout.\n    \n    :param layout: str\n    :return: str", "Remove stopwords from the sentences and store the results in the dataframe.\n    \n    Args:\n        df (pandas.DataFrame): The dataframe containing the sentences.\n        sentence_cols (list): The columns containing the sentences.\n        stop_cols (list): The columns to store the results.\n    \n    Returns:\n        pandas.DataFrame: The dataframe with the results.", "Test to delete a dataset with success", "Check if a path is included in the include path.", "Deprecated method. Please use `airflow.providers.google.cloud.hooks.bigquery.BigQueryHook.patch_table`", ".", "Checks if the path is a python file.", "Returns the docstring of the object.", "Function to handle timeout signal", ".\n    Setup a task.", "for a given layer, initialize the weights and biases.", "Get all rules from the rules directory", "(self, args=(), kwargs=None, rtn='')", "Send a static file.", "This function is used to compute the ratio of the image and resize it to the model size.\n    \n    Parameters:\n    img (numpy.ndarray): Input image.\n    width (int): Width of the image.\n    height (int): Height of the image.\n    model_height (int): Height of the model.\n    \n    Returns:\n    numpy.ndarray: Resized image.\n    float: Ratio of the image.", "Train the model.", "Set the error handler for the given error code. \n    \n    :param code: The error code to set the handler for.\n    :param handler: The error handler to set.", "This method is a wrapper around the `create_sql_agent` method of the `sql_agent` package.\n    It takes in a dataframe and a dictionary of arguments, and returns a SQL agent.", "Execute Agent", ".", "Saves the model to disk. \n    \n    Args:\n        model_file: The path to the file where the model will be saved.", "Unflatten the dataframe\n    \n    Parameters\n    ----------\n    df : DataFrame\n        The dataframe to be unflattened\n    \n    Returns\n    -------\n    DataFrame\n        The unflattened dataframe", "\u5c06\u56fe\u50cf\u6587\u4ef6\u8f6c\u5316\u4e3a\u5411\u91cf\u6587\u4ef6\n    :param filename:\n    :return:", "to list", "'\n    Returns a string representation of the object.", ".ln()", "_summary_", ".\n    Args:\n        settings (object): settings object\n    Returns:\n        object: reader object", "Returns the coordinates of the element in the image.", "@param port: int\n    @return: boolean", "", "Parameters\n    ----------\n    kernel_type : str\n        The kernel type to use.\n    dim : int\n        The dimensionality of the problem.\n    lamb : float\n        The regularization parameter.\n    rho : float\n        The regularization parameter.\n    eta : float\n        The learning rate.\n    p : int\n        The power parameter for the polynomial kernel.\n    gamma : float\n        The gamma parameter for the exponential kernel.\n    T : int\n        The number of epochs.", ".\n    :param id:\n    :param first_line:\n    :return:", "", "Returns the year in the format YY.\n    \n    Parameters\n    ----------\n    year : int\n        The year to be formatted.\n\n    Returns\n    -------\n    str\n        The year in the format YY.", "Create a temporary directory with a prefix and suffix.\n        The directory is removed when the process exits.", ".\n    Returns:\n        List[str]: List of input keys.", "@author: zhaoyue", "_set_input_type_impl(self, instance, name: str, type: Any, default: Any = _empty)\n    \n    Sets the type of an input socket.\n    \n    :param instance: The instance to set the type on.\n    :param name: The name of the socket to set the type for.\n    :param type: The type of the socket.\n    :param default: The default value of the socket.", "Returns the offset of the original data of the object.", ".\n    Update the title of the sheet.\n\n    Args:\n        title (str): The new title of the sheet.\n\n    Returns:\n        dict: The response from the Google Sheets API.", "Load the model parameters from a checkpoint file. \n    \n    Args:\n      model: the model to be loaded\n      ckpt: the checkpoint file to load from\n      session: the session to use\n      name: the name of the model", "_log_it_wrapper", "Returns:\n        BatchDataType:", ".\n    Args:\n        current_input (Any): The input to be remapped.\n        new_input (Any): The new input to replace the current input.", "Ignore collect if the module name contains a version number.", ".\n\n    Args:\n        action (str): action to estimate outcome for\n        X_train (pd.DataFrame): training data\n        outcome (pd.Series): outcome series\n        **func_args: additional arguments to pass to estimator\n\n    Returns:\n        estimator: fitted estimator", ":param api_port: port for the API\n    :param address: address to bind to\n    :return:", "A robust version of os.path.join() that handles unicode strings.\n    \n    Args:\n        path (str): The path to join.\n        *paths (str): The paths to join.\n    \n    Returns:\n        str: The joined path.\n    \n    Raises:\n        UnicodeDecodeError: If the path or any of the paths are not valid unicode strings.", "'Copy the source file to the destination file.", "for difflib.Differ.", "Get the comment option from the media object.", "for the input of the network", ".\n    Clear the specified window.", "Args:\n        boxes1 (tensor): shape(n, 4)\n        boxes2 (tensor): shape(k, 4)\n    Returns:\n        tensor: shape(n, k)", "'Return a human-readable representation of the object.", ".\n\n    Convert the data in this object to a new object of the same type.\n\n    :param convert_dates: Convert dates to strings.\n    :param convert_numeric: Convert numeric data to strings.\n    :param copy: Copy the data.\n    :return: A new object of the same type.", "Remove a bookmark from the list. \n    \n    :param key: The key of the bookmark to remove.\n    :type key: str", "_add_entry_from_context(self, page, content, toc)\n\n    Adds a new entry to the database based on the page's title,\n    content and TOC.", "Back-adjusted data", "gnu_hash(s) -> int\n    \n    Hash function for strings.\n    \n    Based on http://www.cse.yorku.ca/~oz/hash.html", "(self, transaction):\n        Calculate the cost of the transaction.", ".", ":param signed: \n    :param addr: \n    :param length: \n    :param label:", "(self, X, training=True)\n\n    Args:\n        X (np.ndarray): Input data.\n        training (bool, optional): Whether the model is in training mode. Defaults to True.\n\n    Returns:\n        np.ndarray: Output of the model.", "Handle directory keywords. \n    \n    Args:\n        keywords (dict): Dictionary containing the keywords.", "\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 settings.json", "Update the number of computed tokens in the sequences.\n    \n    Args:\n        num_new_computed_tokens: The number of new computed tokens to update.\n    \n    Returns:\n        None", "(self, item_type, rec_src, sr, link, comment=None)\n\n    Initializes the class.\n\n    Parameters:\n        item_type (str): The type of item.\n        rec_src (str): The source of the record.\n        sr (str): The source of the record.\n        link (str): The link to the item.\n        comment (str): The comment to the item.", "_wrapper_app_errorhandler_decorator", "on(self, image) -> KeypointsOnImage\n        Return keypoints on image.\n\n        Parameters\n        ----------\n        image : np.ndarray or KeypointsOnImage\n            Image to draw keypoints on.\n\n        Returns\n        -------\n        KeypointsOnImage\n            Keypoints on image.", "_summary_", ".", "@param event:", "", ".", "(str) -> str\n\n    Return the string representation of the object.", "Save the current state of the form.", "_handle_error\n    Handles error messages.\n\n    :param message: the error message\n    :param data: the data that was sent to elastalert\n    :return: None", ".\n    Test that a custom scorer works.", "Returns a sample from the Q-distribution.\n    \n    Args:\n        x_start (torch.Tensor): The starting point of the sample.\n        t (int): The time step of the sample.\n        noise (torch.Tensor, optional): The noise used to sample from the Q-distribution. Defaults to None.\n    \n    Returns:\n        torch.Tensor: The sample from the Q-distribution.", ".add_argument(self, *args, **kwargs):", "Render a table as JSON. \n    \n    Parameters\n    ----------\n    outfd : file-like object\n        The output file descriptor.\n    data : Table\n        The table to render.", "Save the model to a directory.\n    \n    Args:\n        trainer: transformers.Trainer\n        output_dir: str", "Filter out tokens that are not meaningful for the tree", "Convert text to phonemes using the specified language.\n    \n    Parameters:\n    text (str): The input text to be converted.\n    language (str): The language of the input text.\n    \n    Returns:\n    str: The phonemes of the input text in the specified language.\n    \n    Raises:\n    ValueError: If the specified language is not supported.", "This function is a decorator that logs the result of a call to a function\n    that has a before_sleep_action.\n    \n    The function is passed the logger and log_level as arguments.\n    \n    The function returns a decorator that takes a function as an argument.\n    \n    The decorator is used to log the result of the function.\n    \n    The function takes a call_state as an argument.\n    \n    The function returns a function that takes a call_state as an argument.\n    \n    The function is called before_sleep_log.\n    \n    The function returns a function that takes a call_state as an argument.\n    \n    The function is called before_sleep_log.\n    \n    The function returns a function that takes a call_state as an argument.\n    \n    The function is called before_sleep_log.\n    \n    The function returns a function that takes a call_state as an argument.\n    \n    The function is called before_sleep_log.\n    \n    The function returns a function that takes a call_state as an argument.\n    \n    The function is called before_sleep", ".sync_with_dict(self, dict_agent)\n\n    Synchronize the dictionary with the dict_agent.", "Tests that a package that emits unicode fails to install.", "Returns the captions for the video. \n    \n    @return: A list of Caption objects.", ".\n    Plotly figures.\n\n    Parameters\n    ----------\n    figure : dict\n        plotly figure to plot\n    win : int\n        Window ID to plot in\n    env : int\n        Environment ID to plot in\n\n    Returns\n    -------\n    dict\n        Response from server", ".", "Checks if the model has finished training.\n    \n    Args:\n        token_ids (torch.Tensor): The token IDs to be used for prediction.\n    \n    Returns:\n        torch.Tensor: A tensor with a boolean value indicating whether the model has finished training.", "_summary_\n    \u83b7\u53d6\u5238\u5546\u7684\u5151\u6362\u5238\n    :param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :return:", "Read configuration file and return a Dejavu object", "Check if package is installed by checking if it can be imported with R.\n    \n    Parameters\n    ----------\n    package_helper : CondaPackageHelper\n        The helper to use for checking the package.\n    package : str\n        The package to check.\n    \n    Returns\n    -------\n    int\n        1 if the package is installed, 0 otherwise.", "Returns the embedding length of the model.", "Return the full qualified name of the file.", "Parse the source code and return a parse tree.", ".\n    Sets the volume of the mixer.\n\n    Args:\n        volume (int): The volume to set.\n\n    Returns:\n        bool: True if the volume was set successfully, False otherwise.", ":type val: int\n    :rtype: int", "Stop all jobs.", ".", "Override env", "Remove SQL from the question", "Test that the repo is valid and the attic key is valid.", "Return the expected direction of the next move.", ".\n    Returns:\n        str: the string representation of the tree.", "Return a FieldMapping object for the given fieldname.\n    \n    :param fieldname: the name of the field to get the mapping for\n    :type fieldname: str\n    :return: a FieldMapping object\n    :rtype: FieldMapping", "Flush all the logs that are older than the time interval of the rate limit.", "_calculate_wer\n    Calculate WER.\n    Args:\n        seqs_hat (list): list of predicted sequences.\n        seqs_true (list): list of true sequences.\n    Returns:\n        float: WER.", "Return a list of categories for the given fileids.", "# Distributed training: \n    # https://pytorch.org/docs/stable/distributed.html\n    # https://github.com/pytorch/pytorch/issues/13373\n    # https://github.com/pytorch/pytorch/issues/13493\n    # https://github.com/pytorch/pytorch/issues/13605\n    # https://github.com/pytorch/pytorch/issues/13936\n    # https://github.com/pytorch/pytorch/issues/14137\n    # https://github.com/pytorch/pytorch/issues/14232\n    # https://github.com/pytorch/pytorch/issues/14295\n    # https://github.com/pytorch/pytorch/issues/14324\n    # https://github.com/pytorch/pytorch/issues/14409\n    # https://github.com/pytorch/pytorch/issues/14529\n    # https://github.com/pytorch/pytorch/issues/14612\n    # https://github.com/pytorch/pytorch", "Adds this object to the given group.", "for the forward pass", "x is the same as y", "Returns the texture of the object.", "Start a process and return the PID.\n    \n    :param executable: the executable to start\n    :param args: arguments to pass to the executable\n    :return: the PID of the process", "Return a tuple of (is_container, repr(t))", "_execute_job", "Convert a history of messages to a list of messages.\n    \n    Args:\n        history: a list of messages, where each message is a dictionary with the following keys:\n            - \"role\": the role of the message, either \"system\", \"user\", or \"assistant\"\n            - \"content\": the content of the message\n            - \"name\": the name of the user, if the message is from a user\n            - \"function_call\": the function call of the message, if the message is a function call\n        is_demonstration: whether the history is from a demonstration\n        \n    Returns:\n        a list of messages, where each message is a dictionary with the following keys:\n            - \"role\": the role of the message, either \"system\", \"user\", or \"assistant\"\n            - \"content\": the content of the message\n            - \"name\": the name of the user, if the message is from a user\n            - \"function_call\": the function call of the message, if the message is a function call", "Returns all the unique sender_id values.", "x: [batch_size, reg_max + 1]", "(self, frames)\n\n    Creates a new Frame object.\n\n    :param frames: A list of frames.", "Test that scan_file_for_barcodes returns a list of barcodes", "Args:\n        img (Tensor): Images of size (N, C, H, W).\n    Returns:\n        Tensor: Flips of size (N, C, H, W).", ".\n    Returns a number of tokens used by `messages`.", "A decorator that creates a single instance of a class.", ".", "Generate Redis key for ratelimit.\n    \n    Args:\n        user (User): User object.\n        domain (str): Domain name.\n        \n    Returns:\n        list: Redis key list.", "_finalize(self, **kwargs)\n\n    Finalize the Field instance.\n\n    Args:\n        **kwargs (dict): Additional keyword arguments.", ".\n    Generates sample from latent space.\n    :param num_samples:\n    :param current_device:\n    :return:", ".", "Mount point for the server.", "::type self: object", "_test_create_valid_env", "(fmt_streams)", "Save the model instance.", ".", "This is a hook that is called after the model is saved. \n    It will look up all pending lookups and call the operation.", "", "Generate a response to a given question.\n    \n    Args:\n        input (str): The input question.\n        output (List[str]): The output response.\n        node_config (Optional[dict]): Configuration for the node.\n        node_name (str): Name of the node.", "Return the value associated with the given key.\n    If the key is not found, return the default value.", "", ".\n    Args:\n        x: Tensor, shape [*, audio_len, channels]\n    Returns:\n        same shape as x", "Get client token for a payment gateway\n    \n    Args:\n        gateway_name (str): Name of the payment gateway\n        token_config (TokenConfig, optional): Token config. Defaults to None.\n    \n    Returns:\n        str: Client token", "Extracts the headers from a response.\n    \n    :param headers: The headers of the response.\n    :type headers: str\n    :return: A dictionary of the headers.\n    :rtype: dict", ".\n    Returns:\n        list: A list of Parameter objects.", "_authorize_redirect(self, redirect_uri=None, client_id=None,\n                           client_secret=None, extra_params=None )\n\n    Authorize the user with the OAuth2 protocol.\n\n    :param redirect_uri: The redirect URI to which the user will be\n                         redirected after authorization.\n    :param client_id: The OAuth2 client ID.\n    :param client_secret: The OAuth2 client secret.\n    :param extra_params: Any additional parameters to pass to the\n                         authorization endpoint.\n    :return: None", "", "Generates text using the model", "Check if traceback is available", ":param assets: \n    :param account_policy: \n    :param account_prefer: \n    :param host_callback:", "Forward function.\n    \n    Arguments:\n        x {tensor} -- Input tensor.\n    \n    Returns:\n        tuple -- A tuple of the output tensors for each stage.", "Write changes to [success]pyproject.toml[/].\n    \n    Args:\n        show_message (bool, optional): Whether to show a message. Defaults to True.", ":param mu: Mean of the normal distribution\n    :param sigma: Standard deviation of the normal distribution\n    :param batch_size: Batch size\n    :param args: Arguments for the parent class\n    :param kwargs: Keyword arguments for the parent class", "Sets the active server to the given index. \n    \n    :param index: The index of the server to be set as active.", ".\n    Get a summary row for a package object.\n\n    :param pkgname: The name of the package.\n    :param obj: The package object.\n    :return: A tuple containing the display name, signature, summary, and link name.", "Returns the word embeddings weight matrix", "Computes the power spectral density of the input.", ".", ".\n    Returns the offset of the given key in the chunk.", ":param input: List[str]\n    :param output: List[str]\n    :param node_config: dict\n    :param node_name: str", "_summary_\n    Set the model to use for the model.\n    Args:\n        model (str): The model to use.", "_build_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch_arch", "Returns the maximum number of tokens that a model can handle.", "()", "Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to `commit` and `rollback` will not affect the database.", "\u83b7\u53d6\u7528\u6237ID\n    \n    :param msg: \u6d88\u606f\u5bf9\u8c61\n    :param max_len: \u6700\u5927\u957f\u5ea6\n    :param re_sub: \u8fc7\u6ee4\u5b57\u7b26\n    :return: \u7528\u6237ID", "Intercept the python command and add coverage.py to the environment.", ".\n    Initialize the criterion.", "Import a pretrained model.\n    \n    Args:\n        pretrained: pretrained model name.\n        tag: tag of the model.\n        *args: arguments for the model.\n        tokenizer_kwds: keyword arguments for the tokenizer.\n        **attrs: other arguments for the model.\n    \n    Returns:\n        A bentoml.Model object.", ".\n    Returns\n    -------\n    bool\n        True if the instance is managed by the NM.", "", ".", "(DGLGraph)\n\n    Returns a subgraph of the graph with the given nodes.\n\n    Parameters\n    ----------\n    nodes : iterable of int\n        The nodes of the subgraph.\n\n    Returns\n    -------\n    DGLSubGraph\n        A subgraph of the graph.", ".\n    Adds a new key-value pair to the dictionary.\n\n    Args:\n        key (str): The key to add.\n        value (str): The value to add.\n\n    Returns:\n        None", ".get_dictionary_values(self, dictionary)\n\n    Returns a list of dictionary values.", "Return a dict representation of the template.", "Returns a set of all references in the parameters.", "", ":param x:\n    :param emb:\n    :return:", "for each trial, return the index of the smallest value", "_add_to_parser\n    Adds a command line argument to the parser", ".", "_get_assumed_role_arn()\n\n    Gets the ARN of the assumed role.\n\n    Returns:\n        str: The ARN of the assumed role.", "", "Delete a module from the pattern.\n    \n    :param module_name: The module name.", "_get_header_by_wsgi_name(self, name):\n\n        Returns the header value of the given name.", "_get_updated_state\n    \n    :param current_stream_state:\n    :param latest_record:\n    :return:", ".\n    Returns True if the token has a default value.", ".", "(self, other, bindings) -> BindingDict", "_start_streaming\n\n    Starts a streaming connection to Twitter.\n\n    :param callback: A function that takes a tweet as a parameter and returns a boolean.\n    :return:", "Forward pass of the model.\n    \n    Args:\n        x (Tensor): Input tensor of shape (batch_size, 4).\n\n    Returns:\n        Tensor: Output tensor of shape (batch_size, 4).", "Pop element from the end of the list.", "Return the page mode.", ".", "Return a dictionary with the status of the API.", "_run(apps: t.List[t.Union[Gui, Rest]], **kwargs) -> t.Optional[t.Union[Gui, Rest]]:\n\n    Run the apps.\n\n    Args:\n        apps (t.List[t.Union[Gui, Rest]]): The apps to run.\n        **kwargs: The kwargs to pass to the apps.\n\n    Returns:\n        t.Optional[t.Union[Gui, Rest]]: The app that was run.", "Check if the instance is ready to be used.", "_summary_\n    Build the architecture", "Function to generate a band matrix with the same size as the input matrix", ".\n    Returns the center of the frame.", ".\n    Sets the DNS challenge for the domain.\n\n    :param zone_id: The ID of the zone.\n    :param domain: The domain to set the challenge for.\n    :param txt_challenge: The challenge to set.\n    :return: The response from the Route53 API.", "Checks if an attribute has nested attributes.\n\n    Args:\n        attribute_key (str): The key of the attribute to check.\n        attributes (Dict[str, Any]): The attributes to check.\n\n    Returns:\n        bool: True if the attribute has nested attributes, False otherwise.", "Returns the max length of the sequences in the dataset.", ".\n    Args:\n        content (str): The content of the message.\n        **kwargs: Additional keyword arguments for the superclass.", "", "Gets historic OHLCV data from Binance. \n    \n    Args:\n        pair: The symbol of the pair to get data for.\n        timeframe: The timeframe to get data for.\n        since_ms: The timestamp in milliseconds to get data from.\n        is_new_pair: Whether to fetch new data for the pair.\n    \n    Returns:\n        A list of OHLCV data for the pair.", "_test_get_then_redirect_follow_redirect_", "(Command)\n    Decorator for adding commands to the bot.", ".\n\n    Parameters\n    ----------\n    cfg : dict\n        Configuration dictionary.\n\n    Returns\n    -------\n    int\n        The number of epochs.", "untar a tar file\n    \n    Args:\n        file_path (str): the path of the tar file\n        extract_folder (str, optional): the path of the folder to extract the tar file to. Defaults to None.\n    \n    Returns:\n        None", "(self):", "refresh themes", "Creates a file at the given path.\n    \n    If the path does not exist, it will create any necessary directories.\n    \n    Args:\n        path (str): The path to the file to create.\n        create_dirs (bool): Whether to create any necessary directories along the path.", "(class)\n    Initialize the model.", ".", "Find the center of an arc.", "\"", ".\n\n    Args:\n        image_path (str): Path to the image.\n\n    Returns:\n        Image.Image: The processed image.", ".", "Shutdown the global client.", "Returns the active server.", "(self,\n        num_samples:int,\n        current_device: int) -> Tensor:", "Add prefetch_related to the queryset.", "", ".\n    Args:\n        terrain_id (int): The terrain id.\n        full_data_set (GenieObjectContainer): The full data set.\n        members (dict[str, ValueMember], optional): The members. Defaults to None.", ",\n    :param message: Message to display while loading.\n    :param delay: Delay between spinner characters.\n    :param plain_output: Whether to output the loading message without the spinner.", "(self, init_data_by_df, dtype='stock_day', if_fq='bfq')", "", "(self) -> list[dict[str, Any]]:", ".\n\n    Args:\n        X: [n_samples, n_features]\n    Returns:\n        [n_samples, n_target]", "Returns true if the element is floated.", "Patch the client's chat completion method to wrap the response.\n    \n    Args:\n        client (Union[OpenAI, AsyncOpenAI]): The OpenAI client to patch.\n        mode (Mode, optional): The mode to use for the patch. Defaults to Mode.FUNCTIONS.\n    \n    Returns:\n        Union[OpenAI, AsyncOpenAI]: The patched client.", ".", "Apply gradients to variables.\n\n    Args:\n      grads_and_vars: list of (gradient, variable) tuples.\n      global_step: int or None.\n      name: str or None.\n\n    Returns:\n      list of (gradient, variable) tuples.", ".\n    Returns:\n        Dict[str, Dict]:", "for sanity checking of the object", "Returns the absolute path to a file or directory relative to the site root.\n    \n    @param joins: List of relative path components.\n    @return: Absolute path to the file or directory.", "(self) -> None:", "", ".", "Args:\n        config (InitConfig, optional): Configuration for the instance. Defaults to None.", "Initialize the application", "to be called from the expert device.", "Get the list of available packages.\n\n    Returns:\n        dict[str, set[str]]: A dictionary mapping package names to sets of available versions.", "_set_tag: set tag for cipher context", "_summary_\n    \n    Args:\n        cls (_type_): _description_\n        file_path (Union[Path, str]): _description_\n    \n    Returns:\n        _type_: _description_", ".\n    Loads the model and config file for the model.", ".\n    Check if an email address is suspicious.", "Set speech for the current message.\n    \n    Args:\n        speech (str): The speech to be set.\n        speech_type (str, optional): The type of speech. Defaults to \"plain\".\n        extra_data (Any, optional): Extra data to be set with the speech. Defaults to None.", "_summary_\n\n    Args:\n        self (type): _description_\n        *args (type): _description_\n        **kwargs (type): _description_", ".\n    Loads the index file for the given version.\n\n    :param version_string: The version of the index to load.\n    :type version_string: str\n\n    :returns: The contents of the index file.\n    :rtype: str\n\n    :raises IndexLoadError: If the index file cannot be loaded.", "Check if a package is excluded.\n\n    Args:\n        package (str): The package name to check.\n\n    Returns:\n        bool: True if the package is excluded, False otherwise.", "Create a domain key", "", ".\n    Returns:\n        bool: True if at start, else False.", "Like a given image from a given url", "Sigmoid function", "Get timeline data for a given doctype and name.", ".", "_queryset method", "\"", ".\n\n    >>> lexify()\n    '????'\n    >>> lexify('abc')\n    'abc'\n    >>> lexify('a?b?c?')\n    'ab?c?'\n    >>> lexify('a?b?c?d?e?f?')\n    'ab?c?d?e?f?'\n    >>> lexify('a?b?c?d?e?f?g?')\n    'ab?c?d?e?f?g?'\n    >>> lexify('a?b?c?d?e?f?g?h?')\n    'ab?c?d?e?f?g?h?'\n    >>> lexify('a?b?c?d?e?f?g?h?i?')\n    'ab?c?d?e?f?g?h?i?'\n    >>> lexify('a?b?c?d?e?f?g?h?i?j?')\n    'ab?c?d?e?f?g?h?i?j?'\n    >>> lexify('a?b?c?d?e?f", "Pause playback.", "Checks if action is a standard action. \n    \n    :param action: the action to check\n    :type action: :class:`Action`\n    :returns: True if action is standard, False otherwise\n    :rtype: bool", ".\n    Gets the pipeline definition from the pipeline manager.\n\n    :param pipeline_name: The name of the pipeline to get the definition for.\n    :type pipeline_name: str\n\n    :return: The pipeline definition.\n    :rtype: PipelineDefinition", "_init__", "(DependencyType) -> None:\n\n    Sets the upstream nodes for the dependency.\n\n    Args:\n        nodes (DependencyType): The upstream nodes.\n\n    Returns:\n        None: This method does not return a value.", "Format the dataframe values to a list of lists.\n    \n    Args:\n        value (Type): The dataframe to be formatted.\n\n    Returns:\n        List[Any]: A list of lists, where each inner list represents a row in the dataframe.", "Build a sdist in the given directory. \n    \n    Args:\n        sdist_directory: The directory in which to build the sdist.\n        config_settings: A dictionary of settings to override the defaults.\n    \n    Returns:\n        The path to the built sdist.", "(int) -> List[int]:\n\n    Return the candidates for the change points.\n\n    Args:\n        n_samples (int): The number of samples.\n        change_points (List[int]): The change points.\n\n    Returns:\n        List[int]: The candidates for the change points.", "Returns the path to the dropbox home directory.", "Returns the dependencies required to build a wheel.\n\n    Args:\n        config_settings (dict): A dictionary of configuration settings.\n\n    Returns:\n        list: A list of dependencies required to build a wheel.", "Draw num_samples samples from the distribution and return them as a numpy array.\n\n    Args:\n        num_samples (int): The number of samples to draw.\n\n    Returns:\n        np.ndarray: An array of shape (num_samples, 2) containing the x and y coordinates of the samples.", "Test that a notebook can be written and read back.", "Send a message to the stream. \n    \n    Parameters\n    ----------\n    kwargs : dict\n        Dictionary of arguments to send.\n    \n    Yields\n    ------\n    dict\n        Response from the stream.", ".\n    Set the maximum order size for a given security.\n\n    :param sid: The security ID\n    :param max_shares: The maximum number of shares\n    :param max_notional: The maximum notional", "_init_", ".compare(self, statement, other_statement) -> int\n    Compares two statements and returns the similarity score.\n\n    :param statement: The statement to compare.\n    :param other_statement: The other statement to compare.\n    :return: The similarity score between the two statements.", "(optional) Initialize a Result object with an exception.", ".", "Returns the number of trainable variables in the graph.\n    \n    Args:\n        graph (tf.Graph): The graph to get the number of trainable variables from.\n    \n    Returns:\n        int: The number of trainable variables in the graph.", "(ctx) -> str", "(self) -> None:", "_summary_\n    Cancels a job\n    \n    Args:\n        job (job): job to cancel\n    \n    Returns:\n        bool: True if job cancelled, False otherwise", "Returns the minimum length of the tensors. \n    \n    Args:\n        self (MinLen): An instance of the class.\n    \n    Returns:\n        int: The minimum length of the tensors.", "_summary_\n\n    Parameters\n    ----------\n    notebook : Notebook\n\n    Returns\n    -------\n    metadata : dict\n        The filtered notebook metadata.", "Parse a range of numbers.", ".\n    Parameters\n    ----------\n    time_func : function\n        A function that takes a time_in_seconds and returns a time_in_seconds.\n    apply_to : list, optional\n        A list of attributes to apply the function to. The default is ['mask', 'audio'].\n    keep_duration : bool, optional\n        If True, the duration attribute will be set to the new duration. The default is False.\n\n    Returns\n    -------\n    None.", "Initializes a population with random values.\n    \n    Parameters\n    ----------\n    None\n    \n    Returns\n    -------\n    None", ".\n    Transform sparse matrix X into a list of terms.\n\n    Parameters\n    ----------\n    X : scipy.sparse.coo_matrix\n        Sparse matrix.\n\n    Returns\n    -------\n    list\n        List of terms.", "_to_params_str_\n\n    Returns:\n        str: _description_", "login to nijie.info\n    :param email:\n    :param password:\n    :return:", "_summary_\n\n    Returns:", "_docstring_", "Returns the absolute url of the current page", "Restart the wormhole server with the given configuration.", ".", "Decode the mulaw encoded signal.\n    \n    Parameters\n    ----------\n    wav : array_like\n        The encoded signal.\n    qc : int\n        The quantization code.\n    \n    Returns\n    -------\n    x : ndarray\n        The decoded signal.", ",\n    Args:\n      data_dir: Data directory.\n    Returns:\n      list: List of `InputExample`s for prediction.", ".", "Args:\n        num_top_classes (int, optional): Defaults to None.\n        type (str, optional): Defaults to \"auto\".\n        label (Optional[str], optional): Defaults to None.", "Return the next row of a result set as a dictionary.", "Decorator for registering a route with the router.", "Execute a command and return the results.\n\n    :param command: The command to execute\n    :param args: The arguments to pass to the command\n    :param env_vars: A dictionary of environment variables to set\n    :param shim: A shim to use for the command\n    :return: A tuple of (return code, stdout, stderr)", "Initialize the engine\n\n    Args:\n        shellClass (class): Class to use as shell\n        mpi (mpi4py.MPI): MPI communicator", ".\n    Test that two connections are not the same connection.", ".", "\u83b7\u53d6\u4e58\u5ba2\u7684\u7968\u79cd\u5b57\u7b26\u4e32\n    :param set_type: \n    :return:", "_summary_\n\n    Args:\n        name (str): _description_\n        elem_type (OptionalProto.DataType): _description_\n        value (Optional[Any]): _description_\n\n    Returns:\n        OptionalProto: _description_", ".memo_gc = True if memo is a garbage collected object.", "@brief: \n        \n    @param: \n        \n    @return: \n        \n    @note: \n        \n    @author: \n        \n    @date:", "", "to return a copy of the HeatmapsOnImage object.", "Returns the help string for the command.", "Find the first node containing the given value\n    \n    :param value: The value to search for\n    :return: The node containing the value, or None if not found", ".\n\n    :param args:\n    :param config:\n    :return:", ".", "Export journal to file or directory.\n    \n    :param cls: class\n    :param journal: journal\n    :param output: output file or directory\n    :return: True if successful", "Convert the model instance to a dictionary.\n    \n    Args:\n        model (str): The name of the model.\n        dimensions (int): The number of dimensions in the model.\n        organization (str): The name of the organization.\n        api_base_url (str): The base URL of the API.\n        prefix (str): The prefix to add to the model name.\n        suffix (str): The suffix to add to the model name.\n        batch_size (int): The batch size to use when generating embeddings.\n        progress_bar (bool): Whether to display a progress bar.\n        meta_fields_to_embed (List[str]): The list of meta fields to embed.\n        embedding_separator (str): The separator to use when embedding meta fields.\n        api_key (Dict[str, str]): The API key.\n\n    Returns:\n        Dict[str, Any]: The dictionary representation of the model.", "::return::str", "for each key, value in input_dict, call resolver_method on value and assign result to input_dict[key]", ".\n    Checks whether the current board is a valid solution.", "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_", "", ".\n    Convert to CSR format.\n\n    Parameters\n    ----------\n    copy : bool, optional\n        If True, a copy of the CSC matrix is created.\n\n    Returns\n    -------\n    csr_matrix\n        CSR matrix.\n\n    Notes\n    -----\n    This method is a wrapper around the cusparse.csc2csr function.\n\n    Examples\n    --------\n    >>> from scipy.sparse import csr_matrix\n    >>> from scipy.sparse import csc_matrix\n    >>> from scipy.sparse.linalg import LinearOperator\n    >>> from scipy.sparse.linalg import spsolve\n    >>> from scipy.sparse.linalg import norm\n    >>> A = csr_matrix(np.random.rand(1000, 1000))\n    >>> A.tocsr()\n    <scipy.sparse.csr.csr_matrix object at 0x7f88f2975590>\n    >>> A.tocsr(copy=True)\n    <scipy.sparse.csr.csr_matrix object at 0x7f88f2975590>\n    >>> A.tocsr(copy", "", "Expand environment variables in a string.\n    \n    Args:\n        val (str): The string to expand environment variables in.\n        env (Mapping[str, str]): A mapping of environment variables to their values.\n        fallback_to_os_env (bool): Whether to fallback to os.environ if the environment variable is not found in env.\n    \n    Returns:\n        str: The expanded string.", "Fix an ARN to a canonical form.", "Creates a help command for the current CLI.\n    \n    :return: The help command.", ".\n    .. _`PyQt5 signal/slot`: https://www.riverbankcomputing.com/static/Docs/PyQt5/signals_slots.html", "Prepares an image for blob processing.\n    \n    \n    Args:\n        im: Input image.\n        pixel_means: Mean pixel values of the image.\n        target_size: Size of the image after resizing.\n        max_size: Maximum size of the image after resizing.\n        \n    Returns:\n        im: Resized image.\n        im_scale: Scaling factor for the image.", ":type val: int\n    :rtype: int", "for setting validation method", "", "Get a random delay in seconds between 0.5 and 1.5 seconds.", ".\n\n    See base class for input format", "Returns human readable file size\n    \n    >>> human_bytes(1024)\n    '1.0 KB'\n    >>> human_bytes(1024*1024)\n    '1.0 MB'\n    >>> human_bytes(1024*1024*1024)\n    '1.0 GB'\n    >>> human_bytes(1024*1024*1024*1024)\n    '1.0 TB'\n    >>> human_bytes(1024*1024*1024*1024*1024)\n    '1.0 PB'\n    >>> human_bytes(1024*1024*1024*1024*1024*1024)\n    '1.0 EB'\n    >>> human_bytes(1024*1024*1024*1024*1024*1024*1024)\n    '1.0 ZB'", ".", "_summary_\n\n    Args:\n        text (_type_): _description_\n        batch_size (_type_, optional): _description_. Defaults to 32.\n        as_numpy (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        _type_: _description_", "Parse entities from message_entity_array\n    \n    @param cls: \n    @param message_entity_array: \n    @return:", "Convert bytes to human readable format\n    \n    Args:\n        size (int): Size in bytes\n        suffix (str, optional): Suffix to append to the size. Defaults to 'B'.\n    \n    Returns:\n        str: Human readable size", ":param X:\n    :return:", ", ref):", "Set the output of the node to the given data. \n    \n    Parameters\n    ----------\n    data : list\n        A list of the outputs to set.", "_summary_\n\n    Checks if the python version is correct.\n\n    Args:\n        path (str): The path to the python executable.\n\n    Returns:\n        bool: True if the python version is correct, False otherwise.", "Checks if a type is an async def.", "Return a list of data and a list of booleans.", "Unwatch the channel.", ".\n    Gets the release info for a given package name and version.\n    :param name: The name of the package.\n    :param version: The version of the package.\n    :return: The release info for the package.", "Return the ending note for this note.", "(Generator)", "Description of the class.", "Gets the examples for the dev set.", "Returns a list of providers found on the system.", "", "Returns the value of the given param in the query string of the url.", "", "Update the label map path.\n    \n    Args:\n        configs:\n        label_map_path:", "Load the record from the library.", "check mode", "Create an optional protobuf message with the given name, type, and value.", "", "Generator that yields the entries in the directory.", "_init_", "", "Invokes the callback.", "", "This function removes useless information from the COCO dataset.\n    \n    Args:\n        coco (COCO): COCO dataset.\n    \n    Returns:\n        COCO: COCO dataset without useless information.", "Return True if all events in the event list have succeeded.", "Test broadcasting of array elements", "Get the error text from the last error file.", "Returns a list of the selected options", "@classmethod\n    def validate(cls, fgraph):", ":param tracks: list of tracks\n    :param detections: list of detections\n    :param metric: distance metric\n    :return: cost matrix", "Return a list of strings representing the slots used by this optimizer. \n    \n    This is a list of the names of the variables used by the optimizer to \n    compute the gradient and the loss.\n\n    This is a list of the names of the variables used by the optimizer to \n    compute the gradient and the loss.", "Kill the process.", ".\n    Returns:\n        str: The API version.", "Main function", ".rng()\n    Return a fastmath.random.Random instance.", "_find_by_name", "Test that only the specified commands are run."], [".\n    Save the dataframe to a pickle file.", "Save the model for HF Trainer.\n    \n    Args:\n        trainer (transformers.Trainer): Trainer object.\n        output_dir (str): Output directory.", "Returns\n    -------\n    np.ndarray\n        A 2D boolean mask where `True` indicates that the pixel is a label issue.", ".", "Sets the output keys for each dataset in a list of datasets.\n\n    Args:\n        datasets (list): A list of datasets.\n        output_keys (list): A list of output keys.\n\n    Returns:\n        None", "Print a string to a file.", "Returns an example input, system prompt, and user prompt for the GPT-3 dispatcher.", "Returns true if any preference is enabled.", "Clean up the build directory.", ".\n    Returns the result of the current task.", "Invokes a callback with the given arguments.", "\u83b7\u53d6\u7fa4\u7ec4", "Binary search for the rightmost occurrence of a target element in a sorted array.\n    \n    Args:\n        nums (List[int]): The sorted array.\n        target (int): The target element to search for.\n    \n    Returns:\n        int: The index of the rightmost occurrence of the target element, or -1 if not found.", ".\n    @param pack: pack\n    @return: MappedSearchStrategy", "(self, user):", "fix crontab", ".", "_hook_distutils_path_fix", "()", ".\n    Args:\n        element (dict): Element to check.\n\n    Returns:\n        bool: True if the element matches the regex, False otherwise.", "'Return the challenge for the given realm.'", "", "Convert all attributes of this object to the specified type.\n    \n    Parameters\n    ----------\n    dtype : str, optional\n        The type to convert to.\n    \n    Example\n    -------\n    >>> from pytorch_lightning.utilities import AttributeDict\n    >>> from pytorch_lightning.utilities.attribute_dict import AttributeDict\n    >>> class MyModel(AttributeDict):\n    >>>     def __init__(self):\n    >>>         super().__init__()\n    >>>         self.a = AttributeDict({\"x\": 1, \"y\": 2})\n    >>>         self.b = AttributeDict({\"x\": 3, \"y\": 4})\n    >>>\n    >>> model = MyModel()\n    >>> model.to(dtype=\"float32\")\n    >>> print(model.a.x)  # 1.0\n    >>> print(model.b.x)  # 3.0", "Function to get string input from the user.\n    \n    Parameters\n    ----------\n    prompt : str\n        Prompt to display before the user input.\n    float : bool\n        If True, the input will be converted to a float.\n        \n    Returns\n    -------\n    str\n        User input.", ".", "'run' method of the `Audio` class.\n    \n    Parameters\n    ----------\n    wavsignal : np.ndarray\n        1D NumPy array containing the audio signal.\n    fs : int, optional\n        Sampling frequency of the audio signal. Default is 16000.\n    \n    Returns\n    -------\n    np.ndarray\n        1D NumPy array containing the audio signal after applying the\n        STFT.", "_perform_sanity_check_\n\n    Performs sanity checks on the cache.\n\n    :return: exit code", "(self, value=NAN, size=1)\n\n    Args:\n        value (float): the value to add to the array\n        size (int): the number of values to add to the array\n    \n    Returns:\n        None", "Close the recordio writer.", "\u4e0a\u4f20\u6587\u4ef6\n    :param fileDir: \u6587\u4ef6\u8def\u5f84\n    :param isPicture: \u662f\u5426\u662f\u56fe\u7247\n    :param isVideo: \u662f\u5426\u662f\u89c6\u9891\n    :param toUserName: \u63a5\u6536\u65b9\u5e10\u53f7\uff08\u6536\u5230\u7684OpenID\uff09\n    :param file_: \u6587\u4ef6\n    :param preparedFile: \u51c6\u5907\u597d\u7684\u6587\u4ef6\n    :return:", ".\n    Plot a bar chart with the following x and y:\n    x = {x}\n    y = {y}", "for plotting bar chart", "CLI APP", "", "Sanitize text to remove unnecessary characters and special symbols.\n    Args:\n        text (str): The input text to be sanitized.\n\n    Returns:\n        str: The sanitized text.", ".format_tb()", "Close the file handles.", "Read a file with nbconvert.\n    \n    Parameters\n    ----------\n    nb_file : str\n        File path to the notebook file.\n    format_name : str\n        The format of the notebook file.\n        \n    Returns\n    -------\n    nbconvert.v4.nbformat.NotebookNode\n        The notebook object.", "Check that the exploit is working", "", ".\n    This method is called when the class is instantiated and called with the\n    parent, params, and response.", "Check if the given word is a valid noun synset.\n    \n    Args:\n        synset (Synset): The Synset object to check.\n        word (str): The word to check.\n    \n    Returns:\n        bool: True if the word is a valid noun synset, False otherwise.", "for Python 2", ".\n    Returns:\n        list: A list of microphone names.", ".\n    Returns a string representation of this object.", "Open a file in ASCII mode.", ".\n    Sets the value of a cell in a column.\n    :param col: The column to set the value of.\n    :param row: The row to set the value of.\n    :param val: The value to set the cell to.\n    :raises ValueError: If the value is not the correct type.", "Prepare the message body for SNS.", "Parses data from a file.\n    \n    Args:\n        filename: name of the file to be parsed.\n    \n    Returns:\n        data: list of lists of lists of strings.", "", "Parses a command from a user's input. \n\n    Args:\n\n    input_str (str): The user's input.\n\n    Returns:\n\n    tuple: A tuple containing the command and accompanying text.", ".\n\n    Returns:\n        bool: True if the command has an output.", "", "'test_dmc_hs_fromfile'", "(int, file) -> NoneType\n        \n        Initializes the object.\n\n        Parameters\n        ----------\n        step : int\n            The step at which the trigger is fired.\n        file : file\n            The file to which the output is written.", "", "_summary_", "", "_summary_", ".", ".\n    Initialize SanityConfig.", ".", ".domain", "Watch the snapshot for changes.", "Returns the width of the nested hue_names list.", "Returns a function that wraps the given transformer layer with Flash Attention if `self.use_flash_attn` is True.\n\n    This function is used to wrap the transformer layer with Flash Attention.\n\n    Args:\n        self: The instance of FlashAutoWrapTransformerEncoder.\n\n    Returns:\n        A function that wraps the given transformer layer with Flash Attention.", "rename all files in the work_dir with the old_ext to the new_ext", "Returns the size of the stack", "Read the config file and store it in a dict", "(x) -> exp(x)\n\n    Return the standard exponential function.\n\n    .. math::\n\n        exp(x) = \\int_0^\\infty e^{-t} dt\n\n    .. note::\n\n        This is the inverse of the log function.\n\n    .. warning::\n\n        This is not a valid distribution for large values of x.\n\n    .. seealso::\n\n        :func:`cupy.exp`\n\n    .. versionadded:: 0.10.0", "with empty graph", "Mock function to return a list of integers\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n        c (int): Third integer\n        d (int): Fourth integer\n    \n    Returns:\n        List[int]: List of integers", "_init__\n    \n    :param kwargs:", ".\n    Check if rewrite engine is enabled.\n    :param vhost: Vhost object.\n    :return: True if rewrite engine is enabled.", "Downloads the data files and returns them in a generator.\n    \n    Args:\n        dl_manager (download.DownloadManager): The download manager.\n    \n    Returns:\n        List[nlp.SplitGenerator]: A list of split generators.", "CLI entry point", "Initialize a new session.\n\n    Args:\n        session_id (str): The ID of the session.\n        system_prompt (str, optional): The system prompt for the session. Defaults to None.\n\n    Returns:\n        Session: The initialized session.", "Test that MAE is calculated correctly.", ".\n    Append the given directory to the package path map.\n\n    @param package_name: The package name.\n    @param directory: The directory to append.", ", resp):", ":return: The number of iterations in an epoch", "", "(self, window) -> None:", "Check if the exploit is successful\n    \n    Args:\n        mocked_shell (mocked shell): mocked shell object\n        target (target): target object", "(Callable[[Dict[str, Any], Optional[CallbackManagerForChainRun]]], Dict[str, Any])", "Set the key for the DES algorithm.\n    \n    :param key: The key to use for the DES algorithm.", "_create_vision_transformer(_name, pretrained, **kwargs)\n\n    Args:\n        _name (str): _description_\n        pretrained (bool, optional): _description_. Defaults to False.\n        **kwargs: _description_", "Returns the log probability of a given value.\n    \n    Parameters\n    ----------\n    value : array_like\n        The value to be evaluated.\n    n : int\n        The number of trials.\n    p : array_like\n        The probability of success.\n    \n    Returns\n    -------\n    array_like\n        The log probability of the given value.\n    \n    Raises\n    ------\n    ValueError\n        If p is not a valid probability.", "Callback for the MQTT subscriber", "Get the Dropbox home directory", "Display the latest snapshot.", "Encode a numpy array to JSON\n    \n    Args:\n        obj (np.ndarray): The numpy array to encode\n    \n    Returns:\n        list: A list of the numpy array's elements", ">>> are_sequential_integers(['1', '2', '3'])\n    True\n    >>> are_sequential_integers(['1', '2', '3', '4'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5'])\n    True\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7', '8'])\n    True\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n    False\n    >>> are_sequential_integers(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n    True\n    >>> are_sequential_integers(['1", ".\n    Returns\n    -------\n    list\n        List of Keypoints", "Returns True if the iterator has no more items, False otherwise.", "Gets the max width or height of a token", "Initialize input images.\n    \n    Parameters\n    ----------\n    img1_path : str or list\n        Path to the first image.\n    img2_path : str or None\n        Path to the second image. If None, only one image will be used.\n\n    Returns\n    -------\n    img_list : list\n        List of image paths.\n    bulkProcess : bool\n        True if the input is a list of image paths, False otherwise.", "Converts a string to a python boolean.", "", "Check if the wordcloud has been generated", "Test the legacy pip installation.", "Returns:\n        [type]: [description]", "Convert the given data into a Member.", "Returns the title of the email.", "Put block into a pipeline.\n    \n    Args:\n        pipeline_uuid (str): Pipeline UUID.\n        block_uuid (str): Block UUID.", "Constructor for the Node class.\n    \n    Args:\n        data (any): The data to be stored in the node.\n        next (Node, optional): The next node in the linked list. Defaults to None.", ".\n    Predict the `n`-th time step of the series.\n    :param n: the index of the time step to predict.\n    :return: the predicted time step.", "Returns downloader class. \n    \n    :param session: requests.Session\n    :param class_name: class name\n    :param args: arguments\n    :return: Downloader class", "Returns all the links found in the text.", "\u83b7\u53d6\u8d27\u5e01\u540d\u79f0\u548c\u82f1\u6587\u540d\u79f0\u7684\u6620\u5c04\u5173\u7cfb", "Return the date the document was created as a datetime object.", "v", "Returns the last `size` elements of the queue.", "ResNet18 model from ``torchvision.models``.\n    \n    Args:\n        weights (ResNet18_Weights, optional): The weights to load. Defaults to `ResNet18_Weights.IMAGENET1K_V1`.\n        progress (bool, optional): If ``True``, displays a progress bar of the download to stderr. Defaults to ``True``.\n        \n    Returns:\n        ResNet: ResNet18 model", "Initialise the internal state of the integrator.\n    \n    Parameters\n    ----------\n    y : array_like\n        Initial value of the integrator.\n    t : float, optional\n        Initial time.\n    \n    Returns\n    -------\n    self : odeint object\n        The integrator object.\n    \n    Notes\n    -----\n    The initial value of the integrator is set using a temporary array.", "Returns an iterator over the elements of the set.", "(Device) -> None", "Returns the preferred width of a block or inline box. \n    \n    :param box: The box to check\n    :param containing_block: The containing block of the box\n    \n    :return: The preferred width of the box\n    :rtype: float", "Delete a document from the index.", "'Convert a string to a Python boolean'", ".\n    Check if the environment variable is set.\n\n    :param env_var: The environment variable to check.\n    :type env_var: Union[ConfigKey, str]\n    :return: True if the environment variable is set, False otherwise.\n    :rtype: bool", "", "Cleans a sentence by removing any words that are in the ignore_map.\n    \n    Args:\n        sentence (str): The sentence to clean.\n        ignore_map (dict): A dictionary of words to ignore.\n        bpe_delimiter (str): The delimiter used for BPE.\n    \n    Returns:\n        str: The cleaned sentence.", "Returns true if the test was successful.", "", "This function receives the trial parameters from the NNI.", "Gluon implementation of ResNet101 in Gluon.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        num_classes (int): Number of classes to classify\n        in_chans (int): Number of input channels\n        **kwargs (dict): Keyword arguments for `gluon.model.GluonModule`.\n\n    Returns:\n        GluonModule: ResNet101", "Removes batch from layout\n    \n    Args:\n        layout: str\n    \n    Returns:\n        str", "Removes stopwords from the sentences in the given columns.\n    \n    Args:\n        df (DataFrame): The input DataFrame containing sentences.\n        sentence_cols (list): A list of column names containing sentences.\n        stop_cols (list): A list of column names to store the stopwords-removed sentences.\n        \n    Returns:\n        DataFrame: The input DataFrame with the stopwords-removed sentences stored in the specified columns.", "\"\n\n    ragflow = RAGFlow(API_KEY, HOST_ADDRESS)\n    res = ragflow.create_dataset(\"kb0\")\n    real_dataset_name = res['data']['dataset_name']\n\n    result = ragflow.delete_dataset(real_dataset_name)\n    assert result[\"success\"] is True\n\ndef test_delete_one_dataset_with_error(self):", ".", "_summary_\n\n    Args:\n        *args (_type_): _description_\n        **kwargs: _description_\n\n    Returns:\n        _type_: _description_", ".", "_summary_\n\n    Args:\n        path (_type_): _description_\n\n    Returns:\n        _type_: _description_", "Returns the docstring of the object.", "Timeout signal handler.\n    \n    :param signum: signal number\n    :param frame: signal frame\n    :return: None", ".", "(self, init='glorot_uniform', scale=0.5, bias=1.0, regularizers=None, constraints=None):", "Returns a list of Rule instances.", "", "@brief send static files\n    @param path path to file\n    @return send_from_directory", "Compute the ratio of the image and resize it\n    \n    Parameters\n    ----------\n    img : numpy array\n        Image to resize\n    width : int\n        Width of the image\n    height : int\n        Height of the image\n    model_height : int\n        Height of the model\n    \n    Returns\n    -------\n    img : numpy array\n        Resized image\n    ratio : float\n        Ratio of the image", "Train the classifier.", "Set an error handler for the given error code. \n    \n    The handler should be a callable that takes a single argument, \n    which is the error code. If the handler returns a non-None value, \n    the error is considered handled and the handler is not called. \n    \n    The handler should not raise any exceptions. \n    \n    The handler should not modify the error code. \n    \n    The handler should not modify the error message. \n    \n    The handler should not modify the error traceback. \n    \n    The handler should not modify the error context. \n    \n    The handler should not modify the error stack. \n    \n    The handler should not modify the error stack trace. \n    \n    The handler should not modify the error stack trace. \n    \n    The handler should not modify the error stack trace. \n    \n    The handler should not modify the error stack trace. \n    \n    The handler should not modify the error stack trace. \n    \n    The handler should not modify the error stack trace. \n    \n    The handler should not modify the error stack trace.", "Args:\n        df: pandas.DataFrame\n        args: dict\n        pred_args: dict\n    Returns:\n        agent: sql_agent.SQLDatabaseAgent\n        df: pandas.DataFrame", "_summary_\n    \n    Execute agent with the given agent_execution_id.\n    \n    Args:\n        agent_execution_id (int): The ID of the agent execution to execute.\n        time (int): The time to execute the agent.\n    \n    Returns:\n        None", ".", "Save the model to a file.\n    \n    Args:\n        model_file (Union[str, Path]): The file path to save the model to.", "Flatten a DataFrame with nested columns into a single column.\n    \n    Parameters\n    ----------\n    df : DataFrame\n        The DataFrame to flatten.\n    \n    Returns\n    -------\n    DataFrame\n        The flattened DataFrame.", "\u5c06\u56fe\u50cf\u6570\u636e\u8f6c\u6362\u4e3a\u5411\u91cf\n    :param filename: \n    :return:", "to list", "Returns a string representation of the object.", "(self, a) -> float\n\n    Logarithm of a.", "_summary_\n\n    Args:\n        run_cmd (str): _description_\n        **kwargs: _description_", "Args:\n        settings (Settings): Settings object.", "Return the coordinates of an element.", "check port is use or not", "Initialize the class.", "Initialize the model\n    \n    Parameters\n    ----------\n    kernel_type : str, optional\n        The type of kernel to use. Defaults to 'primal'.\n    dim : int, optional\n        The dimensionality of the data. Defaults to 30.\n    lamb : float, optional\n        The regularization parameter. Defaults to 1.\n    rho : float, optional\n        The penalty parameter. Defaults to 1.0.\n    eta : float, optional\n        The learning rate. Defaults to 0.1.\n    p : int, optional\n        The power of the kernel. Defaults to 10.\n    gamma : float, optional\n        The gamma parameter of the kernel. Defaults to 1.\n    T : int, optional\n        The number of iterations. Defaults to 10.", "Initialize a Line object.", "", "Returns the year abbreviation as a string.", "Creates a temporary directory. \n    \n    The directory is created in the current working directory (by default) \n    and is removed when the process exits. \n    \n    The directory name is based on the current date and time. \n    \n    The directory name is suffixed by the specified suffix. \n    \n    The directory name is prefixed by the specified prefix. \n    \n    The directory is removed when the process exits. \n    \n    The directory is created in the specified directory. \n    \n    The directory is created in the current working directory by default. \n    \n    The directory is removed when the process exits. \n    \n    The directory is created in the current working directory by default. \n    \n    The directory is removed when the process exits. \n    \n    The directory is created in the current working directory by default. \n    \n    The directory is removed when the process exits. \n    \n    The directory is created in the current working directory by default. \n    \n    The directory is removed when the process exits. \n    \n    The directory is created in the current working directory by default.", ".\n    Get the input keys for this node.\n\n    Args:\n        state (dict): The state of the game.\n\n    Returns:\n        List[str]: The input keys.", "", "_set_input_type_impl(self, instance, name: str, type: Any, default: Any = _empty)\n    \n    Set the type of the input socket.\n    \n    Args:\n        instance (Any): The instance of the class.\n        name (str): The name of the input socket.\n        type (Any): The type of the input socket.\n        default (Any): The default value of the input socket.\n    \n    Raises:\n        TypeError: If the type is not a subclass of InputSocket.", "Returns the offset of the original data.", "Update the title of the sheet.\n\n    Args:\n        title: The new title of the sheet.", "Loads the model parameters from the given checkpoint.\n    \n    Args:\n      model: The model instance.\n      ckpt: The checkpoint file.\n      session: The TensorFlow session.\n      name: The name of the model.\n    \n    Returns:\n      The loaded model instance.", "_summary_\n\n    Args:\n        logger (_type_): _description_\n        log_level (_type_): _description_\n\n    Returns:\n        _type_: _description_", "Returns the data for the batch.", ".", "Don't collect Python 3.x versions.", "for dummy outcome, we don't need to do anything here.", "_run_api_threaded\n    Runs the scheduler API on a separate thread.\n    :param api_port: The port to run the scheduler API on.\n    :param address: The address to run the scheduler API on.\n    :return: The socket names of the scheduler API.", "Join a path with a list of paths.\n    \n    :param path: The path to join.\n    :param paths: The paths to join with.\n    \n    :return: A path joined with a list of paths.", "Copies a file from a source bucket to a destination bucket.", "(self) -> None:\n        Initializes the object.", "Returns the string of the media's edge_media_to_comment or edge_media_preview_comment.\n    \n    Parameters\n    ----------\n    media : dict\n        The media dictionary returned by Instagram's GraphQL API.\n    \n    Returns\n    -------\n    str\n        The string of the media's edge_media_to_comment or edge_media_preview_comment.", ".", "(None) -> None\n\n    Clear the word at addr.", "boxes1: (N, 4)\n    boxes2: (M, 4)", "'Return a readable representation of the object.", ".convert_objects(self, convert_dates=True, convert_numeric=False,\n                        copy=True)\n\n    Convert objects in this object's data to the specified type.\n\n    :param bool convert_dates: If True, convert all dates to datetime objects.\n    :param bool convert_numeric: If True, convert all numeric values to float.\n    :param bool copy: If True, return a copy of the data.\n    :return: self", "Remove a bookmark from the list.", ".", "Back adjust the data to make it easier to work with.\n    \n    Parameters\n    ----------\n    data : pandas.DataFrame\n        The data to back adjust.\n    \n    Returns\n    -------\n    pandas.DataFrame\n        The back adjusted data.", "A simple implementation of GNU hash function.", "(float, float) -> float\n\n    Calculate the cost of the transaction and the amount of change.\n\n    >>> calculate(Transaction(100.0, 100.0))\n    (1.0, 0.0)\n    >>> calculate(Transaction(100.0, 101.0))\n    (0.0, 1.0)\n    >>> calculate(Transaction(100.0, 0.0))\n    (0.0, 100.0)\n    >>> calculate(Transaction(100.0, -100.0))\n    (0.0, 100.0)\n    >>> calculate(Transaction(100.0, 100.0))\n    (1.0, 0.0)\n    >>> calculate(Transaction(100.0, 101.0))\n    (0.0, 1.0)\n    >>> calculate(Transaction(100.0, 0.0))\n    (0.0, 100.0)\n    >>> calculate(Transaction(10", "(Type[Any]) -> Tuple[Any, ...]:", "@param signed: \n    @param addr: \n    @param length: \n    @param label:", "(self, X, training=True) -> np.ndarray:\n\n    Runs the forward pass of the neural network on the input data X.\n\n    Parameters:\n    X (np.ndarray): The input data of shape (num_samples, num_features).\n\n    Returns:\n    np.ndarray: The output of the neural network for the input data.", "", "\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6", "Update the number of computed tokens in the sequence.", "(self, item_type, rec_src, sr, link, comment=None)", "This decorator wraps an error handler function, and records it once, \n    and then passes it to the app's error handler.", "on(self, image)", "::name::\n        Returns the name of the object.", ".\n    Reset the model with the given level and common infrastructure.", "", ":return:", "(Callable[..., Any], str) -> Any:", "for a string that needs quoting", "Save the disabled and enabled choices to the cookie.", "_handle_error\n    \n    Handles an error and writes it to the writeback ES\n    \n    @param message: The error message\n    @param data: The data to write to the writeback ES\n    \n    @return: None", ".\n    Test that custom scorer works.", "Samples from q(x_start | noise).\n\n    Parameters\n    ----------\n    x_start : torch.Tensor\n        The starting point of the latent variable.\n    t : int\n        The time step of the latent variable.\n    noise : torch.Tensor, optional\n        The noise to use. If None, a random noise will be used.\n\n    Returns\n    -------\n    torch.Tensor\n        The sampled latent variable.", ".add_argument() method for adding argument class to argument list.", "Render a JSON representation of the data.\n\n    :param outfd: The file-like object to write the output to.\n    :param data: The data to be rendered.\n    :return: None", "Safely saves a model for HF Trainer.\n    \n    Args:\n        trainer: The HF Trainer.\n        output_dir: The output directory.\n    \n    Returns:\n        None.", "Filters out tokens that are not semantic", "Convert text to phonemes\n    \n    Parameters\n    ----------\n    text : str\n        The text to convert to phonemes\n    language : str\n        The language of the text. Supported languages are \"zh-CN\"\n    \n    Returns\n    -------\n    list[str]\n        The phonemes of the text", "Logs a message before sleeping.\n\n    :param logger: The logger to use.\n    :param log_level: The log level to use.\n    :return: A decorator that logs before sleeping.", "_sync_with_dict_agent_internal\n\n    Syncs the encoder and the decoder dictionaries with the dict_agent.", "", "Returns a list of CaptionQuery objects for the captions of the video.", ".\n    Plot a plotly figure.\n    Parameters\n    ----------\n    figure : dict\n        A plotly figure\n    win : dict\n        A window object\n    env : dict\n        An environment object\n    Returns\n    -------\n    dict\n        A plotly figure", ".", "Checks if the model has finished training.\n    \n    Returns:\n        torch.tensor: A tensor of shape (1, 1) with a boolean value indicating whether the model has finished training.", "@summary: \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u6c47\u7968\n    @param start_date: \u8d77\u59cb\u65e5\u671f\n    @param end_date: \u7ed3\u675f\u65e5\u671f\n    @return:", "Loads configuration from file.", "Check if package is installed in the current environment.\n\n    Args:\n        package_helper: CondaPackageHelper object.\n        package: Name of the package to check.\n\n    Returns:\n        int: 0 if package is installed, 1 otherwise.", "Returns the embedding length of the model.", "Returns a fully qualified name for the current file.", "Parse a source file.", ".set_volume(self, volume)\n\n    Sets the volume of the mixer.\n\n    :param int volume: The volume to set.\n    :return: True if the volume was set, False otherwise.\n    :rtype: bool", ":type val: int\n    :rtype: str", "Stop all jobs in all sessions.", "(str) -> NoneType\n\n    Constructs a new Result object.", "\u83b7\u53d6\u73af\u5883\u53d8\u91cf", "Remove SQL from the database\n    \n    Args:\n        question (str): Question to remove SQL from\n\n    Returns:\n        bool: True if successful, False otherwise", "_test_convert_all__", "Returns the direction of the expected future movement of the robot", "Returns a string representation of the tree.", "Returns the FieldMapping object for the fieldname.", "Flush the task logs.", "_calculate_wer\n    Calculate WER(Word Error Rate)\n    :param seqs_hat:\n    :param seqs_true:\n    :return:", "Returns a list of categories for the given fileids. \n    \n    :param fileids: list of fileids or a single fileid\n    :return: list of categories", "Args:\n        local_rank (int):", "Adds the group to the group list\n    \n    @param group: the group to add\n    @type group: Group\n    @return: nothing", "(Tensor) -> Tensor\n\n    Performs a forward pass through the module.\n\n    Args:\n        tensor_input (Tensor): Input to the module\n\n    Returns:\n        Tensor: Output of the module", "x is the same as y", "Returns:\n        texture: The texture of the image.", "Start a process in a separate thread.", "Determine the order in which to sort types\n    \n    :param t: type to sort\n    :type t: type\n    :return: tuple of (is_container, repr(type))\n    :rtype: tuple", "", "Converts the history of messages to a list of dictionaries.\n\n    Args:\n        history (list[dict[str, str]]): The history of messages.\n        is_demonstration (bool, optional): Whether the history is from a demonstration. Defaults to False.\n\n    Returns:\n        Union[str, list[dict[str, str]]]: The history of messages as a list of dictionaries.", "Return a list of sender IDs from the database.", "Forward propagation.\n    \n    Parameters\n    ----------\n    x : torch.Tensor\n        Input tensor of shape [batch_size, 4]\n    \n    Returns\n    -------\n    torch.Tensor\n        Output tensor of shape [batch_size, 4]", ".\n    Initialize the animation.\n    :param frames: list of frames", "Test that the barcodes are scanned and separated correctly.", "Apply the forward pass of the network", ".\n    Computes the number of tokens from a list of messages.", "Decorator for creating a single instance of a class.", ".", "", ".", "(self, num_samples:int,\n               current_device: int) -> Tensor:", ".\n\n    Parameters\n    ----------\n    filename : str\n        Filename of the HDF5 file.\n    datapath : str\n        Path of the data.\n    kwargs : dict\n        Additional keyword arguments.\n\n    Returns\n    -------\n    dict\n        Dictionary with the HDF5 file.", "_summary_", "Clears the jobs list.", ".\n    Tests that a valid environment is created.", "(self, fmt_streams)\n    \n    Args:\n        fmt_streams (list): List of fmt_streams.\n    \n    Returns:\n        None", "_save() method override to save the permissions.", ".", "Lookup pending lookups and run them.", "", "GenerateAnswer node", "Returns the value associated with the given key. \n    If the key is not found, the default value is returned.", "@brief:\n        Receive a packet from the network.\n    @param x:\n        The maximum size of the packet to receive.\n    @return:\n        The packet received, the source address, and the timestamp.", "Apply the audio encoder to the input audio.", "Get a client token for a gateway.\n    \n    Parameters\n    ----------\n    gateway_name : str\n        The name of the gateway.\n    token_config : TokenConfig, optional\n        The token config to use.\n    \n    Returns\n    -------\n    str\n        The client token.", "Extracts headers from the response headers.\n    \n    Parameters\n    ----------\n    headers : str\n        Response headers.\n    \n    Returns\n    -------\n    dict\n        Dictionary of headers.", ".\n    Returns:\n        list[Parameter]: The list of identifiers.", ".authorize_redirect(self, redirect_uri=None, client_id=None,\n                           client_secret=None, extra_params=None )\n\n    Authorize the user to access the application.\n\n    :param redirect_uri: The redirect URI to which the user will be\n                         redirected.\n    :param client_id: The client ID.\n    :param client_secret: The client secret.\n    :param extra_params: Extra parameters to be passed to the authorization\n                         endpoint.\n    :return: None.", "", "Generates text using the model.", "Return True if the traceback widget is available.", "", "Forward function\n    \n    Parameters\n    ----------\n    x : torch.Tensor\n        Input tensor.\n    \n    Returns\n    -------\n    tuple(torch.Tensor)\n        Output tensors.", "Write the changes to the project file. \n    \n    :param show_message: If True, a message will be shown to the user. \n    :type show_message: bool\n    :return: None", "Initialize the class.", "Set the active server", ".", "@return: word_embeddings.weight", "Compute the power spectral density of the data.\n    \n    Parameters\n    ----------\n    omega : TensorLike\n        The angular frequencies.\n    \n    Returns\n    -------\n    TensorVariable\n        The power spectral density.", ".", ".\n    Returns the offset of a key in the chunk.", ":param input:\n    :param output:\n    :param node_config:\n    :param node_name:\n    :return:", "Set the model name to use for the environment. \n    \n    Args:\n        model (str): The name of the model to use.\n    \n    Raises:\n        Exception: If the model is not set.", "_build_arch_", "Returns the token limit for a given model.\n    \n    Args:\n        model (str): The name of the model.\n    \n    Returns:\n        int: The token limit for the model.", "for each node in OPEN, check if it is the goal.\n    If so, return the path.\n    Otherwise, add the node to the closed list.\n    For each node in the neighbor list,\n    check if it is in the closed list.\n    If not, add it to the open list.", "Run migrations in 'offline' mode.\n\n    This db_url will be passed to the 'alembic' command line tool\n    and un-migrated migrations will be stored in the \"migrations\"\n    directory.", "\u83b7\u53d6\u7528\u6237ID\n    \n    @param msg: Message\n    @param max_len: \u6700\u591a\u4fdd\u7559\u7684\u5b57\u7b26\u6570\n    @param re_sub: \u6b63\u5219\u8868\u8fbe\u5f0f\n    @return: \u7528\u6237ID", "_summary_", ".\n    Initialize the loss criterion.", "Import a pretrained model.\n\n    Args:\n        pretrained (str): The name of the model to import.\n        tag (bentoml.Tag): The tag of the model to import.\n        *args (t.Any): Additional arguments to pass to the model constructor.\n        tokenizer_kwds (dict[str, t.Any]): Keyword arguments to pass to the tokenizer constructor.\n        **attrs (t.Any): Additional attributes to pass to the model constructor.\n\n    Returns:\n        bentoml.Model: The imported model.\n\n    Raises:\n        NotImplementedError: If the model is not implemented.", ".\n    Returns:\n        bool: True if the object is managed by the NM, False otherwise.", "", ".", "for a given set of nodes, return the induced subgraph.", "for a key, value pair, adds the value to the list of values\n    associated with the key. If the key is not in the dictionary, it adds\n    the key to the dictionary and sets the value to an empty list.", ".", "Returns a dictionary representation of the template. \n    \n    :return: A dictionary representation of the template.", "Returns a set of references that are referenced by this parameter.", "_parse_snippet_file(content, full_filename)\n\n    Parses a snippet file and yields a SnipMateSnippetDefinition\n    for each snippet in the file.\n\n    :param content: The content of the file.\n    :type content: str\n    :param full_filename: The full path to the file.\n    :type full_filename: str", "Forward pass.\n    \n    Args:\n        x: input tensor\n        emb: embedding tensor\n\n    Returns:\n        output tensor", ".\n    Returns:\n        int: index of the best trial", ".\n    Adds a new argument to the parser.", ".", "Returns the assumed role arn for the current user", "Initialize the Permute class", "Delete a module from the module registry. \n    \n    :param module_name: The name of the module to delete.\n    :type module_name: str", "_get_header_by_wsgi_name(self, name):", "Get updated state for the current stream.\n    \n    Args:\n        current_stream_state (MutableMapping[str, Any]): The current state of the stream.\n        latest_record (Mapping[str, Any]): The latest record from the stream.\n\n    Returns:\n        Mapping[str, Any]: The updated state for the current stream.", ".\n\n    Returns:\n        bool:", ".", "for each variable in self and other,\n    if they are not bound, unify them\n    and return a new binding dict\n    otherwise, return the bindings", "_start_streaming", "Forward pass of the network. \n    \n    Parameters\n    ----------\n    x : torch.Tensor\n        Input tensor of shape [batch_size, reg_max + 1]\n    \n    Returns\n    -------\n    torch.Tensor\n        Output tensor of shape [batch_size, 4]", "Remove and return the element at the given index.", "Gets the page mode of the document.\n    \n    :returns: The page mode of the document.\n    :rtype: String", ".", "", "def _flask_app(self: t.Optional[Rest]) -> t.Optional[Rest]:", "Checks if the client is ready to send requests.\n    \n    Returns:\n        bool: True if the client is ready, False otherwise.", "_build_arch_", "", "for centering the frame", ".\n    Sets the DNS challenge for the given domain.\n\n    :param zone_id: The zone ID of the domain.\n    :param domain: The domain name.\n    :param txt_challenge: The DNS challenge.\n    :return: The response from the API.", "Checks if an attribute has nested attributes.\n\n    Parameters:\n        attribute_key (str): The key of the attribute to check.\n        attributes (Dict[str, Any]): The attributes to check.\n\n    Returns:\n        bool: True if the attribute has nested attributes, False otherwise.", "Returns the maximum length of the sequences in the dataset.", ".\n\n    Args:\n        content (str): The content of the message.\n        kwargs: Additional keyword arguments.\n\n    Returns:\n        None.", "Test that the stats are generated correctly when a request is made\n    with a POST method.", "Get historic ohlcv data from binance. \n    \n    Args:\n        pair (str): The pair to get data for.\n        timeframe (str): The timeframe to get data for.\n        since_ms (int): The timestamp in milliseconds to get data from.\n        is_new_pair (bool, optional): Whether or not this is a new pair. Defaults to False.\n    \n    Returns:\n        List: The ohlcv data.", "", ".\n    :param args:\n    :param kwargs:\n    :return:", "(int)", "untar a tar file\n    \n    Parameters\n    ----------\n    file_path : str\n        path to the tar file\n    extract_folder : str, optional\n        path to the folder where the tar file will be extracted, by default None\n    \n    Returns\n    -------\n    None", "for create task", "Refresh the themes.", "Creates a file at the given path, and optionally creates any directories in the path.\n    \n    Args:\n        path (str): The path to the file to be created.\n        create_dirs (bool): Whether to create any directories in the path.", "(self, model_fn, noise_schedule, predict_x0=True, thresholding=False, max_val=1., variant='bh1')\n\n    Args:\n        model_fn: a function that returns a torch.nn.Module object.\n        noise_schedule: a function that returns a torch.Tensor object.\n        predict_x0: a boolean.\n        thresholding: a boolean.\n        max_val: a float.\n        variant: a string.\n\n    Returns:\n        None.", ".", "Returns the center of the arc", "Install dependencies with Poetry.", "(self, image_path: str) -> Image.Image:", ".\n\n    Parameters\n    ----------\n    tensor : np.ndarray\n        The tensor to convert.\n\n    Returns\n    -------\n    List\n        The list representation of the tensor.", "Shutdown the global client.", "Returns the active server", ".\n    Sample from a Gaussian distribution.\n\n    Args:\n        num_samples: Number of samples to draw.\n        current_device: Current device.\n\n    Returns:\n        Sampled samples.", ":param cls: \n    :param queryset: \n    :return:", "Update the status from the cache file.", ".", ".\n    Create a new spinner.\n\n    Args:\n        message (str, optional): The message to display. Defaults to \"Loading...\".\n        delay (float, optional): The delay between each spinner character. Defaults to 0.1.\n        plain_output (bool, optional): If True, the spinner will not be printed to the console. Defaults to False.", "(self, init_data_by_df, dtype='stock_day', if_fq='bfq')\n\n    Args:\n        init_data_by_df (pd.DataFrame):\n        dtype (str, optional): Defaults to 'stock_day'.\n        if_fq (str, optional): Defaults to 'bfq'.\n\n    Returns:\n        None:", "", ".", "(float) -> float\n    Predict the value of the target variable for the given input data.\n\n    Parameters\n    ----------\n    X : array-like of shape (n_samples, n_features)\n        The input data.\n\n    Returns\n    -------\n    y : array-like of shape (n_samples,)\n        The predicted target values.", "Returns True if the element is floated.", "Patches the OpenAI client to replace the chat.completions.create method with a patched version that returns the\n    completions in a stream.\n\n    Args:\n        client (Union[OpenAI, AsyncOpenAI]): The OpenAI client to patch.\n        mode (Mode, optional): The mode to use for the patched chat.completions.create method. Defaults to Mode.FUNCTIONS.\n\n    Returns:\n        Union[OpenAI, AsyncOpenAI]: The patched OpenAI client.", ".", "Apply gradients to variables.\n\n    Args:\n      grads_and_vars: List of (gradient, variable) pairs.\n      global_step: Optional variable to record the global step in summary.\n      name: Optional name for the operation (default: \"apply_gradients\").\n\n    Returns:\n      A tensor that is the sum of the gradients of the variables.", ".\n    Returns:\n        Dict[str, Dict]:", ".", "Returns the site path joined by joins, relative to the local site path.", ".\n    .. versionadded:: 1.1\n    .. versionchanged:: 1.3", "Test that the ISortCommand is created.", "_handle_error(self, message, data=None)\n\n    Handles errors by writing to the writeback_es.", "", "Initialize everything.", "to be called by the expert to send its data to the gates.", "Get the list of packages that are available in the system.\n    \n    :return: A dictionary mapping package names to their available versions.", "_set_tag(self, tag)\n\n    Set the tag to be used for authenticated encryption.\n\n    Args:\n        tag (bytes): The tag to be used for authenticated encryption.\n\n    Raises:\n        Exception: If the tag could not be set.", "Read a file and return a PipelineTemplate object", ".\n    Loads the model", ".\n    Checks if the email address is a known suspicious email address.\n\n    :param email: The email address to check.\n    :return: True if the email address is a known suspicious email address, False otherwise.", "Set the speech to be spoken.\n\n    Args:\n        speech (str): The speech to be spoken.\n        speech_type (str, optional): The type of speech to be spoken. Defaults to \"plain\".\n        extra_data (Any, optional): Extra data to be passed to the speech engine. Defaults to None.\n\n    Returns:\n        None", "_Called when the client runner completes.", ".\n    Loads the index file from the filesystem.", "A predicate to check if a package is excluded.\n    \n    Args:\n        package (str): The package name to check.\n    \n    Returns:\n        bool: True if the package is excluded, False otherwise.", "Generate a new RSA domain key", "Returns the display filename for a given subpath.\n    \n    If subpath is None, return self.display_filename.\n    \n    Otherwise, return self.display_filename + subpath.", ".\n    Returns true if the position is at the start of the line.", ".like_from_image(self, url, amount=50)\n\n    Like the first 50 images from the given url.\n\n    Parameters\n    ----------\n    url : str\n      The url of the image to like.\n    amount : int\n      The amount of images to like.\n\n    Returns\n    -------\n    self\n      The object itself.\n\n    Raises\n    ------\n    TypeError\n      If the given url is not a string.", "Sigmoid function", "Returns a timeline data for a given doctype and name.", ".", "Returns the queryset of objects that this user can access.", "", "(cls, text='????') -> str\n\n    Return a random string of letters.", "_pause_playback_backend_if_needed", "Return True if the action is a standard action.", ".", "", "(DependencyType) -> None", "This function formats the values of a dataframe.\n    \n    Parameters:\n        value (Any): The value to be formatted.\n    \n    Returns:\n        List[Any]: The formatted values.", "", "(int) -> List[int]:\n        \n        This function returns a list of integers that are not in the list of change points.\n        \n        Parameters\n        ----------\n        n_samples : int\n            The number of samples in the data set.\n        change_points : List[int]\n            The list of change points.\n        \n        Returns\n        -------\n        List[int]\n            A list of integers that are not in the list of change points.\n        \n        Example\n        -------\n        >>> change_points = [10, 20, 30]\n        >>> get_candidates(n_samples=100, change_points=change_points)\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3", "Get the Dropbox folder location from the host.db file", "", ":param num_samples: number of samples to draw\n    :return: np.ndarray of shape (num_samples, self.num_features)", "_summary_\n\n    Args:\n        nb_file (_type_): _description_\n        ext (_type_): _description_\n\n    Returns:\n        _type_: _description_", "Send a message to the stream and receive a stream of messages", ".\n    Set the maximum order size for a security.\n\n    Parameters\n    ----------\n    sid : int\n        Security ID.\n    max_shares : int\n        Maximum number of shares allowed to be traded.\n    max_notional : float\n        Maximum amount of money allowed to be traded.", "_init__\n\n    Args:\n        mlflow_autologger (Optional[Union[str, \"MfeInternalMLFlowAutologgerState\"]], optional): \n            If set to True, MLflow autologger will be used for logging. Defaults to None.\n        **kwargs : Any other kwargs will be passed to the parent class.", ".\n    Compares two statements to see if they are similar.", ".", ".\n    .. _proto2object:\n\n    .. _deserialize:\n\n    .. _CreateRequestMessage:\n\n    .. _CreateRequestMessage_PB:\n\n    .. _CreateRequestMessage_PB.msg_id:\n\n    .. _CreateRequestMessage_PB.address:\n\n    .. _CreateRequestMessage_PB.content:\n\n    .. _CreateRequestMessage_PB.reply_to:\n\n    .. _CreateRequestMessage:\n\n    .. _CreateRequestMessage.msg_id:\n\n    .. _CreateRequestMessage.address:\n\n    .. _CreateRequestMessage.content:\n\n    .. _CreateRequestMessage.reply_to:\n\n    .. _CreateRequestMessage.msg_id:\n\n    .. _CreateRequestMessage.address:\n\n    .. _CreateRequestMessage.content:\n\n    .. _CreateRequestMessage.reply_to:\n\n    .. _CreateRequestMessage:\n\n    .. _CreateRequestMessage.msg_id:\n\n    .. _CreateRequestMessage.address:\n\n    .. _CreateRequestMessage.content:\n\n    .. _CreateRequestMessage.reply_to:\n\n    .. _CreateRequestMessage:\n\n    .. _CreateRequestMessage.msg_id:\n\n    ..", "This function will get the graph info", ".format_usage(self, ctx)", "_init__\n    Initialize the parameters of the patch match algorithm", "Cancel a job.", "Returns the length of the shortest tensor.", "_summary_\n\n    Parameters\n    ----------\n    notebook : nbformat.notebooknode.NotebookNode\n        Notebook to filter.\n\n    Returns\n    -------\n    nbformat.notebooknode.NotebookNode\n        Notebook with filtered metadata.", "Parses a string of numbers or ranges and returns a list of numbers.", ".\n    Apply time function to the given audio/mask/image.", "Initialise the population with random values.\n    \n    :return: None", "_inverse_transform_\n\n    Args:\n        X (sp.coo_matrix): coo_matrix\n\n    Returns:\n        list: list of list of words", ".\n    Returns:\n        str: params", "login to nijie.info", "Return a copy of the feature.", "Returns True if the string is all lower case.", "Returns the absolute url of the page.", "Restart the wormhole server.", ".\n    Returns a list of suggested commands.", "Convert a 16-bit signed mu-law encoded signal to a 32-bit floating point signal. \n    \n    Parameters\n    ----------\n    wav : 16-bit signed mu-law encoded signal\n    qc : quantization code\n    \n    Returns\n    -------\n    x : 32-bit floating point signal", ".\n    See base class for more details.", ".", ",\n    num_top_classes: Optional[int] = None,\n    type: str = \"auto\",\n    label: Optional[str] = None,", "", "Decorator for registering a route.\n\n    :param uri: URI string\n    :param methods: HTTP methods\n    :param host: Host", "_execute(self, command, args, env_vars=None, shim=None)\n\n    Execute a command with the given arguments.\n\n    Args:\n        command (str): The command to execute.\n        args (list): The arguments to pass to the command.\n        env_vars (dict): The environment variables to set.\n        shim (str): The shim to use.\n\n    Returns:\n        int: The return code of the command.\n        str: The standard output of the command.\n        str: The standard error of the command.\n\n    Raises:\n        RuntimeError: If the command fails to execute.", "Initializes the engine.\n    \n    Args:\n        shellClass (class): The shell class to use.\n        mpi (mpi.MPI): The MPI communicator to use.", ".", ".\n    Compute gradients.", "\u83b7\u53d6\u8f66\u7968\u7c7b\u578b\u5b57\u7b26\u4e32 \n    :param set_type:\n    :return:", "_summary_\n\n    Args:\n        name (str): _description_\n        elem_type (OptionalProto.DataType): _description_\n        value (Optional[Any]): _description_\n\n    Returns:\n        OptionalProto: _description_", ".\n    Set the value of a key in the memo.", "Parameters\n    ----------\n    module : torch.nn.Module\n        The module to be wrapped.\n    module_in : torch.Tensor\n        The input tensor.\n    module_out : torch.Tensor\n        The output tensor.\n    \n    Returns\n    -------\n    torch.Tensor\n        The output tensor.", "", ".", "::class:`~pyrogram.help.HelpCommand`\n\n    Get help for a command.\n\n    .. code-block:: python\n\n        from pyrogram import Client, filters\n\n        @Client.on_message(filters.command(\"help\"))\n        async def help_command(client, message):\n            await message.reply_text(\n                f\"Hi {message.from_user.mention}! I'm a bot that can help you with your Telegram account. You can use me by sending me commands like /start, /help, /settings, /info, etc. For more information, please visit the official website of my creator: https://github.com/harsh-007\"\n            )", "Find a node in the linked list by its value\n    \n    Args:\n        value (int): The value to search for\n    \n    Returns:\n        Node: The node with the given value, or None if not found", ".", "(str) -> None", "Export journal to a file or directory.\n    \n    Args:\n        cls: The journal class to export.\n        journal: The journal to export.\n        output: The output directory or file.\n    \n    Returns:\n        The journal or a list of journal entries.", "_Convert this object to a dict_", "Returns the values of the object.", ".", ".\n    Returns True if the board is valid.", "_make_save_file_name_\n    \n    Args:\n        store_type (str): _description_\n    \n    Returns:\n        str: _description_", "", ".\n    Convert a CSC matrix to CSR format.", "Args:\n        in_channels (int): The number of channels in the input tensor.\n        out_channels (int): The number of channels in the output tensor.\n        kernel_size (int): The size of the convolution kernel.\n        stride (int): The stride of the convolution.\n        bias (bool): Whether to include a bias term in the output tensor.", "Expand environment variables in a string.\n\n    :param val: The string to expand environment variables in.\n    :param env: The environment variables to use.\n    :param fallback_to_os_env: Whether to fallback to os.environ if the environment variable is not found.\n    :return: The expanded string.", "Convert a lambda ARN to a canonical form", "_create_help_command\n    Returns a help command that shows all commands and their help.", ".\n    Args:\n        index (int): The index of the page to load.", "Prepare image for blob.\n    \n    Input:\n        im: image to be prepared\n        pixel_means: mean values for each channel\n        target_size: target size of image\n        max_size: maximum size of image\n    \n    Output:\n        im: image prepared for blob\n        im_scale: scale of image", "@param val: a binary string\n    @return: a string", "for setting validation data.\n\n    :param batch_size: int\n    :param X_val: list of JTensor\n    :param Y_val: JTensor\n    :param trigger: str\n    :param val_method: list of validation method\n    :return:", "This method is called when a class is instantiated.", "Get a random delay in seconds.", ".\n\n    See base class for more details.", "Return the human readable byte(s)", ".", "Encode text using the model.\n    \n    Args:\n        text (str): The text to encode.\n        batch_size (int): The batch size to use.\n        as_numpy (bool): Whether to return the encoded text as a numpy array.\n    \n    Returns:\n        numpy.ndarray or list: The encoded text as a numpy array or a list of encoded texts.", "Parses message entity array to list of MessageEntity objects.\n    \n    :param cls: class of MessageEntity\n    :param message_entity_array: list of message entities\n    :return: list of MessageEntity objects", "Returns a human-readable file size", "Compute the similarity matrix between the reference set and the query set.", ".\n    Check if the user has write permission on the given ref.", "Set the output of the node to the given data.\n    \n    Args:\n        data (list): The output data.", "_summary_", "", ".tolist()\n\n    Return a list of the data.", "Unwatch the current file.", ".\n    Get release info.\n\n    :param str name: Name of the package.\n    :param str version: Version of the package.\n\n    :return: Release info.\n    :rtype: dict", ".", ".", "Returns the description of the object.", "Read the dev file and return the examples.", "Returns a list of providers", "Test that setting a cookie works with cookies model.", "Parses the query param from a url.\n    \n    Args:\n        url (str): The url to parse.\n        param (str): The param to parse.\n    \n    Returns:\n        str: The value of the param.", "", "Update the label map path in the training and evaluation configs.\n    \n    Args:\n      configs: A dictionary containing the training and evaluation configs.\n      label_map_path: The path to the label map file.", "Load the album data from the library.", "", "Create an optional field.\n    :param name: Name of the field.\n    :param elem_type: Type of the element in the optional field.\n    :param value: Value of the optional field.\n    :return: OptionalProto.", "Set a cookie in the browser.", "", "Initialize the Fabric object.", "_summary_\n\n    Args:\n        config_settings (dict, optional): Defaults to None.\n\n    Returns:\n        list: list of packages", "Invokes the callback.", "Resolve the requirements.", "This function is to remove useless information in coco.dataset\n    \n    Args:\n        coco (COCO): coco object\n        \n    Returns:\n        coco.dataset: coco.dataset without useless information", "Returns True if all events in the event list are successful.", "", "Return the error text if it exists.", "for selection in self.selection_list:\n        if selection.selected:\n            return selection.text\n    return None", "for each node in the graph,\n    check if the node is in the orderings list", "Tracks: a list of Track objects.\n    Detections: a list of Detection objects.\n    metric: a string specifying the distance metric to use for the embedding distance.", "Return a list of strings representing the names of the slots used by the \n    optimizer.", "Kills the process.", ".\n    Return the API version.", "Main function", ".rng()\n\n    Return the random number generator.", "_find_by_name", "Test that only works with multiples of the base directory."], ["(Pickle)", "Save model for HF Trainer.\n    \n    Args:\n        trainer: transformers.Trainer\n        output_dir: str", "Returns\n    -------\n    numpy.ndarray\n        A binary mask of the label issues.", "Show the image if it's not a video.", "Sets the output keys for each dataset in the list.\n    \n    Args:\n        datasets (list): A list of datasets to set the output keys for.\n        output_keys (list): A list of output keys to set for each dataset.", "Print to stderr or stdout", "_summary_\n\n    Returns\n    -------\n    example_input : str\n        The example input for the dispatcher.\n    example_system_prompt : str\n        The example system prompt for the dispatcher.\n    example_user_prompt : str\n        The example user prompt for the dispatcher.", "Checks if any of the preferences are enabled. \n    \n    :return: True if any preference is enabled, False otherwise.", "Remove all files and directories in the current directory.", "(self, result_handler: ResultHandler = None) -> \"ResultInterface\":", "_invoke", "_summary_", "Given a sorted array of integers nums containing n integers and a target value, \n    return the index of the first occurrence of target in nums, or -1 if target is not in nums. \n    \n    You must write an algorithm with O(log n) runtime complexity.\n    \n    Example 1:\n    Input: nums = [5,7,7,8,8,10], target = 8\n    Output: 4\n    \n    Example 2:\n    Input: nums = [5,7,7,8,8,10], target = 6\n    Output: -1\n    \n    Constraints:\n    \n    n == nums.length\n    1 <= n <= 105\n    -109 <= nums[i] <= 109\n    -109 <= target <= 109", ".\n    Returns a search strategy that maps a pack to a list of packs.", "(self, user):\n        Add a user to the whitelist.\n        \n        :param user: The user to add to the whitelist.\n        :type user: User\n        \n        :raises ValueError: If the username is invalid.", "This function is used to fix the crontab.", "", "This is a hook for distutils to make sure that distutils_path is\n    always set to the root of the module.", "() -> bool:", ".\n    Call the regex on the element and return the result.", "v1.0", "Function to greet two words", "Convert all items in the dict to the given dtype.\n    \n    Args:\n        dtype (Optional[str]): The dtype to convert to. Defaults to None.\n    \n    Returns:\n        None", "Prompt the user for input.\n    \n    :param prompt: Prompt to display to the user.\n    :param float: Whether or not to allow floats.\n    :return: The user's input.", ".", "Run the audio signal through the model and return the output.\n    \n    Parameters\n    ----------\n    wavsignal : np.ndarray\n        Audio signal to be processed.\n    fs : int, optional\n        Sampling frequency of the audio signal. Default is 16000.\n    \n    Returns\n    -------\n    np.ndarray\n        Processed audio signal.", "Sanity check all engines.", ".forward(self, value=NAN, size=1)\n\n    @param value: the value to forward\n    @param size: the number of values to forward\n    @return: None", "Close the writer and flush it.", "@summary: \u4e0a\u4f20\u6587\u4ef6\n    @param fileDir: \u6587\u4ef6\u8def\u5f84\n    @param isPicture: \u662f\u5426\u662f\u56fe\u7247\n    @param isVideo: \u662f\u5426\u662f\u89c6\u9891\n    @param toUserName: \u63a5\u6536\u65b9\u5e10\u53f7\uff08\u6536\u5230\u7684OpenID\uff09\n    @param file_: \u4e0a\u4f20\u7684\u6587\u4ef6\n    @param preparedFile: \u51c6\u5907\u597d\u7684\u6587\u4ef6\n    @return:", ".\n\n    Parameters\n    ----------\n    x : list\n        List of x values.\n    y : list\n        List of y values.\n\n    Returns\n    -------\n    None.", ".\n\n    Args:\n        df (pd.DataFrame): The dataframe to plot.\n        x (list): The x values to plot.\n        y (list): The y values to plot.\n\n    Returns:\n        None", "", "", "\"Clean\" text for search engines.\n\n    Parameters\n    ----------\n    text : str\n        The text to clean.\n\n    Returns\n    -------\n    str\n        The cleaned text.", ".", "Close the file descriptors.", "_summary_\n\n    Args:\n        nb_file (_type_): _description_\n        format_name (str, optional): _description_. Defaults to None.\n\n    Returns:\n        _type_: _description_", "Check the exploit is successful", ":param key: \n    :param value: \n    :param sigmaparser: \n    :return:", "(self, parent, params, response)\n\n    Override the default response call to handle JMESPath queries.\n\n    :param parent:\n    :param params:\n    :param response:\n    :return:", "Checks if a word is a valid noun synset. \n    \n    Args:\n        synset (Synset): The Synset object to check.\n        word (str): The word to check.\n    \n    Returns:\n        bool: True if the word is a valid noun synset, False otherwise.", "for Python 2.x", ".\n    Returns a list of the names of the available microphones.", "for debugging purposes", "Opens a file and returns a file object. \n    \n    Parameters:\n        filename (str): The name of the file to open.\n        mode (str): The mode in which to open the file.\n    \n    Returns:\n        file: A file object that can be used to read or write to the file.", ".\n    Sets the value of a cell in a dataframe.\n\n    Parameters\n    ----------\n    col : Column\n        The column to set the value in.\n    row : Row\n        The row to set the value in.\n    val : any\n        The value to set the cell to.\n\n    Returns\n    -------\n    None.\n\n    Raises\n    ------\n    ValueError\n        If the value is not of the correct type.", "Prepare message body for SNS message.", "", "", "Parse the input string into a command and accompanying text.\n    \n    Args:\n        input_str (str): The input string to parse.\n\n    Returns:\n        tuple: A tuple containing the command and accompanying text.", ".", "_prepare_build_dir_", "_test_dmc_hs_fromfile()\n\n    Test that the Doc2Vec model can be created from a file containing a corpus.", "(int, File) -> None", "", "_summary_\n    Returns a list of graphs for a given interface.\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        pk (int): The primary key of the interface.\n\n    Returns:\n        Response: The response containing the list of graphs.", "", "_summary_", ".", ".", "(int, optional)\n    The number of steps to take between each trigger. Default is 10.\n\n    (file, optional)\n    The file to write to. Default is sys.stderr.", "Returns the domain of the current variable.", "This function will be called every 10 seconds to update the snapshot.", "", "for vit_auto_wrap_policy", "", "Return the size of the list.", "Read the config file and store it in a dictionary.", "(self, size=None, dtype=float)\n\n    Generate a standard exponential distribution.\n\n    Args:\n        size (int, optional): Number of samples to generate. Defaults to None.\n        dtype (type, optional): Data type of the samples. Defaults to float.\n\n    Returns:\n        cupy.ndarray: Samples of the standard exponential distribution.", ".\n    Tests the function count_components with an empty graph", "This is a mock function that returns a list of integers.\n    \n    :param a: The first integer.\n    :param b: The second integer.\n    :param c: The third integer.\n    :param d: The fourth integer.\n    :return: A list of integers.", "_init__\n    :param kwargs:", ".\n    Check if rewrite engine is on for the given vhost.", "_split_generators(self, dl_manager):\n\n        Returns:\n            List[Tuple[str, str]]: List of tuples containing `name` and `filepath` for each split.", "", "Returns a session object for the given session ID. \n    \n    Parameters:\n    - session_id (str): The ID of the session.\n    - system_prompt (str, optional): The system prompt for the session.\n    \n    Returns:\n    - session: A session object.", "Test the mae function", ".append_package_path()\n    \n    Adds a package path to the list of paths for the given package name.\n    \n    Args:\n        package_name (str): The name of the package to add the path for.\n        directory (str): The path to add to the list of paths.", ", resp):", "Returns:\n        int: number of iterations in an epoch", "x: (batch_size, *x_shape)\n    y: (batch_size, *y_shape)", "Initialize the game", "Test the check function. \n    \n    :param mocked_shell: mocked shell\n    :param target: target object", "(Callable[[Dict[str, Any], Optional[CallbackManagerForChainRun]], Dict[str, Any]])", "Sets the encryption key. \n    \n    @param key: encryption key", "", ":param value:\n    :param n:\n    :param p:\n    :return:", "Callback function for the MQTT client.", "Get the Dropbox home directory path.", "This method is called when the snapshot is updated.", "Convert numpy array to json", "_summary_\n    \n    Returns:\n        _type_: _description_", "Returns a list of keypoints.", "Returns True if the end of epoch has been reached.", "Get the max width or height of a token\n    \n    Parameters\n    ----------\n    token : str\n        A token to get the max width or height of.\n    \n    Returns\n    -------\n    Dimension\n        The max width or height of the token.", "Initialize the input for the function.\n    \n    Parameters\n    ----------\n    img1_path : str or list of str\n        The path of the first image or list of images.\n    img2_path : str or None\n        The path of the second image or None.\n\n    Returns\n    -------\n    img_list : list of str\n        The list of image paths.\n    bulkProcess : bool\n        Whether the input is a list of images or not.", "Convert the given value to a Python boolean.", "_summary_\n\n    Args:\n        cfg (dict): _description_\n        signal_error (str): _description_\n        no_daemon (bool): _description_\n        blur_usage (bool): _description_\n        advertise_version (str): _description_\n        transit (str): _description_\n        rendezvous (str): _description_", "", "Check that simple and simple2 are installed correctly.", "Returns:\n        [type]: [description]", "Parses a connection string and returns a dict with the connection url and the api url.", "_get_page_title__", "Update the block data in a pipeline.", "", "Predict the next n values in the series.\n\n    Parameters\n    ----------\n    n : int\n        The number of values to predict.\n\n    Returns\n    -------\n    TimeSeries\n        The predicted values.\n\n    Raises\n    ------\n    ValueError\n        If the model has not been fit.", "Returns Downloader instance.\n    \n    Args:\n        session (requests.Session): requests.Session instance.\n        class_name (str): name of downloader class.\n        args (argparse.Namespace): arguments passed to downloader class.\n    \n    Returns:\n        Downloader: instance of Downloader class.", "Check for links in the text and return a list of links.\n    \n    Args:\n        text (str): The text to search for links.\n    \n    Returns:\n        list: A list of links found in the text.", "\u83b7\u53d6\u8d27\u5e01\u540d\u79f0\u4e0e\u4ee3\u7801\u7684\u6620\u5c04\n    :return:", "Return the date the document was created.", "", "Get the elements in the array with the given ago and size.\n    \n    :param ago: The number of elements to go back.\n    :param size: The number of elements to get.\n    :return: The elements in the array.", "ResNet18 model from the `\"Deep Residual Learning for Image Recognition\"\n    <https://arxiv.org/abs/1512.03385>`_ paper.\n    \n    Args:\n        weights (ResNet18_Weights):\n            The weights to use for the model.\n        progress (bool):\n            If True, displays a progress bar of the download to stderr.\n            Default: True.\n        **kwargs:\n            Keyword arguments.\n\n    Returns:\n        ResNet: ResNet18 model.", "Set initial condition for the ODE solver.\n    \n    Parameters\n    ----------\n    y : array_like\n        Initial condition.\n    t : float, optional\n        Initial time.\n    \n    Returns\n    -------\n    ode.set_initial_value\n        Initial condition.", "Return an iterator for the table.", "for init model", "Returns the preferred width of the given box, based on the \n    preferred width of the containing block.\n    \n    This is useful for calculating the width of a box that is \n    wrapped in a block container.\n    \n    :param box: the box to calculate the preferred width of\n    :param containing_block: the containing block\n    :return: the preferred width of the box", "Delete a document from the index.\n\n    Args:\n        doc_id (str): The ID of the document to delete.\n\n    Raises:\n        NotImplementedError: If the delete operation is not implemented for the index.", "Convert the given value to a Python boolean.", ".\n    Check if the given environment variable is set.\n\n    Args:\n        env_var (Union[ConfigKey, str]): The environment variable to check.\n\n    Returns:\n        bool: True if the variable is set, False otherwise.", "", "Clean the sentence and remove tokens in ignore_map", "Returns True if the request was successful, False otherwise.", "Returns the XML representation of this resource record.", "nni.get_next_parameter() returns a dictionary of parameters.\n    This function is used to receive trial parameters from NNI.", "Gluon implementation of the ResNet-101 model from\n        `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n        Args:\n            pretrained (bool): If True, returns a model pre-trained on ImageNet\n            num_classes (int): number of classes to classify\n            in_chans (int): number of input channels\n            **kwargs: keyword arguments for ``resnet.BottleneckGL``\n        Returns:\n            ``gluon.Model``: ResNet-101", "This function removes batch from layout \n    \n    Args:\n        layout (str): layout\n    \n    Returns:\n        str: layout without batch", "Removes stopwords from a dataframe of sentences.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        A dataframe with sentences to remove stopwords from.\n    sentence_cols : list, optional\n        The column(s) containing sentences. The default is [\"sentence1\", \"sentence2\"].\n    stop_cols : list, optional\n        The column(s) to store the result in. The default is [\"sentence1_tokens_rm_stopwords\", \"sentence2_tokens_rm_stopwords\"].\n\n    Returns\n    -------\n    pd.DataFrame\n        A dataframe with stopwords removed.", "", "for a given path, return True if it is a valid include path.", "Patch a table in BigQuery.\n\n    Args:\n        *args: Positional arguments to pass to the BigQueryHook.patch_table method.\n        **kwargs: Keyword arguments to pass to the BigQueryHook.patch_table method.\n\n    Returns:\n        None", "Args:\n        features: list of feature maps of the model\n    Returns:\n        list of RotatedBoxes", "Allow python files.", "@brief:\n        get the doc string of an object\n    @param:\n        objtxt: the object text\n    @return:\n        the doc string of the object", "timeout_signal_handler function is used to handle timeout signals.", ".", "(self, init='glorot_uniform', scale=0.5, bias=1.0, regularizers=None, constraints=None)", "Load all available rules from the passed paths.\n    \n    :param rules_paths: A list of paths to rules.\n    \n    :return: A list of Rule objects.", "", "Send static files", "This function computes the ratio and resizes the image to the model height\n    \n    Parameters\n    ----------\n    img : np.array\n        The image to resize\n    width : int\n        The width of the image\n    height : int\n        The height of the image\n    model_height : int\n        The height of the model\n    \n    Returns\n    -------\n    img : np.array\n        The resized image\n    ratio : float\n        The ratio of the image", "Train the model.", "Set the error handler for the given error code.\n    \n    Args:\n        code (int): The error code.\n        handler (function): The error handler function.", "This function is used to create a SQL agent for a given dataframe.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The dataframe to be used for the SQL agent.\n    args : dict\n        The arguments to be used for the SQL agent.\n    pred_args : dict\n        The prediction arguments to be used for the SQL agent.\n\n    Returns\n    -------\n    agent : sql_agent.SQLAgent\n        The SQL agent for the given dataframe.", "Execute Agent\n    \n    Args:\n        agent_execution_id (int): Agent Execution ID\n        time (int): Time to execute agent\n    \n    Returns:\n        None", "()\n    Starts the jail.", "Save the model to a file.\n    \n    Parameters\n    ----------\n    model_file : str or Path\n        Path to the file where the model will be saved.\n    \n    Returns\n    -------\n    None", "Flatten a multi-level DataFrame into a single level.\n    \n    Parameters\n    ----------\n    df : DataFrame\n        The multi-level DataFrame to be flattened.\n    \n    Returns\n    -------\n    DataFrame\n        The flattened DataFrame.", "\u5c06\u56fe\u7247\u8f6c\u5316\u4e3a\u5411\u91cf\n    :param filename: \u56fe\u7247\u8def\u5f84\n    :return: \u56fe\u7247\u5411\u91cf", ".\n\n    Args:\n        tensor (np.ndarray): Tensor to convert.\n\n    Returns:\n        List: List of the tensor.", "'\n    Return a string representation of the object.", "(a) -> (ln(a))", ".\n    Run a command in the background.\n    Args:\n        run_cmd (list): A list of strings representing the command to run.\n        **kwargs: Additional keyword arguments to pass to subprocess.Popen.", "Args:\n        settings (object):\n        data_dir (str):", "Get the coordinates of an element in a grid.", "", "", "Parameters\n    ----------\n    kernel_type : str\n        kernel type\n    dim : int\n        dimension of the data\n    lamb : float\n        regularization parameter\n    rho : float\n        regularization parameter\n    eta : float\n        learning rate\n    p : int\n        order of the polynomial kernel\n    gamma : float\n        gamma parameter for the RBF kernel\n    T : int\n        number of steps", ".", "Sets the description of the object.\n    \n    Parameters:\n        value (str): The new description of the object.", "Returns the year abbreviation of the given year.\n    \n    >>> year_abbreviation(1972)\n    '72'\n    >>> year_abbreviation(1989)\n    '89'\n    >>> year_abbreviation(1994)\n    '94'\n    >>> year_abbreviation(2000)\n    '00'\n    >>> year_abbreviation(2008)\n    '08'\n    >>> year_abbreviation(2012)\n    '12'\n    >>> year_abbreviation(2016)\n    '16'\n    >>> year_abbreviation(2017)\n    '17'\n    >>> year_abbreviation(2018)\n    '18'\n    >>> year_abbreviation(2019)\n    '19'\n    >>> year_abbreviation(2020)\n    '20'\n    >>> year_abbreviation(2021)\n    '21'\n    >>> year_abbreviation(2022)\n    '22'\n    >>> year_abbreviation(2", "Creates a temporary directory in the current working directory\n    and registers a cleanup function to remove it.", ".\n    Args:\n        state (dict): The state of the game.\n\n    Returns:\n        List[str]: The input keys to be used in the game.", "_tearDown_", "_set_input_type", "Returns the offset of the original data.", ", title):", "Load the model parameters from the checkpoint.", "_summary_\n    \n    _description_\n    \n    Args:\n        logger (_type_): _description_\n        log_level (_type_): _description_\n    \n    Returns:\n        _type_: _description_", "Returns the data.", ".", "Ignore the tests in the version markers. \n    \n    This is needed because pytest-version-markers doesn't work with\n    pytest-cov.", ".", "_run_api_threaded", "Robust path_join.\n    \n    Raises a UnicodeDecodeError if the path or any of the paths is\n    not a string.", "Copies the object to the destination bucket.", "()", "Returns the string of the edge_media_to_comment or edge_media_preview_comment option.\n    \n    Args:\n        media (dict): Instagram media data.\n    \n    Returns:\n        str: The string of the edge_media_to_comment or edge_media_preview_comment option.", ".\n    Args:\n        input: a dict of input data.", ".\n    Clear a block of memory.", "boxes1: (N, 4)\n    boxes2: (M, 4)", "Returns a string representation of this object.", ".convert_objects(self, convert_dates=True, convert_numeric=False,\n                        copy=True)\n\n    Convert all objects in this object to their python equivalent.\n\n    Parameters\n    ----------\n    convert_dates : bool, optional\n        Convert all dates to datetime.datetime objects.\n    convert_numeric : bool, optional\n        Convert all numeric objects to their python equivalent.\n    copy : bool, optional\n        If True, return a copy of the object.\n\n    Returns\n    -------\n    object\n        The converted object.", "Remove a bookmark.", ".\n    Adds a new entry to the index.", "Adjust the data so that the open, high, low, and close values are adjusted\n    according to the previous close value.", "gnu_hash(s)\n    \n    Returns the hash of the given string using the GNU hash algorithm.", "(self, transaction):", "(Type[Any]) -> Tuple[Any, ...]", "", "(self, X, training=True):", "Handle directory keywords.", "\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6", "Updates the number of computed tokens for all sequences.\n    \n    Args:\n        num_new_computed_tokens (int): The number of new computed tokens.", ":param item_type:\n    :param rec_src:\n    :param sr:\n    :param link:\n    :param comment:\n    :return:", "_app_errorhandler decorator.\n\n    Decorates the decorated function to update the record of the\n    exception that occurred during its execution.\n\n    :param code: The error code to use for the response.", "on the image", "", ".\n    Parameters\n    ----------\n    level_infra : LevelInfrastructure\n        LevelInfrastructure instance.\n    common_infra : CommonInfrastructure\n        CommonInfrastructure instance.\n    outer_trade_decision : OuterTradeDecision\n        OuterTradeDecision instance.", "", "Computes the style loss for the current layer.", "for a given url, return a sanitized version of the url.", "for stringify data.", "Save the current choices to the database.\n\n    :param resp: The response object.\n    :type resp: flask.Response\n    :return: None", "_handle_error(self, message, data=None)\n\n    Handles errors by writing them to the configured writeback_es endpoint.\n\n    :param message: The error message\n    :param data: The error data\n    :return: None", ".\n    Test that bigram scorer works as expected.", "sample from q(x_t|x_{t-1})", ".add_argument(self, *args, **kwargs):", "Render a dataset to a JSON-formatted string.", "Save the model for HF Trainer.\n    \n    Args:\n        trainer: transformers.Trainer\n        output_dir: str", "Filter out tokens that are not semantic\n    \n    :param uwline:\n    :return:", "Converts text to phonemes. \n    \n    Args:\n        text (str): The input text to be converted.\n        language (str): The language of the input text.\n\n    Returns:\n        str: The phonemes of the input text.", "_summary_\n\n    Args:\n        logger (_type_): _description_\n        log_level (_type_): _description_\n\n    Returns:\n        _type_: _description_", "with this method, we will sync the encoder and the decoder dictionaries", "_test_install_package_that_emits_unicode_", "Get captions for the current video", "to plot a plotly figure", "Returns a paginated list of GroupTombstone objects.", "_summary_\n    \n    Args:\n        token_ids (list): list of token ids\n    \n    Returns:\n        torch.tensor: tensor with boolean value", "\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u5151\u6362\u5238", "Load the configuration file", "Check if package is installed in the environment. \n    \n    Args:\n        package_helper: CondaPackageHelper\n        package: str\n    \n    Returns:\n        int", "Returns the embedding dimension of the model. \n    \n    :return: The embedding dimension of the model.", "_fqn_\n    Return the fully qualified name of this file.", "Parse the source code.", ".\n    Sets the volume to a given value.\n\n    :param int volume: Volume to set.\n    :return: True if successful, False otherwise.", ":type val: int\n    :rtype: str", "Stop all jobs.", ".\n    Initialize the object.", "Get the environment variables for the container. \n    \n    :return: The environment variables.", "Remove SQL from question", "Test that the repo is not valid and the key is valid.", "", ".\n    Returns:\n        str:", "Returns a field mapping object for the given fieldname. \n    If the fieldname is not in the fieldmappings dictionary, \n    a new FieldMapping object is created and added to the dictionary.", "", "_calculate_wer_", "", "Distributed training: all processes wait for the first process to do something", "Add self to the group. \n    \n    :param group: The group to add self to.\n    :type group: Group", "(1)", "", "Returns the texture of the image.", "Start a detached process and return its pid. \n    \n    This function is a wrapper around multiprocessing.Process, which allows \n    to start a detached process, and then returns its pid. \n    \n    The function takes two arguments: \n    executable - the name of the executable file to run\n    *args - arguments to pass to the executable\n    \n    The function returns the pid of the process.", "Return a tuple that can be used to sort types. \n    \n    If t is a subclass of collections.Container, return (True, repr(t))\n    Otherwise, return (False, repr(t))", "@param job:\n    @return:", "Convert a history of messages to a list of messages.", "Returns all the sender ids of the messages.", "x: (batch, 4)", "(self, frames)\n\n    def __call__(self, frame):", "Test that scan_file_for_barcodes returns a list of barcodes.", "(img) -> (img)\n    Applies the network to the input image(s)\n    Args:\n        img (tensor)", ".\n    Computes the number of tokens in a list of messages.", "A decorator that ensures that a class has only one instance.", ".\n    Returns a list of tokens from the file.", "Redis key format\n    \n    ratelimit:user_id:domain:keytype", "_finalize(self, **kwargs)\n\n    Finalize the field.\n\n    Parameters\n    ----------\n    **kwargs\n        Additional keyword arguments.", "(self,\n               num_samples:int,\n               current_device: int) -> Tensor:", ".\n    Saves the data to a HDF5 file.\n    \n    Parameters\n    ----------\n    filename : str\n        Name of the HDF5 file.\n    datapath : str\n        Path to the data to be saved.", "_summary_", "Clears the list of jobs.", ".", ":param fmt_streams: list of Stream objects", "Saves the model instance. \n    \n    :param commit: If True, saves the model instance. \n    :type commit: bool \n    :return: The model instance. \n    :rtype: Model", "forwards that are not in the local device list should be removed", "This is a function to be called by django when a model is saved.", "", "GenerateAnswer Node\n\n    This node generates a response to a user's question.\n    \n    Args:\n        input (str): The input to the node.\n        output (List[str]): The output from the node.\n        node_config (Optional[dict], optional): The configuration for the node. Defaults to None.\n        node_name (str, optional): The name of the node. Defaults to \"GenerateAnswer\".", "Get the value of the given key.\n    \n    If the key is not found, return the default value.\n    \n    If the default value is a callable, it is called to construct the default value.", "", "forwards the input through the model.", "_summary_\n    Gets the client token for the specified payment gateway.\n\n    Args:\n        gateway_name (str): The name of the payment gateway.\n        token_config (TokenConfig, optional): The token configuration. Defaults to None.\n\n    Returns:\n        str: The client token.", "Given a string of headers, return a dictionary of headers, where the keys are the header names and the values are the header values.", "Returns a list of identifiers.", ".\n    Authorize the user.\n    :param redirect_uri: The redirect URI.\n    :param client_id: The client ID.\n    :param client_secret: The client secret.\n    :param extra_params: Extra params.", "", "Generates a text using the model.", "Returns True if the traceback widget is available.", "@param assets: list of assets\n    @param account_policy: 'privileged_first' or 'first_available'\n    @param account_prefer: list of account names\n    @param host_callback: callback to call when host is ready", "Forward function.", "::\n        Write the changes to the project file.", "Initializes a LogNormal distribution.\n    \n    Args:\n        mu (Tensor): Mean of the distribution.\n        sigma (Tensor): Standard deviation of the distribution.\n        batch_size (int): Batch size of the distribution.\n        *args, **kwargs: Additional arguments to be passed to the base class.\n    \n    Returns:\n        LogNormal: A LogNormal distribution.", "Sets the active server to the given index.\n    \n    Parameters\n    ----------\n    index : int\n        The index of the server to be set as active.", ".\n    Get summary row for a package.\n\n    :param pkgname: package name\n    :param obj: object to summarize\n    :return: tuple of (display_name, sig, summary, link_name)", "Returns:\n        self.word_embeddings.weight", "Compute the power spectral density of the input signal.\n    \n    Parameters\n    ----------\n    omega : TensorLike\n        The frequency vector.\n    \n    Returns\n    -------\n    TensorVariable\n        The power spectral density.", ".", ".chunk_key_offset(self, key)\n\n    Returns the offset of the given key in the chunk.\n\n    Args:\n        key (str): The key to get the offset of.\n\n    Returns:\n        int: The offset of the key in the chunk.\n\n    Raises:\n        KeyError: If the key is not found in the chunk.", "_init_", "Sets the model to use.", "_build_arch_", "Returns the maximum number of tokens for a given model.", ".\n    .. _Searching:", "_Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to `commit` and `rollback` will not result in\n    any migrations being run.\n\n    ``pre_migrate`` and ``post_migrate`` will be called when\n    migrations are actually run.", ":param msg: \u6d88\u606f\u5bf9\u8c61\n    :param max_len: \n    :param re_sub: \n    :return:", "Cover Python code coverage", ".\n    Initialize the criterion.", "Imports a pretrained model.\n    \n    Args:\n        pretrained (str): The name of the model to import.\n        tag (bentoml.Tag): The tag of the model to import.\n        *args (t.Any): Additional arguments to pass to the model constructor.\n        tokenizer_kwds (dict[str, t.Any]): Keyword arguments for the tokenizer constructor.\n        **attrs (t.Any): Additional attributes to pass to the model constructor.\n\n    Returns:\n        bentoml.Model: The imported model.\n\n    Raises:\n        NotImplementedError: If the model import method is not implemented.", "for the case of a managed service, this method returns True", "", "for each sentence in sentences, encode it and return a list of EncodedSentence objects.", "for a given node set, return a subgraph with only those nodes.", ".\n    Adds a key/value pair to the dictionary.", "(list)", "Returns the dictionary representation of the template.", "Returns a set of references to other parameters", "", "Forward pass of the model.\n    \n    Args:\n        x: Input tensor of shape (batch_size, num_frames, num_channels).\n        emb: Input embedding tensor of shape (batch_size, num_frames, num_channels).\n        \n    Returns:\n        Output tensor of shape (batch_size, num_frames, num_channels).", ",", "(self, parser):", ".", "_get_assumed_role_arn()\n\n    Returns the ARN of the current role.", "", "Delete a pattern-name association.\n    \n    :param module_name: The name of the pattern to delete.", "", "Update the state with the latest record and cursor_ticket_date. \n    \n    :param current_stream_state: MutableMapping[str, Any] - The current state of the stream.\n    :param latest_record: Mapping[str, Any] - The latest record from the stream.\n    :return: Mapping[str, Any] - The updated state with the latest record and cursor_ticket_date.", ".\n\n    Returns True if the first token in the token stream has a default value.", ".", ".", "_start_streaming_twitter_stream", "Forward propagation.", "pop(self, index=-1) -> object\n\n    Remove and return the element at the given index in the list, or the last element if index is not given.\n\n    :param index: \n    :return:", "Return the page mode.", ".", "Get the status of the service.", "_run\n\n    Run the given apps.\n\n    :param apps:\n    :param kwargs:\n    :return:", "Check if the model is ready to be used.", "Build the architecture specific code", ".", ".\n    Returns the center of the frame.", ".\n    Sets the DNS challenge for the domain.\n\n    :param zone_id: The zone ID to set the DNS challenge for.\n    :param domain: The domain to set the DNS challenge for.\n    :param txt_challenge: The TXT challenge to set.\n    :return: The response from the Route 53 API.", "Check if a nested attribute exists.\n    \n    Args:\n        attribute_key (str): The attribute key to check.\n        attributes (Dict[str, Any]): The dictionary containing the nested attributes.\n\n    Returns:\n        bool: True if the nested attribute exists, False otherwise.\n\n    Example:\n        >>> attribute_has_nested_attributes(\"foo.bar\", {\"foo\": {\"bar\": 42}})\n        True\n        >>> attribute_has_nested_attributes(\"foo.bar\", {\"foo\": {\"bar\": {\"baz\": 42}}})\n        False\n        >>> attribute_has_nested_attributes(\"foo.bar\", {\"foo\": {\"bar\": [42]}}\n        False\n        >>> attribute_has_nested_attributes(\"foo.bar\", {\"foo\": {\"bar\": {\"baz\": 42}}})\n        False", "Returns the max length of a sequence in the data", "(str) -> None\n\n    Initialize the class.\n\n    Parameters\n    ----------\n    content : str\n        The content of the class.\n\n    Returns\n    -------\n    None\n        No return value.", "Test query dict for request in method POST", "Get historic OHLCV data for a given pair and timeframe.\n    \n    Args:\n        pair (str): The trading pair to get data for.\n        timeframe (str): The timeframe for the data.\n        since_ms (int): The timestamp in milliseconds to start fetching data from.\n        is_new_pair (bool, optional): Whether the pair is new. Defaults to False.\n\n    Returns:\n        List: A list of OHLCV data for the given pair and timeframe.", "_test_get_then_redirect_follow_redirect_with_no_redirects", ".\n    Decorator for adding command to the bot.", "(self, cfg) -> int:\n\n    Returns:\n        int: 100", "untar(file_path, extract_folder=None)\n\n    Extracts a tar file.\n    \n    Parameters\n    ----------\n    file_path : str\n        Path to the tar file to be extracted.\n    extract_folder : str, optional\n        Path to the folder where the tar file will be extracted.\n        Defaults to the parent folder of the tar file.\n\n    Returns\n    -------\n    None", ".\n    @summary: \u6dfb\u52a0\u4efb\u52a1\n    @param task:\n    @return:", "Load themes from theme directory.", "Create a file at the given path. \n    If the directory structure does not exist, it will be created. \n    \n    Parameters:\n    path (str): The path to the file to be created.\n    create_dirs (bool): Whether to create the directory structure if it does not exist.\n    \n    Returns:\n    None", "(self, model_fn, noise_schedule, predict_x0=True, thresholding=False, max_val=1., variant='bh1')\n\n    Initialize the class.\n\n    Parameters\n    ----------\n    model_fn : function\n        The model function to use.\n    noise_schedule : function\n        The noise schedule to use.\n    predict_x0 : bool, optional\n        Whether to predict x0. Default is True.\n    thresholding : bool, optional\n        Whether to threshold the predictions. Default is False.\n    max_val : float, optional\n        The maximum value to use for thresholding. Default is 1.\n    variant : str, optional\n        The variant to use. Default is 'bh1'.", ".", "Return the center of the arc.", "Run tests with pytest.", "(self, image_path: str) -> Image.Image:", ".\n\n    Parameters\n    ----------\n    tensor : np.ndarray\n        The tensor to be converted.\n\n    Returns\n    -------\n    List\n        The list representation of the tensor.", "::\n\n        Shutdown the global client.", "Returns the active server.", "(self,\n            num_samples:int,\n            current_device: int) -> Tensor:", "_summary_", "Update the status from the cache.", "(TODO)", "(init)\n    Initialize the spinner.\n    \n    Args:\n        message (str, optional): The message to display. Defaults to \"Loading...\".\n        delay (float, optional): The delay between each character. Defaults to 0.1.\n        plain_output (bool, optional): Whether to output the spinner in plain text. Defaults to False.\n    \n    Returns:\n        None", "(1) init_data_by_df: DataFrame type data, \n        (2) dtype: str, default 'stock_day', \n        (3) if_fq: str, default 'bfq'", "", "Returns a list of dictionaries containing the target and parameters for each\n    request.", ".\n    \n    Parameters\n    ----------\n    X : {array-like, sparse matrix} of shape = [n_samples, n_features]\n        Training data.\n    \n    Returns\n    -------\n    y : {array-like, sparse matrix} of shape = [n_samples, n_outputs]\n        Predicted values.", "Checks if the element is floated. \n    \n    :return: True if the element is floated, False otherwise.", "Patch the chat completion API with the desired mode.\n\n    Args:\n        client (Union[OpenAI, AsyncOpenAI]): The OpenAI or AsyncOpenAI client.\n        mode (Mode, optional): The desired mode for the chat completion API. Defaults to Mode.FUNCTIONS.\n\n    Returns:\n        Union[OpenAI, AsyncOpenAI]: The patched client.", ".", "_apply_gradients.\n    Args:\n      grads_and_vars: A list of pairs of (gradient, variable).\n      global_step: int32 scalar, the global step.\n      name: Optional name for this operation (default: 'apply_gradients').\n    Returns:\n      A list of (gradient, variable) pairs that are the same as the input.", ".\n    Returns:\n        Dict[str, Dict].", ".", "Returns a path relative to the site path.", "(self) -> None", "", "_handle_error\n\n    Send error message to writeback_es.", "", "Initialise all the global variables.", "to be called by the expert to transform the data into a gate", "Get the list of available packages.\n    \n    Returns:\n        dict[str, set[str]]: A dictionary of package names to their available versions.", "_set_tag\n    \n    Set the tag for the cipher context.\n    \n    :param tag: The tag to set.\n    :type tag: str\n    \n    :return: None\n    :rtype: None\n    \n    :raises: Exception", "Read a template from a file.\n\n    Args:\n        cls (type): The class of the template.\n        file_path (Union[Path, str]): The path to the file.\n\n    Returns:\n        PipelineTemplate: The template.", ".\n    Loads the model.", ".\n    Check if email is in the list of known suspicious email addresses.\n\n    :param email: The email to check.\n    :return: True if the email is in the list of known suspicious email addresses, False otherwise.", "Sets the speech for the current message. \n    \n    Args:\n        speech (str): The text to be spoken.\n        speech_type (str): The type of speech to be used.\n        extra_data (Any | None): Additional data to be included in the speech.", "This method is called when the operation completes. \n    \n    Args:\n        *args:\n        **kwargs:", ".\n    Load the index file from the filesystem.\n\n    :param version_string: The version string to load the index for.\n    :return: The index contents.\n    :raises: IndexLoadError if the index file cannot be read.", "This function checks if a package is excluded from the analysis.\n\n    Args:\n        package (str): The name of the package.\n\n    Returns:\n        bool: True if the package is excluded, False otherwise.", "Generate a domain key", "", ".\n    Returns:\n        bool: True if the cursor is at the start of the file.", "for like from image", "Sigmoid function", "Returns a timeline data for a given doctype and name", ".", "Return the list of objects that this user can read.", "", ".\n    >>> lexify()\n    '????'\n    >>> lexify('abc')\n    'abc'\n    >>> lexify('abc123')\n    'abc123'\n    >>> lexify('abc123?')\n    'abc123?'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lexify('abc123???')\n    'abc123???'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lexify('abc123????')\n    'abc123????'\n    >>> lex", "Pauses the playback.", "Check if the action is a standard action", ".", "_init__\n\n    :param kwargs:", "(str, list[str]) -> None:\n\n    Set the upstream dependencies of the current package.\n\n    :param nodes: The upstream dependencies of the current package.\n\n    :type nodes: list[str]", "Formata valores de um dataframe para uma lista de listas.\n    \n    :param value: Valor a ser formatado.\n    :type value: Any\n    :return: Lista de listas formatada.\n    :rtype: List[Any]", "Build a sdist in the given directory\n    \n    Args:\n        sdist_directory (str): Path to the directory where the sdist should be created\n        config_settings (dict): Configuration settings for the build\n    \n    Returns:\n        str: The name of the sdist file", ":param n_samples:\n    :param change_points:\n    :return:", "Get the Dropbox home location", "", "Draw samples from the model.\n    \n    Args:\n        num_samples: The number of samples to draw.\n    \n    Returns:\n        A numpy array of shape (num_samples, 28, 28) containing the samples.", "test that a notebook can be read and written to disk and back again", "Sends a message to the parent thread.\n    \n    :param kwargs: Message to send.\n    \n    :return: None", ".\n    Sets the maximum order size for a given security.\n    :param sid: Security ID.\n    :param max_shares: Maximum number of shares.\n    :param max_notional: Maximum notional.\n    :return: None.", "_init__\n    \n    Args:\n        mlflow_autologger (Optional[Union[str, MfeInternalMLFlowAutologgerState]]):\n            If specified, this is the MLflow autologger state.\n            If not specified, this is the default state.", ".\n    Compares two statements for similarity.", "(object)\n    Initialize the exception.", ".", "Get graph info", ".format_usage(self, ctx, formatter)", "_init__", "Cancels a job.", "Finds the minimum length of all tensors in the dictionary\n    \n    Returns:\n        int: minimum length of all tensors in the dictionary", "", "Parses a string like '1-3,5,7' into a list of ints.", ".\n\n    :param time_func:\n    :param apply_to:\n    :param keep_duration:\n    :return:", "Initialise population randomly.", "_inverse_transform\n\n    Args:\n        X (sp.coo_matrix): sparse matrix with non-zero values\n\n    Returns:\n        list: list of lists of terms", ".\n    Returns:\n        str:", "login to nijie.info", "_summary_\n\n    Returns:\n        _type_: _description_", ")def isalpha(a).py\n<|fim_prefix|>def isalpha(a):", "Returns absolute url for this object.", "Restart the wormhole server.\n\n    :param cfg: wormhole configuration\n    :param signal_error: signal error\n    :param no_daemon: no daemon\n    :param blur_usage: blur usage\n    :param advertise_version: advertise version\n    :param transit: transit\n    :param rendezvous: rendezvous\n    :param disallow_list: disallow list\n    :return:", ".", "wav: np.array\n    qc: int", ".\n    Creates examples for the training, dev and test sets.", ".", "_init_", "Fetch a single row from the result set.", "Decorator for adding routes.", "_execute\n\n    Execute a command with the given arguments.\n\n    Returns the return code, stdout, and stderr.", "_init_", ".\n    Test that a connection is not shared between multiple stacks.", ".\n    Computes the gradients for the current model.", "\u83b7\u53d6\u4e58\u5ba2\u7684\u5ea7\u4f4d\u7c7b\u578b\u5b57\u7b26\u4e32\n    :param set_type: \u4e58\u5ba2\u7684\u5ea7\u4f4d\u7c7b\u578b\n    :return:", "_summary_\n\n    Args:\n        name (str): _description_\n        elem_type (OptionalProto.DataType): _description_\n        value (Optional[Any]): _description_\n\n    Returns:\n        OptionalProto: _description_", ".\n    Sets the value of the given key in the memo.\n\n    :param memo: the memo\n    :param k: the key\n    :param v: the value\n    :return: None", ":param module:\n    :param module_in:\n    :param module_out:\n    :return:", "test_suggested_column_names_with_table_dot", "to create a deep copy of the HeatmapsOnImage object.", "", "Finds a node with a given value in a linked list.\n    \n    Args:\n        value (int): The value to search for in the linked list.\n    \n    Returns:\n        Node: The node with the given value, or None if not found.", ".\n\n    :param args:\n    :param config:", "(str) -> bool\n    \n    Decrypt the entries in the list with the given password hash.\n    \n    Return True if the entries were successfully decrypted, False otherwise.", "Exports a journal to a file or directory.\n    \n    Args:\n        cls (class): The class to export.\n        journal (dict): The journal to export.\n        output (str): The output file or directory.\n    \n    Returns:\n        str: The output file or directory.", "Return a dictionary of all the model's attributes.\n    \n    :param model: The model to get the attributes from.\n    :type model: str\n    :param dimensions: The dimensions of the model.\n    :type dimensions: str\n    :param organization: The organization to use.\n    :type organization: str\n    :param api_base_url: The API base URL to use.\n    :type api_base_url: str\n    :param prefix: The prefix to use.\n    :type prefix: str\n    :param suffix: The suffix to use.\n    :type suffix: str\n    :param batch_size: The batch size to use.\n    :type batch_size: int\n    :param progress_bar: Whether to show a progress bar.\n    :type progress_bar: bool\n    :param meta_fields_to_embed: The fields to embed in the metadata.\n    :type meta_fields_to_embed: list[str]\n    :param embedding_separator: The separator to use for embedding fields.\n    :type embedding_separator: str\n    :param api_key: The API", "'Return the value of the attribute as a string.", ".", ".\n    Checks if the board is valid.", "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_", "_test_org_associate_with_junk_data", ".\n    Convert a CSC matrix to CSR format.\n    Parameters\n    ----------\n    copy : bool, optional\n        If True, a copy of the matrix is made. Default is False.\n    Returns\n    -------\n    csr : SparseCSC\n        Sparse matrix in CSR format.", "Args:\n        in_channels (int): Number of input channels.\n        out_channels (int): Number of output channels.\n        kernel_size (int): Size of the convolution kernel.\n        stride (int): Stride of the convolution.\n        bias (bool, optional): If True, add a bias term to the output. Defaults to True.", "Expands environment variables in a string.\n    \n    Args:\n        val (str): The string to expand.\n        env (Mapping[str, str], optional): The environment variables to use. Defaults to {}.\n        fallback_to_os_env (bool, optional): Whether to use os.environ if the variable is not found in env. Defaults to True.\n\n    Returns:\n        str: The expanded string.\n\n    Example:\n        >>> expandvars('${FOO}', {'FOO': 'bar'})\n        'bar'\n        >>> expandvars('${FOO:default}', {'FOO': 'bar'})\n        'bar'\n        >>> expandvars('${FOO:default}', fallback_to_os_env=False)\n        '${FOO:default}'\n        >>> expandvars('${FOO:default}', fallback_to_os_env=False, env={'FOO': 'bar'})\n        'bar'\n        >>> expandvars('${FOO:default}', fallback_to_os_env=False, env={'FOO': None})\n        '${FOO:default}'", "Converts a Lambda ARN to a canonical ARN.", "_create_help_command", ".\n    :param index:\n    :return:", "Prepares image for blob. \n    \n    Args:\n        im: image to be prepared.\n        pixel_means: mean pixel values of the image.\n        target_size: target size of the image.\n        max_size: maximum size of the image.\n    \n    Returns:\n        im: image prepared for blob.\n        im_scale: scale of the image.", ":type val: int\n    :rtype: int", ", batch_size, X_val, Y_val, trigger, val_method=None)\n\n    Sets the validation data.\n\n    Args:\n        batch_size (int): batch size\n        X_val (ndarray): validation data\n        Y_val (ndarray): validation labels\n        trigger (int): trigger for validation\n        val_method (list): validation methods", "", "Get a random delay between 1 and 3 seconds.", "for the training data.", "human readable file size", ".\n    Returns the transport to use for a given URL.\n\n    :param url: The URL to check.\n    :return: The transport to use for the given URL.", "Encodes a text into a sequence of hidden states.\n    \n    Args:\n        text (str): The text to encode.\n        batch_size (int): The batch size to use for encoding. Defaults to 32.\n        as_numpy (bool): Whether to return the encoded hidden states as a numpy array. Defaults to False.\n        \n    Returns:\n        np.ndarray or list: If as_numpy is True, returns a numpy array of the encoded hidden states. Otherwise, returns a list of encoded hidden states.", "Parse entities from the Telegram API.", "Returns a human-readable file size", ":param X:\n    :return:", ".\n    Check if the user is allowed to write the given ref.\n\n    :param username: the user to check\n    :param ref: the ref to check\n    :return: True if the user is allowed to write the ref, False otherwise", "Sets the output of the nodes to the given data.\n    \n    Args:\n        data (list): The data to set the output to.", "_summary_\n\n    Args:\n        path (_type_): _description_\n\n    Returns:\n        _type_: _description_", "Checks if the given type is an async def.", "for converting a MaskedArray to a list", "Remove the current file from the watch list.\n    \n    Returns True if the command was successfully executed.", ".get_release_info(name, version)", ".\n\n    Returns:\n        str: Ending note of the note.", ".", "::class::\n    \n    Returns:\n        str: Description of the class.", "Gets the examples for the language specified in the config file.\n    \n    Args:\n        data_dir (str): Path to the data directory.\n        \n    Returns:\n        list: List of examples.", "Returns a list of all providers found by lspci.", "Test that the set_cookie method adds the cookie to the response.", "Parse the query string from a URL and return the value of the specified parameter.\n    \n    Args:\n    url (str): The URL to parse.\n    param (str): The name of the parameter to retrieve.\n    \n    Returns:\n    str: The value of the parameter.", "x is the argument to the function\n    y is the same as x", "Args:\n        configs (configs): configs object.\n        label_map_path (str): label map path.", "Loads the album data from the library.", "Check mode for the script.", "Creates an optional field with the given name, type, and value.", "'set_cookie' is a helper function that sets a cookie with the given name and value.\n\n    Args:\n        name (str): The name of the cookie.\n        value (str): The value of the cookie.\n\n    Returns:\n        flask.Response: The response object with the cookie set.", "Returns an iterator over the entries in the directory.", "Initialize the Fabric class.", "", "", "", "Remove useless info from coco object.\n    \n    Parameters\n    ----------\n    coco : COCO\n        coco object\n    \n    Returns\n    -------\n    coco : COCO\n        coco object without useless info", "Returns True if all events in the event list are successful.", "Test broadcasting.", "Returns the last error text if it exists, else False.", ".\n    \n    Returns:\n        OptionList:", ".", "Tracks: a list of Track objects\n    Detections: a list of Detection objects\n    metric: 'cosine' or 'euclidean'\n    \n    Returns: a matrix of shape (len(tracks), len(detections))", "Returns a list of strings containing the names of all the slots used by this\n    optimizer.", "Kill the process", ".\n    Get the API version.\n\n    :return: The API version.\n    :rtype: str", "Main function", ".rng() -> random.PRNG\n    \n    Return a PRNG object.", "_find_by_name(self, name, package, subgraph, nodetype)\n\n    Find a node by name.\n\n    Args:\n        name (str): name of node to find\n        package (str): name of package to find node in\n        subgraph (str): subgraph to search\n        nodetype (str): type of node to find\n\n    Returns:\n        dict: node object", "Test that only with multiples works."], ["for pickle files", "Save the model to the output directory.\n    \n    Args:\n        trainer (transformers.Trainer): The trainer object.\n        output_dir (str): The output directory.", ".\n    Returns\n    -------\n    numpy.ndarray\n        A binary mask with the same shape as self.labels,\n        indicating the label of each pixel.", ",\n    :param is_img2img:\n    :return:", "def get_output_keys(datasets):", "Print to stderr or stdout, depending on the value of kwargs[\"file\"]", "Returns an example input, system prompt, and user prompt for the dispatcher.", "Returns True if any of the preferences are enabled.", "Run the Dockerfile build.", ".\n    Returns:\n        ResultInterface:", "_invoke_callback_with_context_", "_summary_\n    Returns:\n        _type_: _description_", ":type nums: List[int]\n    :type target: int\n    :rtype: int", ".", ", user):", "", "Initialize the class.", "_hook_", ".", "for the given element, check if the element has the key\n    and if the key matches the regex", "This function should return a string in the format:\n    \"Basic realm=\\\"<realm>\\\"", "This function takes two words as input and returns a dictionary with the output.", "Convert all the values in the dictionary to the specified type.", "Read a string from the user.\n    \n    :param prompt: prompt to display to the user\n    :param float: if True, read a float instead of a string\n    :return: the string entered by the user", ".\n    Convert a protobuf DeleteDatasetMessage to a DeleteDatasetMessage", "Run the model on a signal.\n    \n    Parameters\n    ----------\n    wavsignal : ndarray\n        Signal to run the model on.\n    fs : int, optional\n        Sampling frequency of the signal. The default is 16000.\n    \n    Returns\n    -------\n    ndarray\n        The output of the model.", "Checks the cache for errors and prints them out.", "(self, value=NAN, size=1)\n\n    @summary\n    @param value:\n    @param size:\n    @return:", "Close the file.", "\u4e0a\u4f20\u6587\u4ef6\u5230\u5fae\u4fe1\u670d\u52a1\u5668\n    :param fileDir: \u6587\u4ef6\u8def\u5f84\n    :param isPicture: \u662f\u5426\u662f\u56fe\u7247\n    :param isVideo: \u662f\u5426\u662f\u89c6\u9891\n    :param toUserName: \u63a5\u6536\u65b9\u5e10\u53f7\uff08\u6536\u5230\u7684OpenID\uff09\n    :param file_: \u6587\u4ef6\u5bf9\u8c61\n    :param preparedFile: \u51c6\u5907\u597d\u7684\u6587\u4ef6\u5bf9\u8c61\n    :return:", "for example:\n\n    x = [1, 2, 3, 4, 5]\n    y = [10, 20, 30, 40, 50]\n\n    plot_bar_chart(x, y)", ",", "CLI", "", "Removes all the special characters from the given text.", ".format_tb(exc_traceback, limit=None)\n\n    Return a string containing a traceback formatted as a list of lines.\n\n    The optional limit argument specifies the maximum number of stack frames to\n    include. If None, all frames are included.", "Close the file", "Read a Jupyter Notebook file. \n    \n    Parameters\n    ----------\n    nb_file : str\n        Path to the notebook file.\n    format_name : str, optional\n        The format name of the notebook file.\n        \n    Returns\n    -------\n    notebook : nbformat.v4.NotebookNode\n        The notebook object.", "Check if the target is vulnerable", ":param key: \n    :param value: \n    :param sigmaparser: \n    :return:", "(Callable)", "Checks if the given synset is a valid noun synset for the given word.\n    \n    Args:\n        synset (Synset): The synset to check.\n        word (str): The word to check.\n    \n    Returns:\n        bool: True if the synset is a valid noun synset for the given word, False otherwise.", "for Python 2.x", ".\n    Returns:\n        list: A list of strings representing the names of the microphones on the system.", ".\n    Returns:\n        str: The string representation of this object.", "Open an ASCII file for reading.\n\n    Args:\n        filename (str): The name of the file to open.\n        mode (str): The mode to open the file in.\n\n    Returns:\n        file: The file object.", ".\n    Sets the value of a cell.\n\n    Parameters\n    ----------\n    col : Column\n        The column to set the value of.\n    row : Row\n        The row to set the value of.\n    val : Any\n        The value to set.\n\n    Raises\n    ------\n    ValueError\n        If the type of the value does not match the type of the column.", "Creates a message body that can be sent to a mobile device. \n    \n    :param message_context: The message context\n    :param subscriber: The subscriber\n    :return: The message body", "", "def foo():", "Parses a command and accompanying text from a user input string.\n    \n    Args:\n        input_str (str): The user input string.\n    \n    Returns:\n        tuple: A tuple containing the command and accompanying text, or None if the input string does not contain a command.", ".\n    Returns:\n        bool: True if the command has output, False otherwise.", "Prepare the build directory.", "_test_dmc_hs_fromfile()\n\n    Test the Doc2Vec model with a corpus file.", "Initializes a new instance of the Progress class.\n\n    Parameters:\n    step (int): The number of steps to display progress for.\n    file (file-like object): The file to write progress information to.", "This is a wrapper for the _log method to log warnings.", "_graphs_list_view_", "", "_summary_", ".", ".\n    Args:\n        args: argparse.ArgumentParser.", ".", "for domain", "", "Returns the width of the nested hue chart.", ".\n    Returns:\n        Optional[Callable[[torch.nn.Module, bool, int], bool]]:\n            A function that wraps the given module to enable flash attention.", "\u6279\u91cf\u91cd\u547d\u540d\u6587\u4ef6\n    :param work_dir:\n    :param old_ext:\n    :param new_ext:\n    :return:", "Return the size of the tree", "Read config file.", ".\n\n    Returns a random sample of standard exponential variables.\n\n    Parameters\n    ----------\n    size : int, optional\n        Size of the sample. If None, the sample size is automatically\n        determined.\n    dtype : dtype, optional\n        The data type of the sample.\n\n    Returns\n    -------\n    x : ndarray\n        Sample of standard exponential variables.\n\n    Notes\n    -----\n    This is the inverse of the standard normal distribution.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Standard_exponential_distribution", ".\n    Test to check if the function count_components returns the correct value.", "import unittest\nfrom unittest.mock import patch\nfrom other_mock_func import other_mock_func\n\nclass TestMockFunc(unittest.TestCase):\n\n    def test_mock_func(self):\n        with patch('other_mock_func.other_mock_func') as mock_func:\n            mock_func.return_value = [1, 2, 3, 4]\n            result = other_mock_func(1, 2, 3, 4)\n            self.assertEqual(result, [1, 2, 3, 4])\n\nif __name__ == '__main__':\n    unittest.main()", "_init__\n    Initialize the ComponentJobOutput object", ".\n\n    Returns:\n\n        bool: True if rewrite engine is on, False otherwise.", "Downloads data files and returns a list of `SplitGenerators`.", "'CLI'", "Build a new session with the given session ID and system prompt.\n\n    Args:\n        session_id (str): The ID of the session.\n        system_prompt (str, optional): The system prompt for the session. Defaults to None.\n\n    Returns:\n        Session: The newly created session.", "", ".", ".", "Return the number of iterations in an epoch.", "Computes a matrix multiplication between two tensors.\n    \n    Args:\n        x (torch.Tensor): The first tensor.\n        y (torch.Tensor): The second tensor.\n    \n    Returns:\n        torch.Tensor: The result of the matrix multiplication.", "Initialize the class.", "\"\n    target = Target(host=\"127.0.0.1\", port=8080)\n\n    exploit = Exploit()\n    exploit.target = target.host\n    exploit.port = target.port\n\n    assert exploit.check()\n    assert exploit.run() is None", "(Callable[Dict[str, Any], Dict[str, Any]])", "Set the key to be used for encryption/decryption.\n    \n    :param key: The key to be used for encryption/decryption.\n    :type key: str", "_create_vision_transformer", "Computes the log-probability of a value in a given range of values.", "Callback method for receiving messages from the MQTT broker.\n    \n    Args:\n        topic (str): The topic to which the message was published.\n        data (Any): The message data.\n    \n    Returns:\n        None\n    \n    Raises:\n        NotImplementedError: If the callback method is not implemented.", "Get the Dropbox home folder location.", "This method is called when the snapshot is created.", "Convert a numpy array to a JSON-serializable object. \n    \n    Parameters\n    ----------\n    obj : numpy array\n        The array to convert.\n        \n    Returns\n    -------\n    list\n        The JSON-serializable array.", "Check if the given list of integers is a sequence of integers.", ".\n    Converts the bounding box into keypoints.", "Return true if the iterator has no more elements", "Returns the width and height of a token. \n    \n    If the token is a percentage, it is converted to pixels. \n    \n    If the token is a number, it is returned as is. \n    \n    If the token is a keyword, it is returned as is. \n    \n    If the token is a string, it is returned as is. \n    \n    If the token is a unitless number, it is returned as is. \n    \n    If the token is a unitless number with a unit, it is returned as is. \n    \n    If the token is a unitless number with a unit, it is returned as is. \n    \n    If the token is a unitless number with a unit, it is returned as is. \n    \n    If the token is a unitless number with a unit, it is returned as is. \n    \n    If the token is a unitless number with a unit, it is returned as is. \n    \n    If the token is a unitless number with a unit, it is returned as is. \n    \n    If the token is a unitless number with", "Initialize input images\n    \n    Parameters\n    ----------\n    img1_path : string\n        path of image 1\n    img2_path : string, optional\n        path of image 2, by default None\n    \n    Returns\n    -------\n    img_list : list\n        list of image paths\n    bulkProcess : boolean\n        True if img1_path is a list, False otherwise", "Convert a string to a python boolean value.", "Start the wormhole server. \n    \n    Args:\n        cfg (dict): The configuration dictionary.\n        signal_error (bool): If true, the server will signal error.\n        no_daemon (bool): If true, the server will not be daemonized.\n        blur_usage (bool): If true, the server will blur usage.\n        advertise_version (bool): If true, the server will advertise version.\n        transit (bool): If true, the server will use transit.\n        rendezvous (bool): If true, the server will use rendezvous.\n    \n    Returns:\n        None", "Check if the layout has been generated.", "virtualenv is not needed", "Returns:\n        [type]: [description]", "_from_node_impl__", "Return the page title.", "Update the block with the data provided in the request body. \n    \n    :param pipeline_uuid: The UUID of the pipeline.\n    :param block_uuid: The UUID of the block.\n    :param data: The data to update the block with.\n    :return: The updated block.", ":param data:\n    :param next:", "Predict the next `n` values of the series.\n\n    Parameters\n    ----------\n    n : int\n        The number of values to predict.\n\n    Returns\n    -------\n    TimeSeries\n        The predicted values.\n\n    Raises\n    ------\n    ValueError\n        If the model has not been fit.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_regression\n    >>> from sklearn.linear_model import LinearRegression\n    >>> from sklearn.compose import make_column_transformer\n    >>> from sklearn.pipeline import make_pipeline\n    >>> from sklearn.preprocessing import StandardScaler\n    >>> from sklearn.compose import ColumnTransformer\n    >>> from sklearn.compose import make_column_transformer\n    >>> from sklearn.preprocessing import StandardScaler\n    >>> from sklearn.compose import ColumnTransformer\n    >>> from sklearn.compose import make_column_transformer\n    >>> from sklearn.preprocessing import StandardScaler\n    >>> from sklearn.compose import ColumnTransformer\n    >>> from sklearn.compose import make_column_transformer\n    >>> from sklearn.preprocessing import StandardScaler\n    >>> from sklearn.compose import ColumnTransformer\n    >>> from sklearn.compose import make_column_transformer\n    >>>", "Get downloader class by class_name.", "This function checks for links in the text.\n        \n        Parameters:\n            text (str): The text to check for links.\n        \n        Returns:\n            list: A list of URLs found in the text.\n        \n        Example:\n            >>> text = \"Here is a link: https://example.com\"\n            >>> check_for_links(text)\n            ['https://example.com']", ":return:", "This function is used to create a date created field in the database.", "v", "Get the last n elements.\n    \n    Args:\n        ago (int, optional): The number of elements to return. Defaults to 0.\n        size (int, optional): The number of elements to return. Defaults to 1.\n    \n    Returns:\n        list: The last n elements.", "Constructs a ResNet-18 model.\n    \n    Args:\n        weights (ResNet18_Weights): The weights to load.\n        progress (bool): If True, displays a progress bar of the download to stderr.\n        **kwargs: Keyword arguments that are passed to the model's constructor.\n    \n    Returns:\n        ResNet: A ResNet-18 model.", "Sets the initial value of the system.\n    \n    Parameters\n    ----------\n    y : array_like\n        Initial values of the system.\n    t : float, optional\n        Initial time.\n    \n    Returns\n    -------\n    ode.set_initial_value : function\n        Function to set the initial value of the system.\n    \n    Notes\n    -----\n    The initial value is stored in the tmp array.", "Return an iterator over the elements of this collection.", "(self, device)\n    \n    Initialize the model.\n    \n    Args:\n        device (str): The device to use for training.", "Return the preferred width of the given box. \n    \n    If the box is a block container, it returns the preferred width of the \n    first block in the container. \n    \n    If the box is an inline box, it returns the preferred width of the box. \n    \n    If the box is a line box, it returns the preferred width of the line. \n    \n    If the box is a block, it returns the preferred width of the block. \n    \n    If the box is a line, it returns the preferred width of the line. \n    \n    If the box is a paragraph, it returns the preferred width of the paragraph. \n    \n    If the box is a list, it returns the preferred width of the list. \n    \n    If the box is a table, it returns the preferred width of the table. \n    \n    If the box is a table row, it returns the preferred width of the table row. \n    \n    If the box is a table cell, it returns the preferred width of the table cell. \n    \n    If the box is a table header cell, it returns the preferred width of", "Delete a document from the index. \n    \n    Args:\n        doc_id (str): The ID of the document to delete.\n        **delete_kwargs (Any): Additional keyword arguments to pass to the underlying index implementation.\n    \n    Raises:\n        NotImplementedError: If the underlying index implementation does not support delete.", "Converts a boolean value to a Python boolean value.\n    \n    Args:\n        value (str): The boolean value to convert.\n    \n    Returns:\n        bool: The converted boolean value.", ".\n    Checks if the environment variable is present.\n    Args:\n        env_var (Union[ConfigKey, str]): The environment variable to check.\n    Returns:\n        bool: True if the environment variable is present, False otherwise.", "Add a GET operation to the request.\n    \n    Args:\n        fmt (str): Format of the operation.\n        offset (int): Offset of the operation.\n    \n    Returns:\n        self: The request object.", "Clean the sentence\n    \n    Args:\n      sentence (str): The sentence to be cleaned\n      ignore_map (dict): A dictionary containing the tokens to be ignored\n      bpe_delimiter (str): The delimiter used by BPE\n\n    Returns:\n      str: The cleaned sentence", "Returns:\n        bool: True if the request was successful, False otherwise.", "Returns the XML body of the resource record.", "Get trial parameters from NNI.\n    \n    Returns:\n        dict: trial parameters.", "Gluon implementation of ResNet-101 (GLU-ResNet-101)\n        `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1801.04381.pdf>`_\n        Args:\n            pretrained (bool): If True, returns a model pre-trained on ImageNet\n            num_classes (int): number of classes\n            in_chans (int): number of input channels\n            **kwargs (dict): keyword arguments for model creation", "This function removes the batch from the layout", "Remove stopwords from sentence tokens.\n    \n    Args:\n        df (pandas.DataFrame): Dataframe containing sentences.\n        sentence_cols (list, optional): List of columns containing sentences. Defaults to [\"sentence1\", \"sentence2\"].\n        stop_cols (list, optional): List of columns to store stopwords removed sentences. Defaults to [\"sentence1_tokens_rm_stopwords\", \"sentence2_tokens_rm_stopwords\"].\n    \n    Returns:\n        pandas.DataFrame: Dataframe with stopwords removed sentences.", "Test delete dataset with success", ".", "_summary_\n\n    Args:\n        *args (Any):\n        **kwargs (Any):\n\n    Returns:\n        None:", "Args:\n        features: list of feature maps, where each feature map is a Tensor of shape\n            (batch_size, height, width, channels)\n    Returns:\n        list of rotated boxes, where each rotated box is a Tensor of shape\n            (batch_size, num_anchors, 4)", "", "Return the docstring of the object.", "Signal handler for SIGALRM", "Setup the task.", "(self, init='glorot_uniform', scale=0.5, bias=1.0, regularizers=None, constraints=None)\n\n    Initialize a new instance of the `Dense` layer.\n\n    # Arguments\n        init: name of initialization function (see [initializations](../initializations.md)).\n        scale: scaling factor for normal (Gaussian) initialization.\n        bias: whether to initialize biases (i.e., weights) to zero.\n        regularizers: dict mapping regularizers to their corresponding values.\n        constraints: dict mapping constraints to their corresponding values.\n\n    # References\n        - [Glorot & Bengio 2010](http://www.cs.toronto.edu/~bengio/post/taylor_one_param/)\n        - [He et al. 2015](http://proceedings.mlr.press/v9/he15.html)", "", "(self, args=(), kwargs=None, rtn='')\n\n    def __init__(self, args=(), kwargs=None, rtn=''):", "Sends static files to the client", ":param img:\n    :param width:\n    :param height:\n    :param model_height:\n    :return:", "Train the model.", "Set the error handler for a specific error code.\n    \n    Parameters:\n    code (int): The error code to set the handler for.\n    handler (function): The error handler function.\n    \n    Returns:\n    None", "This function is used to generate a SQL agent from a dataframe.", "Execute agent", ".", "Save the model.\n    \n    Args:\n        model_file (str or Path): File path to save the model.\n    \n    Returns:\n        None", "Flatten a dataframe by unflattening the index.\n    \n    Parameters\n    ----------\n    df : DataFrame\n        Input dataframe.\n\n    Returns\n    -------\n    DataFrame\n        Unflattened dataframe.\n    \n    Example\n    -------\n    >>> df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\n    >>> df.set_index(['col1', 'col2'], inplace=True)\n    >>> df\n    \n    +-------+-------+\n    | col1  | col2  |\n    +-------+-------+\n    | 1     | 4     |\n    | 1     | 5     |\n    | 1     | 6     |\n    | 2     | 4     |\n    | 2     | 5     |\n    | 2     | 6     |\n    | 3     | 4     |\n    | 3     | 5     |\n    | 3     | 6     |\n    +-------+-------+\n    \n    >>> unflatten(df)", "\u5c06\u56fe\u50cf\u6587\u4ef6\u8f6c\u5316\u4e3a\u5411\u91cf\n    \n    Parameters\n    ----------\n    filename : \u56fe\u50cf\u6587\u4ef6\u540d\n    \n    Returns\n    -------\n    returnVect : \u5411\u91cf", "to list", "Returns a string representation of the object.", ".ln(self, a)\n\n    Returns the natural logarithm of a.", "(self, run_cmd: str, **kwargs):", ".\n    Returns:\n        :obj:`Dataset`", "Find the coordinates of a given element.\n    \n    :param cls: the class that defines the element\n    :param element: the element to find the coordinates of\n    :return: the coordinates of the element", "Check if a port is in use", "Initialize the class with the fields passed in.", "Parameters\n    ----------\n    kernel_type : str, optional\n        The kernel type. The default is 'primal'.\n    dim : int, optional\n        The dimension of the input data. The default is 30.\n    lamb : float, optional\n        The regularization parameter. The default is 1.\n    rho : float, optional\n        The step size. The default is 1.0.\n    eta : float, optional\n        The learning rate. The default is 0.1.\n    p : int, optional\n        The number of neighbors. The default is 10.\n    gamma : float, optional\n        The kernel bandwidth. The default is 1.\n    T : int, optional\n        The number of epochs. The default is 10.", ".\n    :param id: The id of the line.\n    :param first_line: The first line of the text.", "", "Return the year abbreviation.", "Creates a temporary directory. \n    \n    Returns:\n        str: The path to the created directory.", ".\n    Gets the input keys for the current node.\n\n    Args:\n        state (dict): The state of the game.\n\n    Returns:\n        List[str]: The input keys.", "Tears down the test environment.", "_set_input_type\n    Sets the type of a socket.", "Returns the offset of the original data of the object.", "Updates the title of the spreadsheet.\n\n    Args:\n        title (str): The new title of the spreadsheet.\n\n    Returns:\n        dict: The response from the API.", "", "_log_it\n    This is the decorator that logs the before and after of the decorated function.", "Returns:\n        BatchDataType: Data type of the batch.", ".\n    Args:\n        current_input (Any): The current input.\n        new_input (Any): The new input.", "Ignore the test module if it is a version-specific module.", ".", ":param api_port:\n    :param address:\n    :return:", "Join a path with multiple paths.\n\n    This is a robust version of the os.path.join function.", "'Copy an object from one bucket to another.\n    \n    :param src: The source object name.\n    :param dest: The destination object name.\n    :param parameters: Optional parameters.\n    \n    :returns: The response data.", ".", "Get the comment option for the media.\n    \n    Parameters\n    ----------\n    media : dict\n        The media to get the comment option for.\n\n    Returns\n    -------\n    str\n        The comment option for the media.", ".", ".\n\n    Clear the buffer at the given address.\n\n    :param addr: The address to clear.\n\n    :param ndx: The buffer to clear.\n\n    :return: The number of bytes cleared.", "Args:\n        boxes1 (tensor): shape(N, 4)\n        boxes2 (tensor): shape(M, 4)\n    Returns:\n        tensor: shape(N, M)", "Return a string representation of this object.", ".convert_objects(self, convert_dates=True, convert_numeric=False,\n                        copy=True)\n\n    Convert objects in the data dictionary to their appropriate Python\n    objects.\n\n    Parameters\n    ----------\n    convert_dates : bool, default True\n        If True, convert dates to datetime objects.\n    convert_numeric : bool, default False\n        If True, convert numeric objects to Python numbers.\n    copy : bool, default True\n        If True, return a copy of the data. Otherwise, return a new\n        dictionary.\n\n    Returns\n    -------\n    dict\n        The converted dictionary.", "Remove a bookmark from the bookmark manager.\n    \n    :param key: The key of the bookmark to remove.\n    :type key: str", ".", "This function will back-adjust the data.", "GNU hash function", "(self, transaction):\n        Calculate the transaction cost and return the cost and the cost per transaction.\n\n        Args:\n            transaction (Transaction): The transaction to calculate the cost for.\n\n        Returns:\n            float: The cost of the transaction.", "(t: Type[Any]) -> Tuple[Any, ...]:", "Args:\n        signed (bool, optional): Defaults to False.\n        addr (int, optional): Defaults to None.\n        length (int, optional): Defaults to None.\n        label (str, optional): Defaults to None.", "(self, X, training=True) -> torch.Tensor\n        Forward pass through the network", "", "\u521b\u5efa\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 settings.json", "Updates the number of computed tokens for all sequences.", "(str, str, str, str, str) -> NoneType\n    \n    Create a new Templated object.\n    \n    Parameters\n    ----------\n    item_type : str\n        The type of the item.\n    rec_src : str\n        The source of the record.\n    sr : str\n        The source of the record.\n    link : str\n        The link to the item.\n    comment : str\n        The comment to the item.\n    \n    Returns\n    -------\n    NoneType", "A decorator to record the error handler for a given error code.", "on a given image, return a new image with the keypoints projected on it", "", ".\n    Reset the environment.\n    Parameters\n    ----------\n    level_infra : LevelInfrastructure\n        LevelInfrastructure object to reset.\n    common_infra : CommonInfrastructure\n        CommonInfrastructure object to reset.\n    outer_trade_decision : OuterTradeDecision\n        OuterTradeDecision object to reset.", "", "Return the style loss for each layer", "(Callable[..., Any], str) -> Any:", "for converting python objects to json", "_save_disabled_enabled_cookies_\n    Save the disabled and enabled choices in cookies.", ".\n    Write the error message to the configured elasticsearch instance.", ".\n    Test that custom scorer works.", "Sample from a Gaussian distribution.", ".add_argument() method to add arguments to the parser.\n\n    :param args: positional arguments\n    :param kwargs: keyword arguments\n    :return: self", "_render_row_", "Safe save a model for HF Trainer.", "Filters out all tokens that are not part of the\n    Python tree.\n\n    Args:\n        uwline (uw.Line): The line to filter.\n\n    Returns:\n        list: The filtered tokens.", "Convert text to phonemes. \n    \n    Args:\n        text (str): Text to be converted.\n        language (str): Language of the text.\n    \n    Returns:\n        list: List of phonemes.", "Logs a message when a function is called.\n    \n    :param logger: The logger to use for logging.\n    :param log_level: The log level to use for logging.\n    :return: The decorated function.", "with the dict_agent, sync the encoder and the decoder", "Test that a package that emits unicode fails on install", "Return a list of CaptionQuery objects for each track in the captions.", ".\n\n    :param figure: The figure to plot\n    :param win: The window to plot in\n    :param env: The environment to plot in\n    :return: The result of the request", ".", "Check if the model is finished. \n    \n    Args:\n        token_ids (torch.Tensor): token_ids to be processed\n        \n    Returns:\n        torch.Tensor: tensor containing the finished status", "\u83b7\u53d6\u5238\u5546\u7684\u5151\u6362\u5238\n    :param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :return:", "Initialise the config file.", "Check if package is installed using `library`. \n    \n    Parameters\n    ----------\n    package_helper : CondaPackageHelper\n        Helper object to run the command.\n    package : str\n        Package name.\n    \n    Returns\n    -------\n    int\n        Return code of the command.", "Returns:\n        int: embedding dimension", "Return the fully qualified name of the file.", "Parse a source file.", ".\n    Sets the volume of the mixer.\n\n    :param volume: Volume to set.\n    :type volume: int\n    :return: True if the volume was set successfully, False otherwise.\n    :rtype: bool", ":type val: int\n    :rtype: int", "Stop all jobs in all sessions.", "(self, result=None)", "Returns the environment variables for this user.\n    \n    This is a hook for overriding the environment variables.\n    \n    :param self: The object instance.\n    :type self: object\n    :returns: The environment variables for this user.\n    :rtype: dict", "Removes SQL from the question. \n    \n    :param question: The question to remove SQL from.\n    :type question: str\n    :return: True if SQL was removed, False otherwise.\n    :rtype: bool", "Test that repo is upgraded correctly.", "", ".\n    Returns:\n        str: The string representation of the tree.", "Returns the FieldMapping for the given fieldname.\n    \n    If no mapping is found, a new FieldMapping is created and returned.", "Flush the task logs.", ".\n    Calculate WER", "Get a list of categories for the given fileids.\n    \n    :param fileids: List of fileids.\n    :type fileids: list\n    :returns: List of categories.\n    :rtype: list", "Distributed training: all processes wait for the first process to do something", "_summary_", "(Tensor) -> Tensor\n\n    Apply the forward pass.\n\n    Arguments:\n        tensor_input (Tensor) -- input tensor\n\n    Returns:\n        Tensor -- output tensor", "x is the input", "Returns the texture of the object.", "Start a detached process, returning its process ID.", "Return a tuple of (is_container, repr(t))", "_execute_job(self, job)\n\n    Executes a job on the remote host.\n\n    :param job: A Job object.\n    :return: None", "Convert the history to a list of messages.\n    \n    Args:\n        history (list[dict[str, str]]): The history to convert.\n        is_demonstration (bool, optional): Whether to convert the history to a demonstration. Defaults to False.\n\n    Returns:\n        Union[str, list[dict[str, str]]]: The history converted to a list of messages.", "Returns a list of all the sender_id's in the database.", "forward propagation", ".", "Test that scanning a file for qr codes returns a list of barcodes\n    and a dict of page numbers with a separating barcode", "(img, ) -> img", ".\n    # Returns the number of tokens used by a list of messages.\n    #\n    # This is used to get an initial estimate of the total cost for\n    # a batch of messages.\n    #\n    # E.g. for 100 messages, we would want to set it to 4133 (0.75 x 100).\n    #\n    # The result of this is a rough upper bound estimate of how many tokens\n    # the API will have to process all of the messages.\n    #\n    # The result is rounded up to the nearest integer.\n    #\n    # For example:\n    #   1. If each message is 4 tokens, then: (4 * 100) + 2\n    #   2. If each message is 2 tokens, then: (2 * 100) + 2\n    #   3. If each message is 0.5 tokens, then: (0.5 * 100) + 1\n    #\n    # @param messages List of messages to get token count from\n    # @return Total number of tokens in the messages", "Decorator for creating a Taft class.", ".", "Redis key for ratelimit", ".", ".sample sample from the distribution of the latent space.", ".", "Mount point for server", "Clears all jobs from the job queue.", "_test_create_valid_env", ".\n    Initialize the class.", "Save the model with the given commit value.", "for each local forward, remove it from the list", "This function is called when a model is saved.", "", "Initializes the node.\n    \n    Args:\n        input (str): The input to the node.\n        output (List[str]): The output of the node.\n        node_config (Optional[dict], optional): The configuration of the node. Defaults to None.\n        node_name (str, optional): The name of the node. Defaults to \"GenerateAnswer\".", "Get an alias.\n\n    Args:\n        key: The alias key.\n        default: The default value to return if the alias is not set.\n\n    Returns:\n        The value of the alias.\n\n    Raises:\n        TypeError: If the alias is not set and the default value is not provided.\n        TypeError: If the alias is set and the value is not an iterable or callable.", "_recv_raw:", "forwards a batch of audio through the model", "_summary_\n\n    Args:\n        gateway_name (str): _description_\n        token_config (TokenConfig, optional): _description_. Defaults to None.\n\n    Returns:\n        _type_: _description_", "Extracts the headers from the headers string.\n    \n    Args:\n        headers (str): The headers string.\n    \n    Returns:\n        dict: A dictionary with the headers as keys and the values as values.", ".\n    Returns:\n        list: list of identifiers.", ".authorize_redirect(self, redirect_uri=None, client_id=None,\n                           client_secret=None, extra_params=None )\n\n    Authorize the user to access the API.\n\n    Parameters\n    ----------\n    redirect_uri : str, optional\n        The URI to redirect the user to after authorization.\n    client_id : str, optional\n        The client ID to use for authentication.\n    client_secret : str, optional\n        The client secret to use for authentication.\n    extra_params : dict, optional\n        Additional parameters to add to the authorization request.\n\n    Returns\n    -------\n    None", "", "Generates text using the model.", "", "@param assets: list of assets\n    @param account_policy:\n    @param account_prefer:\n    @param host_callback:", "Forward function. \n    \n    Args:\n        x: input tensor.\n        \n    Returns:\n        outs: list of output tensors.", "Writes the changes to the [success]pyproject.toml[/] file.\n    \n    :param show_message: Whether to show a message to the user.", "LogNormal class for PyTorch.", "Returns the server at index. \n    \n    :param index: The index of the server to return. \n    :return: The server at index.", ".\n    Returns a tuple of (display_name, signature, summary, link_name)\n    for the given object.", "Returns:\n        torch.Tensor: word embedding weight", "Compute the power spectral density (PSD) of the data.\n\n    Args:\n        omega: The frequencies to compute the PSD for.\n\n    Returns:\n        The PSD of the data.", ".", ".\n    Returns the offset of the key in the chunk.", "Initialize the Parse node.\n\n    Parameters:\n        input (str): The input string to be parsed.\n        output (List[str]): The list of output strings.\n        node_config (dict): The configuration for the node.\n        node_name (str): The name of the node.", "Sets the model to use for training.\n    \n    Args:\n        model (str): The name of the model to use for training.", "Builds the arch", "Get the token limit for a given model.", ".\n    Searches for the solution.\n    :return: the path from the start to the goal.", "Run migrations in 'offline' mode.\n\n    This db_url will be ignored by the migrations tool and only\n    used for your own database url.", "\u63d0\u53d6\u7528\u6237ID\n    \n    :param msg: \u6d88\u606f\n    :param max_len: \u7528\u6237ID\u6700\u5927\u957f\u5ea6\n    :param re_sub: \u7528\u6237ID\u53bb\u9664\u7279\u6b8a\u5b57\u7b26\u6b63\u5219\u8868\u8fbe\u5f0f\n    \n    :return: \u7528\u6237ID", "_summary_\n\n    Args:\n        args (Namespace): argparse.Namespace\n        python (Python): Python\n        cmd (str): command\n        target_name (str): target name\n        env (dict): environment\n        capture (bool): capture\n        data (dict): data\n        cwd (str): cwd\n\n    Returns:\n        str: output", ".\n    Initialize criterion.", "_summary_\n\n    Args:\n        pretrained (str): _description_\n        tag (bentoml.Tag): _description_\n        *args (t.Any): _description_\n        tokenizer_kwds (dict[str, t.Any]): _description_\n        **attrs (t.Any): _description_\n\n    Returns:\n        bentoml.Model: _description_", ".\n    Returns True if this host is managed by the NetScaler Manager.", "Stop the timer.", ".", ".\n    Parameters\n    ----------\n    nodes : list of int\n        List of nodes to include in the subgraph.\n    Returns\n    -------\n    DGLSubGraph\n        The subgraph.", ".\n    Adds the key and value to the dictionary.\n\n    :param key: the key to add\n    :param value: the value to add\n    :return: None", ".\n    Returns:\n        list: List of values from the dictionary.", "Convert the object to a dictionary.\n    \n    Returns:\n        dict: The object as a dictionary.", "Get the refs of the parameters of the method\n    \n    Returns\n    -------\n    refs : set\n        Set of references", "_parse_snippet_file\n\n    Parse a snippet file into a SnipMateSnippetDefinition.", "Forward function.\n    \n    Args:\n        x: tensor with shape (batch_size, seq_len, emb_size)\n        emb: tensor with shape (emb_size, emb_size)\n    \n    Returns:\n        tensor with shape (batch_size, seq_len, emb_size)", ".\n    Returns the index of the best trial.", ".\n    Add a new argument to the parser.", ".", "Returns the ARN of the assumed role.", "", "Delete a pattern from the conf.", "_get_header_by_wsgi_name(self, name):\n\n        Returns the value of the specified header.\n\n        :param name:\n        :return:", "Returns a dictionary containing the updated state of the stream.\n\n    Args:\n        current_stream_state (MutableMapping[str, Any]): The current state of the stream.\n        latest_record (Mapping[str, Any]): The latest record from the stream.\n\n    Returns:\n        Mapping[str, Any]: The updated state of the stream.", ".\n    Return True if the token has a default or named assignment.", ".", "for each binding in the bindings, if the variable is in the bindings,\n    the variable is replaced by the corresponding value. Otherwise, the\n    variable is added to the bindings.", "_start_streaming\n\n    Starts a streaming session with Twitter.\n\n    :param callback: A function that will be called with the tweet data\n    :return:", "Forward pass of the model.\n    \n    Arguments:\n        x {Tensor} -- Input tensor of shape (N, 4)\n    \n    Returns:\n        Tensor -- Output tensor of shape (N, 4)", "Removes the element at the given index and returns it.\n    \n    :param index: The index of the element to remove.\n    :type index: int\n    :return: The removed element.\n    :rtype: object", "Get the current page mode. \n    \n    :return: The page mode. \n    :rtype: str", ".\n    Returns:\n        bool: True if the counter has not reached the count.", "Get the status of the server.", "_run\n\n    Runs the given apps.\n\n    Args:\n        *apps: The apps to run.\n        **kwargs: The kwargs to pass to the apps.\n\n    Returns:\n        The app that was run.\n    def _get_flask_app(*apps: t.Union[Gui, Rest], **kwargs) -> t.Optional[Flask]:", "Checks if the device is ready to be used.", "Build the arch", "", ".\n    Returns the center of the frame.", ".\n    Sets a DNS TXT record with the specified challenge.\n\n    Args:\n        zone_id (str): The ID of the zone to set the challenge.\n        domain (str): The domain to set the challenge for.\n        txt_challenge (str): The challenge to set.\n\n    Returns:\n        dict: The response from the Route53 API.", "Checks if a given attribute has nested attributes.", "Returns the maximum sequence length for the model.", ".\n\n    Args:\n        content (str): The content of the message.\n        **kwargs: Additional keyword arguments.\n\n    Raises:\n        ValueError: If the content is empty.\n\n    Returns:\n        None", "Test that query_dict is correctly set when using method_post", "Get historic OHLCV data for a given pair and timeframe.\n\n    Args:\n        pair (str): The pair to get data for.\n        timeframe (str): The timeframe to get data for.\n        since_ms (int): The timestamp in milliseconds to get data from.\n        is_new_pair (bool, optional): Whether to get data for a new pair. Defaults to False.\n\n    Returns:\n        List: A list of OHLCV data for the given pair and timeframe.", "Test that a redirect is followed.", "(Command)", ".\n    Parameters\n    ----------\n    cfg : dict\n        The configuration.\n\n    Returns\n    -------\n    int\n        The number of times the function was called.", "untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)\n    \n    untar(file_path, extract_folder=None)", "for POST", "Refresh themes.", "Create a file at path, and optionally create all parent directories\n    \n    Args:\n        path (str): path to file\n        create_dirs (bool): create all parent directories if they don't exist", "(\n        self,\n        model_fn,\n        noise_schedule,\n        predict_x0=True,\n        thresholding=False,\n        max_val=1.,\n        variant='bh1'\n    )", "@overload\n    def __call__(self, *args: Type) -> Type:\n    @overload\n    def __call__(self, *args: Type) -> FunctionType:", "Returns the center of the arc, using the center of the two arcs that\n    form it.", "_summary_", ".\n    Args:\n        image_path: Path to image.\n\n    Returns:\n        PIL.Image.Image: Processed image.", ".\n\n    Args:\n        tensor (np.ndarray): The tensor to convert.\n\n    Returns:\n        List: The list representation of the tensor.", "Shutdown the global client.", "Returns the active server.", ".sample sample from the distribution.\n    Args:\n        num_samples (int): Number of samples to generate.\n        current_device (int): Device to run the model on.\n    Returns:\n        Tensor: Generated samples.", "Sets up eager loading for the given queryset. \n    \n    Args:\n        cls (class): The class that is being setup.\n        queryset (QuerySet): The queryset to setup.\n    \n    Returns:\n        QuerySet: The setup queryset.", "Loads the status from the cache.", ".\n    The constructor for the Terrain class.\n\n    Args:\n        terrain_id (int): The ID of the terrain.\n        full_data_set (GenieObjectContainer): The full data set for the terrain.\n        members (dict[str, ValueMember], optional): The members of the terrain. Defaults to None.", ".\n    Args:\n        message (str, optional): The message to display. Defaults to \"Loading...\".\n        delay (float, optional): The delay between each character. Defaults to 0.1.\n        plain_output (bool, optional): Whether to display the spinner as plain text. Defaults to False.", "for daily data", "", "@property\n    def params(self):\n        return [p for p in self.params]", "Predicts the target values for X.", "Check if the element is floated.", "Patches the chat completion function of the client.\n\n    Args:\n        client (Union[OpenAI, AsyncOpenAI]): The client to patch.\n        mode (Mode, optional): The mode to use. Defaults to Mode.FUNCTIONS.\n    \n    Returns:\n        Union[OpenAI, AsyncOpenAI]: The patched client.", ".\n    Mapping of variables to slices and shapes.", "_apply_gradients", ".\n    Returns:\n        Dict[str, Dict]:", ".\n    Checks if the NyanObject is in a valid state.", "Returns a path relative to the site path. \n    \n    :param joins: The path components to join.\n    :return: A path relative to the site path.", "()", "Test that the isort command is running.", "_handle_error\n\n    Handles errors by writing them to the writeback Elasticsearch index\n\n    :param message: the error message\n    :param data: the data to be written to the writeback index", "Initializes the class.\n\n    Args:\n        config (InitConfig, optional): The configuration object. Defaults to None.", "Initialise the application.", "to be called when a new expert is added.", "Get the list of available packages \n    \n    :return: A dictionary of package names and their versions\n    :rtype: dict[str, set[str]]", "_set_tag(self, tag)\n\n    Set the tag to be used for the authentication tag.\n\n    :param tag: The tag to be used for the authentication tag.\n    :type tag: bytes", "Read file from disk and return pipeline template\n    \n    Args:\n        cls (type): PipelineTemplate class\n        file_path (Union[Path, str]): Path to file\n    \n    Returns:\n        PipelineTemplate: PipelineTemplate object", "Loads the model", ".\n    Check if the given email address is a known suspicious email address.", "Sets the speech for the message.\n    \n    Args:\n        speech (str): The speech to set.\n        speech_type (str): The type of speech to set.\n        extra_data (Any | None): Extra data to set.", "Called when the task has completed.\n\n    :param args:\n    :param kwargs:\n    :return:", "index load error", "Predicate for excluding certain packages from the analysis.\n    \n    Args:\n        package (str): The name of the package to check.\n    \n    Returns:\n        bool: True if the package should be excluded, False otherwise.", "Create a domain key", "", "to check if the position is at the start", ".\n\n    Like images from a given url.\n\n    :param url: The url of the image.\n    :param amount: The amount of likes to give.\n    :return: The current instance.", "Sigmoid function", "Returns timeline data for a given document type and name.", ".\n\n    Args:\n        strict (bool, optional): Strict mode.\n        config_file (str, optional): Config file.\n\n    Returns:\n        bool: Strict mode.", "Return a queryset of accessible objects for the current user.", "x is the input", ".\n\n    @param cls:\n    @param text:\n    @return:", "_Pause playback.", "_is_standard_action_type_\n    \n    Returns True if the action is a standard action.", ".\n    Get the pipeline definition for the given name.\n\n    :param pipeline_name: The name of the pipeline.\n    :return: The pipeline definition.\n    :raises: :class:`~pipelines.exceptions.PipelineNotFound`", "_init__\n\n    Initialize the class.\n\n    :param kwargs:\n    :return:", ".\n\n    Args:\n        nodes (DependencyType): The upstream nodes.", "Format a dataframe values to a list of lists.\n    \n    Parameters\n    ----------\n    value : Type\n        The dataframe values to be formatted.\n\n    Returns\n    -------\n    List[Any]\n        The formatted dataframe values.", "Builds a sdist and returns the path to the sdist.\n    \n    Args:\n        sdist_directory (str): Path to the directory where the sdist should be created.\n        config_settings (dict): Settings to pass to Poetry.\n    \n    Returns:\n        str: Path to the sdist.", "(int) -> List[int]:\n        \n        Returns a list of integers that are not in the given change_points list.", "Returns the location of the Dropbox install on this machine.", ":param config_settings: \n    :return:", "Draw samples from the underlying distribution.\n    \n    Parameters\n    ----------\n    num_samples : int\n        Number of samples to draw.\n    \n    Returns\n    -------\n    np.ndarray\n        Array of samples.", "_summary_\n\n    Args:\n        nb_file (_type_): _description_\n        ext (_type_): _description_", "Stream chat", ".\n    Sets the max order size for the given security.\n\n    :param sid: The security id.\n    :param max_shares: The maximum number of shares.\n    :param max_notional: The maximum notional.", "_init_", ".compare(self, statement, other_statement)\n    This method compares the similarity between two statements.\n    :param statement:\n    :param other_statement:\n    :return:", "(Optional) Initialize the result.\n\n    :param kwargs: The keyword arguments to initialize the result.", ".", "Get the number of trainable variables and print the names of the trainable variables", ".format_usage(self, ctx, formatter=None)", ".\n    :param Diff_Timeout:\n    :param Diff_EditCost:\n    :param Match_Threshold:\n    :param Match_Distance:\n    :param Patch_DeleteThreshold:\n    :param Patch_Margin:\n    :param Match_MaxBits:", "'Cancel a job'", "Returns the length of the shortest tensor in the batch.", "Remove metadata from notebook that is not\n    suitable for jupytext.", "Parses a string like '1-4,7,11' into a list of integers.", ".\n    Applies the time function to the specified attributes.", "_init_population_random\n\n    Initialise the population with random values.", ".\n    Transform sparse matrix X to a sparse matrix Y, where Y[i, j] = 1 if X[i, j] = 1.\n\n    Parameters\n    ----------\n    X : sparse matrix\n\n    Returns\n    -------\n    Y : sparse matrix", ".\n    Returns:\n        str:", "\u30ed\u30b0\u30a4\u30f3\u3059\u308b", "_summary_\n\n    Returns:\n        _type_: _description_", "Checks if a string is lower case\n    \n    Parameters\n    ----------\n    a : str\n        String to check\n    \n    Returns\n    -------\n    bool\n        True if the string is lower case, False otherwise", "Returns the absolute URL for a given model instance.", "Restart the wormhole server.", ".\n    Return a list of suggested commands for the user.", "def mulaw_encode(x, qc):", ",\n    Args:\n      data_dir: data directory.\n    Returns:\n      list of examples.", ".\n\n    :param batch_kwargs:\n    :param expectation_suite:\n    :param kwargs:\n    :return:", "_init_", "fetchone()", "Decorate a handler to register a route with the given URI.\n\n    :param uri: URI to register the handler with.\n    :param methods: HTTP methods to register the handler with.\n    :param host: Host to register the handler with.\n    :return: Decorator that registers the handler with the given URI.", "_execute()\n\n    Execute a command.\n\n    :param command: The command to execute.\n    :param args: The arguments to pass to the command.\n    :param env_vars: The environment variables to use.\n    :param shim: The shim to use.\n    :return: The return code, stdout, and stderr.", "Initialize the engine.\n\n    Parameters\n    ----------\n    shellClass : class\n        The class of the shell to use.\n    mpi : MPI\n        The MPI communicator to use.", ".\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..\n    ..", "Computes the gradients of the model.", "\u83b7\u53d6\u4e58\u5ba2\u8f66\u7968\u7c7b\u578b\n    \n    :param set_type: \u4e58\u5ba2\u8f66\u7968\u7c7b\u578b\n    :return: \u4e58\u5ba2\u8f66\u7968\u7c7b\u578b", "Create an optional proto message.\n    \n    Args:\n        name: The name of the optional field.\n        elem_type: The type of the optional field.\n        value: The value of the optional field.\n    \n    Returns:\n        An optional proto message.", ".\n    Sets the value of a key in a memo.", "Parameters\n    ----------\n    module : torch.nn.Module\n        The module to be called.\n    module_in : torch.Tensor\n        The input tensor.\n    module_out : torch.Tensor\n        The output tensor.\n    \n    Returns\n    -------\n    torch.Tensor\n        The output tensor.", "test suggested column names with table.dot", "on image", "Return help text for this command.", "Finds the first node with a given value.\n    \n    Parameters:\n    value - the value to search for\n    \n    Returns:\n    the node with the given value, or None if not found", ".\n\n    Args:\n\n        args (tuple): Tuple of arguments.\n\n        config (dict): Config dictionary.", ".decrypt_with_hash(self, pwdhash)\n\n    Decrypt the data with the given password hash.\n\n    Parameters:\n\n    pwdhash: The password hash to use for decryption.\n\n    Returns:\n\n    True if decryption was successful, False otherwise.", "Exports journal to a file or directory.\n    \n    Parameters\n    ----------\n    cls : class\n        The class to export.\n    journal : dict\n        The journal to export.\n    output : str\n        The output directory or file.\n    \n    Returns\n    -------\n    str\n        The path to the exported file or directory.", "Convert this model to a dictionary.\n    \n    Returns:\n        dict: The dictionary representation of the model.", "Returns the values of the dictionary as a string separated by commas.", "for each key, value in input_dict:\n        input_dict[key] = self._traverse(value, resolution_data, resolver_method)\n\n    return input_dict", "Checks if the current state is a valid state.", "_make_save_file_name\n\n    Args:\n        store_type (str): store type\n\n    Returns:\n        str: save file name", "_test_org_associate_with_junk_data", ".\n\n    Convert a CSR matrix to CSC.\n\n    :return: a CSC matrix", "", "Expand environment variables in a string.\n\n    Args:\n        val (str): The string to expand.\n        env (Mapping[str, str]): The environment variables to use.\n        fallback_to_os_env (bool): Whether to fallback to the OS environment variables.\n\n    Returns:\n        str: The expanded string.", "Fixes/canonicalizes an ARN.\n    \n    Args:\n        arn (str): The ARN to fix.\n    \n    Returns:\n        str: The fixed/canonicalized ARN.\n    \n    Raises:\n        Exception: If the ARN is not a valid lambda function ARN.", "Returns a help command that shows the help for the subcommands of this\n    command.", ".", "Prepare image for blob input\n    \n    Args:\n        im: image to be prepared\n        pixel_means: pixel means for each channel\n        target_size: target size\n        max_size: max size\n    \n    Returns:\n        im: prepared image\n        im_scale: scale factor", ":type val: int\n    :rtype: int", "for validation.\n\n    Parameters\n    ----------\n    batch_size : int\n        The batch size.\n    X_val : list of JTensor\n        The validation data.\n    Y_val : JTensor\n        The validation labels.\n    trigger : int\n        The trigger to trigger validation.\n    val_method : list of validation methods\n        The validation methods.", "Return a new instance of the class.", "Get a random delay between 1 and 3 seconds\n    \n    Returns:\n        float: Delay in seconds", "_read_tsv\n\n    Args:\n        input_file (str): path to the input file with tab-delimited values.\n\n    Returns:\n        list of tuples: each tuple is of the form (sentence1, sentence2,\n        alignment).", "Returns a human-readable file size.\n    \n    >>> human_bytes(1023)\n    '1023 B'\n    >>> human_bytes(1024)\n    '1.0 KB'\n    >>> human_bytes(1024*1024)\n    '1.0 MB'\n    >>> human_bytes(1024*1024*1024)\n    '1.0 GB'\n    >>> human_bytes(1024*1024*1024*1024)\n    '1.0 TB'\n    >>> human_bytes(1024*1024*1024*1024*1024)\n    '1.0 PB'\n    >>> human_bytes(1024*1024*1024*1024*1024*1024)\n    '1.0 EB'\n    >>> human_bytes(1024*1024*1024*1024*", ".", "Encode a text using the model.\n    \n    Parameters\n    ----------\n    text : str\n        Text to encode.\n    batch_size : int, optional\n        Batch size for the model. The default is 32.\n    as_numpy : bool, optional\n        If True, return the encoded text as a numpy array. The default is False.\n\n    Returns\n    -------\n    numpy.ndarray\n        Encoded text as a numpy array.", "Parse a list of message entities.\n    \n    :param cls: MessageEntity class\n    :param message_entity_array: List of message entities.\n    :return: List of MessageEntity objects.", "Convert bytes to human readable format", ":param X:\n    :return:", "for write permissions", "Set the output of all nodes to the given data. \n    \n    Parameters:\n    data (list): A list of values to set the output to.", "_summary_\n    Check if Python version is correct.\n\n    Args:\n        path (str): Path to Python executable.\n\n    Returns:\n        bool: True if Python version is correct, False otherwise.", "Check if the type is an AwaitableGenerator or Awaitable", ".\n    Returns a list of all values in the array.", "Unwatch a repository.\n    \n    :param repo: The repository to unwatch.\n    :type repo: str\n    :return: True if the repository was unwatched, False otherwise.\n    :rtype: bool", ".", ".\n\n    Returns:\n        str: The ending note of the note.", "Load the data from the specified file.", "- Returns the description of the object.", "Reads a tab separated value file and returns a list of examples\n    \n    Args:\n        data_dir: Path to the data directory\n        language: Language of the data\n        \n    Returns:\n        A list of examples", "Returns list of providers.", "Test that a cookie is set when using the cookies model.", "Returns the value of the query parameter param from the URL url.", "x is the argument to the function", "_update_label_map_path", "Load the album metadata", "This method is used to check the value of the check option.", "_", "Set a cookie with the given name and value. \n    \n    Args:\n        name (str): The name of the cookie.\n        value (str): The value of the cookie.\n    \n    Returns:\n        flask.Response: A response object with the cookie set.", "Generator that yields the entries in the directory listing.", "Initialize the Fabric class.", "Get the requires for a build wheel.\n    \n    Parameters\n    ----------\n    config_settings : dict\n        The configuration settings for the build wheel.\n    \n    Returns\n    -------\n    list\n        The requires for the build wheel.", "'Invoke the callback'", "\"", "Remove useless information from the COCO dataset.\n    \n    Parameters:\n    coco (COCO): COCO dataset object.\n    \n    Returns:\n    coco (COCO): COCO dataset object with useless information removed.", "Returns True if all events in the event list have succeeded.", "Test broadcasting.", "Returns the last error text if it exists.", ".\n    Returns:\n        OptionList:", ".\n    Validate the graph.", "", "Return a list of strings representing the slots used by the \n    optimizer.", "Kills the process.", "version of API used by this server.", "", ".rng()\n    \n    Get the random number generator.\n    \n    Returns:\n    \n    Random number generator.", "_find_by_name(self, name, package, subgraph, nodetype)\n    \n    Find a node by name in a subgraph.\n    \n    Args:\n        name (str): The name of the node to find.\n        package (str): The package of the node to find.\n        subgraph (str): The subgraph to search in.\n        nodetype (str): The type of node to find.\n    \n    Returns:\n        dict: The node if found, None otherwise.\n    \n    Raises:\n        NotImplementedError: If the subgraph search is not implemented.", "Test only with multiple commands."]]}