{
    "checkpoints/finetuned_0": [
        [
            ".",
            "(x) -> (self, x)",
            "",
            "_sin_gen(x)",
            "Stop the server.",
            "Calculate the ratio and resize the image.\n    :param img: the image to be resized.\n    :param width: the width of the image.\n    :param height: the height of the image.\n    :param model_height: the height of the model.\n    :return: the image and the ratio.\n    :rtype: image,float.\n    :raises: ValueError if the ratio is not between 1 and 2.\n    :Example:\n        >>> img = cv2.imread('test.jpg')\n        >>> img,ratio = compute_ratio_and_resize(img,100,100,200)\n        >>> cv2.imwrite('test.jpg',img)\n        >>> print(ratio)\n        1.0\n        >>> cv2.imread('test.jpg')\n        array([[ 128  128  128  128  128  128  128  128  128  128  128  128  128  128  128  128  128",
            "_predict(self, X):\n    Predict the class of the input data.\n    Parameters\n    ----------\n    X : array_like, shape = [n_samples, n_features]\n        The input data.\n    Returns\n    -------\n    y : array_like, shape = [n_samples]\n        The predicted class of the input data.",
            ":param algo_name:\n    :param score_thresholds:\n    :return:",
            "Register static files.\n\n  :param uri: The URI for the static files.\n  :param file_or_directory: The directory containing the static files.\n  :param pattern: The pattern to match the static files.\n  :param use_modified_since: Use the modified-since header to determine if\n    the static files have changed.\n  :param use_content_range: Use the content-range header to determine if\n    the static files have changed.\n  :param stream_large_files: Stream large files.\n  :param name: The name of the static files.",
            "",
            "",
            "",
            "_init_ -",
            "Convert to native encoding.\n\n  Args:\n    s: The string to convert.\n    encoding: The encoding to use.\n    errors: The error handling method to use.\n\n  Returns:\n    The string in native encoding.",
            "",
            "_make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type",
            ":return:  the path of the log file to be used for the TODO_refactor.",
            ".encode(self, xs, masks) -> (xs, masks)",
            ":return: (pt1, pt2, pt3, pt4)",
            "",
            "Pad data to 64-byte boundary.",
            ".is_fully_within_image(self, image):",
            "Show an error bubble.\n\n    Args:\n        error (str): The error message to show.\n        width (str): The width of the bubble.\n        pos (tuple): The position of the bubble.\n        arrow_pos (tuple): The position of the arrow.\n        exit (bool): Whether to exit the app.\n        icon (str): The icon to use.\n        duration (int): The duration of the bubble.\n\n    Returns:\n        None.",
            "",
            "",
            "",
            "_forward(self, x, style, skip=None)",
            "_init_",
            "(output_file, resume, progress_file) ->",
            ".run.log(values, step=step, **kwargs)\n    \n    ..note::\n        This method is a wrapper for the `run.log` method.\n        \n        ..code-block:: python\n            \n            logger.debug(\"Successfully logged to WandB\")\n            \n            wandb.log(values, step=step, **kwargs)\n            \n        ..note::\n            This method is a wrapper for the `run.log` method.",
            ".",
            "(str)",
            "",
            "",
            "",
            "",
            "",
            "",
            "_networkaccessmanager() -> Optional[QNetworkAccessManager]:",
            "Test that command execution works as expected.",
            "",
            ".clear()\n    return self._clear()",
            "ResNeXt-101-32x8d-ssl",
            "Returns the center of the arc.",
            "_init_",
            "",
            "",
            ":param target: \n    :param use_cache: \n    :return:",
            "(cls, name: str, agent_cls: Type['Agent']) -> None:\n\n    Register a new agent class under a given name.\n\n    Args:\n        cls (type): The class to register.\n        name (str): The name to register the agent under.\n        agent_cls (Type['Agent']): The type of the agent to register.\n\n    Returns:\n        None: This function does not return a value.",
            "",
            "",
            "",
            "Parse a set expression.\n\n  :returns: a :class:`~django.template.base.Node`\n  :parametrization:\n    - `name:endset` - endset expression\n    - `assign` - assign expression\n    - `filter` - filter expression\n    - `name:endset` - endset expression\n    - `assign` - assign expression\n    - `filter` - filter expression",
            "(path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext",
            "",
            "(self, *args, **kwargs) -> None:",
            "_regularizers: List[Tuple[str, Regularizer]] = None",
            "",
            ":param obj: object to convert to string\n    :param encoding: encoding to use\n    :param errors: error handling method\n    :return: string representation of the object\n    :raises: :class:`~django.core.exceptions.ImproperlyConfigured`\n    :",
            "(int) -> (int)",
            "",
            "Send a table of the status of the RPC client.\n\n  :param bot: The bot instance.\n  :param update: The update instance.",
            "_get_lr_scale()",
            "(str|int, str|int) - chat_id and user_id, or None",
            "",
            "_run(self) -> str:",
            "",
            "Load mel_filters from npz file.",
            ":param itag: int\n    :return: dict\n    :return: dict - the format profile of the itag\n    :rtype: dict - the format profile of the itag\n    :rtype: None - if itag is not in ITAGS, or if itag is not in ITAGS, return None\n    :rtype: dict - the format profile of the itag\n    :rtype: None - if itag is not in ITAGS, or if itag is not in ITAGS, return None\n    :rtype: dict - the format profile of the itag\n    :rtype: None - if itag is not in ITAGS, or if itag is not in ITAGS, return None\n    :rtype: dict - the format profile of the itag\n    :rtype: None - if itag is not in ITAGS, or if itag is not in ITAGS, return None\n    :rtype: dict - the format profile of the itag\n    :rtype: None - if itag is not in ITAGS, or if itag is not in ITAGS, return None\n    :rtype: dict - the format profile of the itag\n    :rtype:",
            ":param word_set:\n    :param url:\n    :param line_function:\n    :return:\n    :rtype: None\n    :raises: ValueError\n    :raises: TypeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises:  AttributeError\n    :raises",
            "(x, y) -> z",
            "Lookup the friends of the current user.\n\n  :param user_id: The user id of the user to lookup.\n  :param screen_name: The screen name of the user to lookup.\n  :return: The list of friends.",
            "Configure the ECharts.js library.\n\n  :param jshost: The host to use for the ECharts.js library.\n  :param echarts_template_dir: The directory to use for the ECharts.js\n    template files.\n  :param force_js_embed: Whether to force the use of the ECharts.js\n    library.  This is useful if you want to use the ECharts.js\n    library in a non-ECharts.js-based environment.  This is\n    generally a good idea if you are using a non-ECharts.js\n    library such as the ECharts.js-based library in a\n    non-ECharts.js-based environment.\n\n  :type jshost: str\n  :type echarts_template_dir: str\n  :type force_js_embed: bool\n\n  :return: None.",
            "",
            "Convert a number to an interval label.\n\n  Args:\n      x: The number to convert.\n      pos: The position of the interval in the octave.\n\n  Returns:\n      The interval label.",
            "_forward(self, inputs) -> torch.Tensor:\n    raise Exception(\"The forward method must be implemented by inherited class\")",
            "",
            ":param text:  text to be encrypted\n    :param debug:  debug mode\n    :return:  decrypted text",
            ":param datToClass: \n    :param classifierArr: \n    :return:",
            "",
            ":param cls:\n  :param v:\n  :return:",
            "",
            "_dispatchers: list of functions to dispatch to\n_dp: the function to use to dispatch to the functions in _dispatchers\n_ep: the function to use to concatenate the results of the functions in _dispatchers\n_dp: the function to use to dispatch to the functions in _dispatchers\n_ep: the function to use to concatenate the results of the functions in _dispatchers\n_ep: the function to use to convert the gradient to a tensor\n_dp: the function to use to dispatch to the functions in _dispatchers\n_ep: the function to use to concatenate the results of the functions in _dispatchers\n_ep: the function to use to convert the gradient to a tensor\n_dp: the function to use to dispatch to the functions in _dispatchers\n_ep: the function to use to concatenate the results of the functions in _dispatchers\n_ep: the function to use to convert the gradient to a tensor\n_dp: the function to use to dispatch to the functions in _dispatchers\n_ep: the function to use to concatenate the results of the functions in _dispatchers\n_ep: the function to use to convert the gradient to a tensor\n_dp: the function",
            "Build a backbone from a config.\n    Args:\n        cfg (ConfigDict): A config dict.\n        default_args (dict, optional): A dict of default arguments.\n    Returns:\n        str: The name of the backbone.",
            "(int) number: number of elements to add to the list.\n    (bool) le: if True, randomize_nb_elements will return a number\n        between 10 and 100.\n    (bool) ge: if True, randomize_nb_elements will return a number\n        between 100 and 140.\n    return: int: number of elements to add to the list.",
            ":param xml: \n    :return: \n    :rtype:",
            "",
            "_sequential_loop():",
            "",
            "Trains an autoencoder for the given problem and saves the model to the output directory.",
            "",
            "_config_changed:\n    True if config has changed since last save.\n    False otherwise.\n\n    :param previous: The previous instance of the same model.\n    :type previous: :class:`Model`\n    :return: True if config has changed since last save.\n    :rtype: bool\n    :raises: :class:`AttributeError` if config is not a dictionary.\n    :raises: :class:`TypeError` if config is not a dictionary.\n    :raises: :class:`AttributeError` if config is not a dictionary.\n    :raises: :class:`TypeError` if config is not a dictionary.\n    :raises: :class:`AttributeError` if config is not a dictionary.\n    :raises: :class:`TypeError` if config is not a dictionary.\n    :raises: :class:`AttributeError` if config is not a dictionary.\n    :raises: :class:`TypeError` if config is not a dictionary.\n    :raises: :class:`AttributeError` if config is not a dictionary.\n    :raises: :class:`TypeError` if config is not a dictionary.\n    :raises: :class:`AttributeError` if config is not",
            ".from_hex(color_hex) -> Color:\n\n    Return a Color object from a hex color string.\n\n    :param color_hex: A hex color string.",
            "",
            "_get_cache_logic(self, cached_response: Any):",
            "_repr_impl(self):",
            "",
            "Delete a model.\n  :return: The model name.\n  :rtype: str",
            "() -> bool:",
            ".",
            "Test a regular put.\n\n    :return:",
            "",
            "",
            "This function is a wrapper around the scrape_dai_docs function.\n    It is used to run the function on the local machine and then\n    save the outputs to a json file.\n\n    :return:",
            "_run_hook(self, hook, file_args)",
            ".compute(bottomUpInput, enableLearn, computeInfOutput=None)",
            "Return a boolean mask of the selected rows.\n\n    Parameters\n    ----------\n    regex : str\n        A regular expression to match the selected rows.\n    columns : list\n        A list of columns to match the selected rows.\n    unselect : bool, optional\n        If True, the selected rows will be unselected. By default, all selected rows are selected.\n\n    Returns\n    -------\n    pd.DataFrame\n        A boolean mask of the selected rows.",
            "",
            "",
            "",
            "_init_",
            "",
            "_load_games(self, games_store_dir: Path):",
            "Returns a string between two strings.\n\n    :param string: The string to search in.\n    :param start: The start string.\n    :param end: The end string.\n    :return: The string between the start and end string.\n    :rtype: str",
            "",
            "",
            "",
            "_call__",
            "_call(self, input_sequence, training=True, mask=None):",
            "Parse data from a file.\n\n  :param filename: the path of the file to be parsed.\n\n  :return: the data in the file.\n\n  :rtype: list",
            "",
            "",
            ":return: tuple([input_example])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])\n    :rtype: tuple([torch.Tensor])",
            "Save the document to the database.\n\n    :return: None.",
            "Check if data is not empty and not only whitespaces.\n\n  Args:\n      data (str): data to check.\n\n  Returns:\n      bool: True if data is not empty and not only whitespaces, False otherwise.",
            "_load_prompt_cache(self, path):",
            "",
            "",
            "",
            "_getSimulator() -> str\n    Returns the name of the simulator.",
            ".retry_report_exception()",
            "(name, session, options, documentation=\"\", usage=\"\")",
            "_get_data_format_members:",
            "",
            "Test that the pip install --no-index --find-links find_links\n        works correctly with a case-mismatch upper-version.",
            "(Re)start the jail.  This will re-load the jail's database,\n    and re-load any actions that were already in the\n    database.\n\n    :return:  None",
            ":param sentence:\n    :return:",
            ":param model: str or Path to a model or a path to a model file.\n  :param task: str or None. If not None, use a task to predict on the model.\n  :param verbose: bool. If True, print verbose output.",
            "Return 405 with the allowed methods.\n    :param allowed_methods: list of allowed methods.",
            "",
            ":param enckey:",
            "Returns a string representation of the widget.\n\n    :return: string\n    :rtype: str\n    :see: :func:`~django_plotly_",
            "",
            "_get_heap_boundaries(self, addr=None)",
            "(self, default=None, label=None, **kwargs):",
            "_read_addr_range(start, end, addr_space=None)",
            "",
            ":param X: np.array of shape (n_samples, n_features)\n    :return: np.array of shape (k, n_features)",
            "",
            "_wrap_forward_with_set_fields",
            "Return all the children of an element, optionally filtered by tag.\n\n  :param element: The element to get children from.\n  :param tag: The tag to filter by.\n  :returns: The children of the element.",
            "Create a input widget.\n    :return: input widget.",
            ":param df_lists: list of (df, prob) tuples",
            "",
            "",
            "Register a resource body class with the given resource type.\n\n    :param cls: The class to register.\n    :param resource_type: The resource type to register the class with.\n    :return: The registered class.",
            "_write(self, docs, metadatas):",
            ":param value: The value to check.\n    :type value: str",
            "- get api url by stage name\n- :param stage_name: stage name\n- :return: api url\n- :rtype: str\n- :raises: 404 - stage name is not found\n- :raises: 500 - get api url failed\n- :raises: 502 - get api url failed\n- :raises: 503 - get api url failed\n- :raises: 504 - get api url failed\n- :raises: 505 - get api url failed\n- :raises: 506 - get api url failed\n- :raises: 507 - get api url failed\n- :raises: 508 - get api url failed\n- :raises: 509 - get api url failed\n- :raises: 510 - get api url failed\n- :raises: 511 - get api url failed\n- :raises: 512 - get api url failed\n- :raises: 513 - get api url failed\n- :raises: 514 - get api url failed\n- :raises: 515 - get api url failed",
            "_make_sine_merge(self, x):",
            "_set_ignore_users(self, users: list = []):\n\n    _set_ignore_users(self, users)\n\n    :param users: list of user_ids to ignore",
            "",
            "",
            "_from_keypair(cls, keypair)\n\n    :param cls:\n    :param keypair:\n    :return:",
            "_add_count_data: Add count data to the data store.\n\n    Args:\n        counts (dict): A dictionary of counts for the current page.\n\n    Returns:\n        None: This method is abstract and must be implemented by a subclass.\n\n    Raises:\n        NotImplementedError: If this method is not implemented by a subclass, it will raise an error.",
            "_chunk_key_offset(self, key):",
            "(self, element):",
            "(PUT) /api/v1/spaces/1/default-space/",
            "",
            "(cache_root=None) -> None:\n\n    :param cache_root: (optional) the root directory of the cache",
            "",
            "Initialize a new `PytorchArray` wrapper.\n\n  Args:\n    env: The environment to wrap.",
            "(str, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, th",
            "Generates a sequence of betas based on a given alpha_bar function.\n\n    Args:\n        num_diffusion_timesteps (int): Number of timesteps in the diffusion process.\n        alpha_bar (function): Function that takes a time t and returns the alpha_t parameter.\n\n    Returns:\n        np.array: Sequence of betas.",
            "_get_config_ref() -> str:\n    Return the configuration reference for the class.",
            "Initializes the display_once set and the dirty flag.  This is\n    called once at the start of the program.  The program will\n    be invalidated if any of the includes or excludes are\n    changed.  This is used to make sure the display is\n    updated only when the display_once set is changed.  This\n    is also used to make sure the display is updated\n    only when the dirty flag is set.  This is used to make\n    sure the display is updated only when the display is\n    dirty.  This is used to make sure the display is\n    updated only when the display is dirty.  This is used to\n    make sure the display is updated only when the display is\n    dirty.  This is used to make sure the display is updated\n    only when the display is dirty.  This is used to make sure\n    the display is updated only when the display is dirty.  This is used to make sure the display is updated only when the display is dirty.",
            "_fit(self, X: np.ndarray, Y: np.ndarray) -> None:",
            "",
            "",
            "_get_item(self, entry, handle_value = 0):",
            "",
            "",
            ".driver(self, driver):",
            "",
            "(self, source, results, device=\"cuda\") -> None:",
            "-",
            ".query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef matches(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef matches(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef matches(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef matches(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef matches(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef matches(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef query(regex):\n\n    return QueryRegex(self._key, regex)\n\ndef matches(regex",
            "Remove a tensor from the tensor registry.",
            "_parse_result(self, d):\n    return d[\"std\"]",
            ":param text:\n    :param pattern:\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :return:\n    :rtype: list\n    :",
            "",
            "(checkpoint, directory, device, max_to_keep=10)",
            "",
            "Remove a desktop shortcut.\n\n  :param self:  The :class:`~app.views.desktop_shortcuts.DesktopShortcutsView` object.\n  :param _args:  The arguments passed to the method.\n  :return:  None.",
            "(dLdy, X) -> (dX, dW, dB)",
            "",
            "",
            ":param timeout: a float or a tuple (seconds, milliseconds)\n  :return: a :class:`~urllib3.Timeout` instance\n  :raises: :class:`~urllib3.exceptions.ProtocolError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib3.exceptions.LocationParseError` if the timeout is not valid\n  :raises: :class:`~urllib",
            "",
            "",
            "Parse a Microsoft Word file.\n\n  Parameters\n  ----------\n  file : Path\n      Path to the file to be parsed.\n\n  errors : str, optional\n      Error handling method.\n\n  Returns\n  -------\n  str\n      The text content of the file.",
            "",
            "",
            "Check that the function returns a path object.",
            "Patch the environment variables.\n\n    :param kwargs: The environment variables to patch.",
            "",
            "(n) = n * (n - 1) * (n - 2) * ... * 1",
            ":param input_tensor:\n    :param output_tensor:\n    :param output_tensor_grad:\n    :return:",
            ".scatter(self, ax, data, center)",
            "",
            "_get_bad_permissions_response_code_403(self):",
            "_logcdf:\n    Log-cdf of a gamma distribution.\n    Parameters\n    ----------\n    value : float\n        The value of the function.\n    h : float\n        The shape parameter of the gamma distribution.\n    z : float\n        The scale parameter of the gamma distribution.\n    Returns\n    -------\n    float\n        The log-cdf of the gamma distribution.\n    Notes\n    -----\n    The log-cdf of a gamma distribution is defined as the following expression:\n    .. math::\n        \\log(x) = \\log(h) + \\log(z) + \\log(x - 1) - \\log(x) + \\log(x + 1) - \\log(x + 1) - \\log(x - 1)\n    where :math:`x` is the value of the function.",
            "get all documents from the database\n\n  :param file_name: the file name to search for\n  :param metadata: the metadata to search for\n  :return: the documents from the database\n  :rtype: List[Document]\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected\n  :raises: Exception if the database is not connected",
            "_init_",
            "",
            "delete a game by slug",
            "",
            "",
            "_get_code_package()",
            "Convert a string to a text_type.\n\n  >>> safe_str(\"foo\")\n  'foo'\n  >>> safe_str(123)\n  '123'\n  >>> safe_str(1.23)\n  '1.23'\n  >>> safe_str(1 + 1j)\n  '1 + 1j'\n  >>> safe_str(None)\n  'None'",
            "_init_",
            "Returns the first element found by the given xpath expression\n    with the given key and value.\n    :param node: the element to search in\n    :param xpath: the xpath expression\n    :param key: the key of the attribute\n    :param val: the value of the attribute\n    :return: the first element found by the given xpath expression\n    with the given key and value.",
            "",
            ":returns: a list of extensions that can be used in the `extensions`\n    parameter of `__init__`",
            "Returns True if the toolbar should be shown.",
            "Returns a function that sorts the input according to the group index.\n\n  Parameters\n  ----------\n  group_index : array_like\n    The group indices.\n  ngroups : int\n    The number of groups.\n\n  Returns\n  -------\n  function\n    A function that sorts the input according to the group index.",
            "",
            "(str) The title of the song.",
            "",
            ":param rank_results: if True, sort the results by cross_score,\n  :param hits: list of hit results\n  :return: sorted hits list",
            "",
            "_predict(self, observation: th.Tensor, deterministic: bool = False) -> th.Tensor:",
            "Convert a set, list, or tuple to a list, or convert a string to a string.\n\n  :param item: the item to preconvert.\n\n  :return: the preconverted item.",
            "_ = lambda x: x",
            ":return: dict of environment variables.",
            "",
            ":param img1_path: str or list of str, image path or list of image path\n    :param img2_path: str or list of str, image path or list of image path\n    :return: list of image path or list of list of image path, boolean",
            "",
            "(int, int, int, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str",
            "",
            ":param payload:\n        :return:",
            ".search_path = '$' if self.search_path is None else self.search_path.strip() + '/'",
            "",
            "",
            "",
            ":param kernel_type: 'primal' or 'dual'\n  :param dim: dimension of the input\n  :param lamb: coefficient of the l2-norm of the input\n  :param gamma: coefficient of the l2-norm of the projection",
            "",
            ":param source:\n    :param visited:\n    :return:",
            "(str) event\n(list) params\n(dict) kwparams\n(function) handler\n\nReturn the result of the event handler, or None if no handler is found.",
            "Extract the best result from a list of choices.\n\n    Parameters\n    ----------\n    query : str\n        The query to be used to extract the best result.\n    choices : list\n        A list of choices to be used to extract the best result.\n    processor : callable, optional\n        A function that processes the extracted result.\n    scorer : callable, optional\n        A function that scores the extracted result.\n    score_cutoff : int, optional\n        The minimum score that a result must have to be returned.\n\n    Returns\n    -------\n    result : tuple\n        The best result.\n\n    Notes\n    -----\n    This function is a wrapper for `extract` function.",
            "_bwd(self, dLdy, X):",
            "",
            "Save the current instance.\n\n  :param commit: If True, the instance will be saved to the database.\n  :type commit: bool",
            "(optional)",
            "",
            "(bool)",
            "_mayRaiseExceptionAbs",
            "_make_save_file_name(self, store_type: str) -> str:\n\n    :param store_type: str\n    :return: str\n    :rtype: str\n    :raises:",
            "Returns an iterator over the list elements.",
            "(\n    router: Optional[\"APIRouter\"] = None,\n    router_prefix: str = \"/api/v1/awel/trigger\",\n) -> None:",
            "",
            "",
            "_get_opsi_fleet(self):",
            "_init_",
            "",
            "",
            "This function is used to ask a yes or no question.\n    :param question: The question to ask.",
            "",
            "",
            "",
            "Save model to the output_dir.\n\n  Args:\n      trainer (transformers.Trainer): The trainer.\n      output_dir (str): The output directory.",
            "_next__\n    :return:",
            "",
            "Initialize the model with random points.\n\n    :param init_points: number of random points to initialize the model with.",
            "",
            "_with_additional_config",
            "_extract_code(self, response: str, separator: str = \"```\") -> str:",
            "_units: dict[int, str]\n_abilities: dict[int, Ability]\n_general_abilities: set[int]\n\n:param data: data.py instance\n:type data: data.py",
            "",
            "_get_job_batch",
            "",
            "(source: str, results: List[str], device: str = \"cuda\") -> None:\n\n    (",
            "",
            ":param str var_name: name of the variable to be set",
            "Convert a string to a continuation align style.\n\n  :param s: The string to convert.\n\n  :returns: The converted style.",
            "Cancel a job.\n\n    :param job: The job to cancel.",
            "(torch.FloatTensor, InferenceParams) -> None:",
            "_call__",
            "_forward",
            "",
            "",
            "",
            "",
            "_add_column(self, name, data):\n    Add a column to the DataFrame.",
            "",
            "Create a Vision-Transformer (ViT-B/32-224-in21k) with a given number of\n  layers, patch size, and number of heads.",
            "",
            "",
            "",
            "_processCmd(self, cmd, aInfo):",
            "_call__",
            "",
            "_from_node:\n    :param index: int\n    :param data: str\n    :param modify_index: int\n    :return: ClusterConfig\n    :rtype: ClusterConfig\n    :raises: ValueError\n    :raises: TypeError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises: ImportError\n    :raises",
            ".is_partly_within_image(self, image):\n\n    '''\n    Check if the given image is within the boundaries of the current\n    image.\n    :param image: Image to check",
            "_split_device_string splits a string into a device type and a device id.\n    :param string: A string in the format \"device_type:device_id\".\n    :return: A device.\n    :rtype: Device.",
            "",
            "_call__",
            "Creates a regular link.\n\n  :param kids: The kids of this node.\n  :type kids: list of :class:`qlast.qlast.QlastNode`\n  :return: The created link.\n  :rtype: :class:`qlast.qlast.QlastLink`\n  :raises ValueError: If the number of kids is not 4.\n  :raises TypeError: If the type of the kids is not a list of\n    :class:`qlast.qlast.QlastNode`.\n  :raises ValueError: If the type of the kids is not a list of\n    :class:`qlast.qlast.QlastLink`.\n  :raises TypeError: If the type of the kids is not a list of\n    :class:`qlast.qlast.QlastLink`.\n  :raises ValueError: If the type of the kids is not a list of\n    :class:`qlast.qlast.QlastLink`.\n  :raises ValueError: If the type of the kids is not a list of\n    :class:`qlast.qlast.QlastLink`.\n  :raises ValueError: If the type of the kids is not",
            "",
            "_fit(self, X, y)",
            "Save the model checkpoint.\n\n    Args:\n        iteration (int): The current iteration.\n        model (torch.nn.Module): The model to save.\n        args (argparse.Namespace): The arguments.\n\n    Returns:\n        None: The model is saved to a file.",
            "Remove SQL from a question.\n\n  :param question: The question to remove SQL from.\n  :type question: str",
            "_failure_threshold:",
            "\u83b7\u53d6\u89c6\u9891\u7684id\n    :param url:\n    :return:\n    :rtype: str",
            "",
            "_call__",
            "_get_item(self, entry, handle_value = 0):\n    Get the object at the specified entry.\n\n    :param entry: The entry to get the object from.\n    :param handle_value: The handle value to use.\n    :return: The object at the specified entry.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.\n    :raises: :class:`~obj.ObjectError` if the object is not found.",
            ":param x: [batch_size, seq_len, dim]\n    :param x_mask: [batch_size, seq_len]",
            "_is_same_host(self, url):\n\n    Return True if the given url is the same host as this url.",
            "Converts a raw string to a protobuf Feature.\n\n    :param raw: A string containing a raw protobuf Feature.\n    :return: A protobuf Feature.\n    :rtype: feature_pb2.Feature",
            "Gets the path for the given key from the environment or the default.\n\n    Args:\n        key (str): The key to look up in the environment.\n        default (Optional[Union[PathLike, str]]): The default path to use if the key is not found.\n\n    Returns:\n        Optional[Path]: The path for the given key.\n\n    Example:\n        >>> path = __get_path(\"PATH\", \"/usr/bin\")\n        >>> print(path)  # prints \"/usr/bin\"\n        >>> path = __get_path(\"PATH\", None)\n        >>> print(path)  # prints \"/usr/bin\"\n        >>> path = __get_path(\"PATH\", \"/usr/bin\")\n        >>> print(path)  # prints \"/usr/bin\"\n        >>> path = __get_path(\"PATH\", \"/usr/bin\")\n        >>> print(path)  # prints \"/usr/bin\"\n        >>> path = __get_path(\"PATH\", \"/usr/bin\")\n        >>> print(path)  # prints \"/usr/bin\"\n        >>> path = __get_path(\"PATH\", None)\n        >>> print",
            "",
            "(self, f: mitmproxy.flow.Flow) -> None:\n\n    This method is called when a flow is added to the store.\n\n    :param f: The flow that is added to the store.\n    :return: None.",
            "",
            "_send_attachments: send all the media in the list of attachments",
            ":param path:\n    :param commit:\n    :return:",
            "*",
            "",
            "",
            ":param embed_size: \n    :type embed_size: int",
            ".cost(self, s_start, s_goal):",
            ".display_markdown_message(message)\n\n    Displays a message as a markdown message.\n\n    :param message: The message to display.\n\n    :return: None.",
            "Return  the  state  of  the  widget  as",
            "Build a data parallel model.\n\n  Args:\n      model (nn.Module): The model to be built.\n      device (str): The device to build the model on.\n      dim (int): The dimension of the data parallel model.\n      *args: Additional arguments to the DataParallel constructor.\n      **kwargs: Additional keyword arguments to the DataParallel constructor.\n\n  Returns:\n      nn.DataParallel: The built data parallel model.",
            ":param addr: \n    :param verbose:",
            ":param x: input tensor\n    :return: output tensor",
            "_get_study_direction_from_study_id_",
            "",
            "",
            "",
            "",
            "\u83b7\u53d6\u5e74\u62a5\u589e\u957f\u6570\u636e\n    :param year: \u5e74\n    :param quarter: \u5b63\u5ea6\n    :return:",
            "",
            "Test static proxy request.\n\n  :return:",
            "This function is called by the server to set the model to use.\n  :param model: The name of the model to use.",
            "_get_value_trackers()",
            ".test_cleanup() - test that the cleanup method works.",
            "_top(self, body_output, _):\n\n    This function takes in a body_output and returns a prediction.\n\n    Args:\n      body_output: A tensor of shape (batch_size, max_length, 1)\n      _ : A placeholder for the number of timesteps in the body_output.\n\n    Returns:\n      A tensor of shape (batch_size, 1)",
            "",
            "",
            "_cell_to_text",
            "(output_sequence: torch.Tensor, output_sequence_mask: torch.Tensor) -> torch.Tensor:",
            "(text)",
            "",
            "(name, value, minval=None, maxval=None, check_fn=None)",
            "",
            "",
            ":return:",
            ".init(self, label, interval=1, max_step=20)\n    :param label: str",
            "",
            "",
            "",
            "This is a hack to make the type system happy.  The type system is\n  not happy if we have a type that is a forward ref to a class\n  that is not in the global namespace.  This function is a hack\n  to make the type system happy.",
            "",
            "",
            "",
            "_stop(self, now=False):",
            "update budget\n    :param budget_id:\n    :param budget:\n    :param Authorize:\n    :return:",
            "_handle_starttag()",
            "(str fullname, str path=None, str target=None) -> Optional[ModuleSpec]",
            "\u722c\u697c\u68af\n    :param n: \u9636\u68af\u6570\n    :return: \u722c\u5230\u7b2cn\u4e2a\u9636\u68af\u7684\u722c\u6cd5",
            ":type self: object\n    :rtype: int",
            "",
            "_",
            "",
            ":param ciphertext_blob: The ciphertext_blob to deserialize.\n    :type ciphertext_blob: str\n    :return: The deserialized ciphertext_blob.\n    :rtype: str",
            "_get_experiment(self, experiment_id):",
            "Return a unicode string representation of the object.\n\n  :return: A unicode string representation of the object.",
            "",
            "(self, logicalId, resource):",
            "",
            ":param extra_headers: Extra headers to add to the request.\n    :param extra_query: Extra query parameters to add to the request.\n    :param extra_body: Extra request body to add to the request.\n    :param timeout: The timeout to use for the request.\n    :return: A list of models.",
            "",
            "(Internal) Update the label map path in the configs.",
            "Saves a query to the database.",
            "",
            "",
            "```python",
            "Convert a .wav file to a .silk file.\n\n    Args:\n        pcm_path (str): The path to the .wav file.\n        silk_path (str): The path to the .silk file.\n\n    Returns:\n        float: The duration of the .wav file in milliseconds.",
            "",
            "",
            ":return: the request if it is a SAML request, None otherwise.\n  :raises: :class:`~google.cloud.exceptions.NotImplementedError`\n  :",
            "",
            ":param program: \n    :param ckpt_name: \n    :return: \n    :rtype:",
            "(str)",
            "Delete a conversation.\n\n  :param str convo_id: The ID of the conversation to delete.\n  :return: None.",
            "Return a queryset of all the objects in the model.\n\n    :returns: A queryset of all the objects in the model.",
            ":param path: the path to the directory to be created.",
            "_init_",
            "Return a name for the staff group in the given location.\n\n    :param location: the location to get the name for.\n\n    :return: a name for the staff group.",
            "(async)",
            "",
            "Generates samples",
            "_ParseAndUnwrap - parse and unwrap a code string to a Python tree.\n\n    :param code: the code to parse and unwrap.\n    :param dumptree: whether to print the parsed tree to stderr.\n    :return: the Python tree.",
            "",
            "(f, numpy.allclose)\n    def test_optimizations_vm(self):",
            "_can_add",
            "",
            "(self, prompt: str | list[str]) -> LLMEmbeddings:\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return self.embeddings.run(prompt)",
            "_init_",
            ":param name: name of the command\n    :param linux_command: linux command\n    :param windows_command: windows command",
            "",
            ":param mean1:\n    :param logvar1:\n    :param mean2:\n    :param logvar2:\n    :return:\n    :rtype: th.Tensor",
            "_forward(self, tensor_input):",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "(str) -> str",
            "\"pip-upgrade-packages\" option no existing file",
            "Stop all the jobs in the current session.\n  :return:",
            "(self):",
            "_init_ -",
            "",
            "",
            "",
            "",
            ":param session:\n      :param pool_connections:\n      :param pool_maxsize:\n      :param max_retries:\n      :return:\n      :rtype:",
            "",
            "",
            "_get_loaded_models_info_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model_info_dict_by_key_and_model",
            ".get_dev_examples(self, data_dir)",
            "(function)",
            "(form_class, form_object, form_name, content_object, request)",
            "_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):",
            "",
            "",
            "Test that the default mode is set on a file.\n\n    This is a simple test that the default mode is set on a file.",
            "",
            "Creates a simple fully-connected network.",
            "Sets the display name of the user.\n\n  Args:\n    display_name: The display name of the user.\n  Returns:\n    None.",
            "",
            ":return:",
            "_extract(self, file_path):\n    Extracts a tar file to the data directory.\n\n    Parameters\n    ----------\n    file_path : str\n        The path to the tar file to extract.\n\n    Returns\n    -------\n    bool\n        True if the extraction was successful, False otherwise.",
            "(str shareName, str pathName) -> bool",
            "Clear the current jobs.",
            "_contains__",
            "",
            "_authenticate_user() -> AuthResponse:",
            "",
            "Create a new game with the number to guess.\n\n  Args:\n      number_to_guess (int): The number to guess.",
            "",
            "(Constructor)",
            "Find all snippet files in a given directory.\n\n  :param ft:  The snippet type.\n  :param directory:  The snippet directory.\n\n  :return:  A set of snippet files.",
            "_set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None):",
            "_to_json_string() - Returns the string representation of the object\n    in JSON format.\n\n    :return: The string representation of the object in JSON format.",
            "",
            "Test that the hosts decorator overrides the env_hosts.",
            "",
            "(str)\n    Command to run after the post release.\n    :param str command:\n        The command to run after the post release.\n        If the command is empty, the post release will not be executed.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.\n        The command will be executed in the waller environment.",
            ":rtype: list of :class:`~django.db.models.Field`",
            "",
            "Search for the given term in the index.\n\n  :param cls: the class to search in.\n  :param term: the term to search for.\n  :param weights: a list of weights for each field in the index.\n  :param with_score: if True, return the score of the match.\n  :param score_alias: the alias for the score field.\n  :param explicit_ordering: if True, return the score and the ordering\n    of the match.\n\n  :return: a list of the matches, with the score of the match and\n    the ordering of the match if the score is requested.",
            "Return a dictionary of the current counter.\n\n  :param get_value:  A function to get the value of a counter.  Defaults to None.\n  :return:  A dictionary of the current counter.  The values are either the values of the\n            counters or the values of the functions.  Defaults to None.\n  :rtype:  dict\n  :Example:  ```\n            >>> counter = Counter(1, 2, 3)\n            >>> counter.to_dict()\n            {1: 1, 2: 2, 3: 3}\n            >>> counter = Counter(1, 2, 3)\n            >>> counter.to_dict(get_value=lambda x: x.to_dict())\n            {1: 1, 2: 2, 3: 3}",
            "(cls, id_, name, sizes, min_size, max_size, default_size)",
            "",
            "(nodes, thunks, pre_call_clear):",
            ":param filename:\n    :param mode:\n    :return:",
            "2010-07-12 18:47:15.988342000 +0000 -07:00 \n    \n    :param loops: \n    :return:",
            "_loglikeobs(self, params):\n    Return the log-likelihood of the given parameters.",
            "_summary_",
            "Choose the best item from the list of items.\n    :param session: the session to log the choice in.\n    :return: the item that was chosen.",
            "",
            "",
            "(dataloader, current_iter, tb_logger, save_img) -> None",
            "_summary_",
            "Decorator for model registration.\n\n  Args:\n      name (str, optional): The name of the model. If None, the name of the model class will be used.\n\n  Returns:\n      Type: The model class.\n\n  Example:\n      ```\n      @register(name=\"my_model\")\n      class MyModel(nn.Module):\n          ...\n      ```",
            "",
            ".encode(x, n_q=None, st=None) -> torch.Tensor:",
            "Get all children of the element.\n  \n  :param tag:  The tag name to filter by.\n  :param recursive:  If True, return all children of all children.\n  :return:  A list of the children elements.",
            "(Optional) Use the parameters in the current pipeline.\n\n    :param params: The parameters to use in the pipeline.\n    :type params: dict",
            ".  :param int size:  :param str encoding:  :return:  :rtype:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises:  :type:  :raises",
            "Close the writer.",
            "",
            "_get_param_groups()",
            "(bool)",
            ":param number: The number of the nth James number to calculate.\n    :type number: int\n    :return: The number of the nth John number.\n    :rtype: int\n    :raises ValueError: If the input value of [n] is not an integer or if the input value of [n] is < 1.\n    :raises ValueError: If the input value of [n] is 1.\n    :raises ValueError: If the input value of [n] is 2.\n    :raises ValueError: If the input value of [n] is 3.\n    :raises ValueError: If the input value of [n] is 4.\n    :raises ValueError: If the input value of [n] is 5.\n    :raises ValueError: If the input value of [n] is 6.\n    :raises ValueError: If the input value of [n] is 7.\n    :raises ValueError: If the input value of [n] is 8.\n    :raises ValueError: If the input value of [n] is 9.\n    :raises ValueError: If the input value of [n] is 10.",
            "context_str = self._generate_context(message)\n        return self._llm_chain.run(\n            context=context_str,\n            input=message,\n        )",
            "_expert_devices: list of devices to send expert data to\n  return: list of lists of expert data to send to each device",
            "run the test",
            ":param ctx: :class:`click.Context`\n  :param args: list of arguments to be parsed\n\n  :return: list of parsed arguments\n  :rtype: list\n  :raises: :class:`click.",
            "(sample: torch.FloatTensor, return_dict: bool = True) -> Union[DecoderOutput, torch.FloatTensor]:",
            "",
            ":param out_dir:\n    :type out_dir: Path\n    :return:\n    :rtype: None\n    :raises:\n    :",
            "_clients = {}\n\ndef _get_client(service: str, session: boto3.session.Session, region: str = None):",
            "_run(self, trial_parameters, workspace, callback, **kwargs)\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self, trial_parameters, workspace, callback, **kwargs):\n    def run(self",
            "_goes_first(self.is_main_process):",
            "",
            ":return: The environment to use for the current request.",
            "Print message to console and exit with exit_code.\n\n    :param message: The message to print.\n    :param exit_code: The exit code to exit with.\n    :return: None.",
            "",
            "",
            "_close(self):",
            "_get_competent_detectors(self, scores)",
            "Create a waiter action.\n\n    :param self: The waiter action.\n    :param args: The arguments to pass to the waiter action.\n    :param kwargs: The keyword arguments to pass to the waiter action.\n    :return: The waiter action.\n    :rtype: :class:`~django.db.models.signals.",
            "'",
            "",
            ":param total_loss: \n    :return: \n    :rtype:"
        ],
        [
            ".",
            "_get_size()\n\n    :param x:\n    :return:",
            "",
            "_sin_gen(x):",
            "",
            ":param img:\n    :param width:\n    :param height:\n    :param model_height:\n    :return: \n    :rtype:",
            "Predict using the model.",
            "",
            "Registers static files with a given URI.\n\n  :param uri: The URI to use for the static files.\n  :param file_or_directory: The file or directory to serve.\n  :param pattern: The pattern to match the file or directory\n    against.\n  :param use_modified_since: Whether to use the modified_since\n    header.\n  :param use_content_range: Whether to use the content_range\n    header.\n  :param stream_large_files: Whether to stream large files.\n  :param name: The name of the static files.",
            "",
            "",
            "Returns the coordinate of the current extremum along a dimension.\n\n    Parameters\n    ----------\n    dim : int\n        The dimension to get the extremum along.\n    direction : tuple of int\n        The direction of the extremum.\n\n    Returns\n    -------\n    int\n        The coordinate of the current extremum along the dimension.",
            "_init_ -",
            ":param s: string to be converted\n    :param encoding: encoding of the string\n    :param errors: error handling method\n    :return: string in the specified encoding\n    :raises: :class:`~Unicode`",
            "",
            "_make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type",
            "",
            ".",
            ":return: (pt1, pt2, pt3, pt4) \n    :rtype: tuple",
            "",
            "Pad the data with the necessary padding to make the length a multiple of 64.",
            ".is_fully_within_image(self, image):",
            "Show an error bubble with a custom icon.\n\n  :param error: The error message to show.\n  :param width: The width of the bubble.\n  :param pos: The position of the bubble.\n  :param arrow_pos: The position of the arrow.\n  :param exit: If True, the bubble will exit after a delay.\n  :param icon: The icon to use.\n  :param duration: The duration of the bubble.",
            ":return: list of parameters for the current model.\n    :rtype: list of int or float or str or tuple.",
            "",
            "",
            "_forward(self, x, style, skip=None) -> torch.Tensor:",
            "_init_",
            "(output_file=None, resume=False, progress_file=sys.stderr)",
            "(str, dict, int, **kwargs) -> None:",
            ".",
            "_call__",
            "",
            "",
            "",
            ".",
            ":param type type: \n    :param message message: \n    :param stack_trace stack_trace: \n    :param inner_exception inner_exception: \n    :param data data: \n    :param error_response error_response:",
            "",
            "_networkaccessmanager: Optional[QNetworkAccessManager]",
            "Test that the command is executed and the output is returned.\n\n  :return: None\n  :rtype: None",
            "",
            ".clear()\n    self._clear()\n        self._update()\n        return self.draw()\n\ndef _clear(self):\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw()\n    self.draw",
            "Returns:\n    - model (nn.Module):",
            "Finds the center of an arc by using the 4 points of the arc.\n    :return: np.array(float) of the center of the arc.",
            "_init_",
            "\"A function that builds a model and a quantize mapping for a given model_config and a given\n    quantization.\n    :param model_config: The model_config to use for the model.\n    :param quantization: The quantization to use for the model.\n    :return: A tuple of a model and a quantize mapping.\n    :rtype: Tuple[nn.Module, QuantizeMapping].\n    :raises ValueError: If the model_config is not a GemmaConfig.\n    :raises ValueError: If the quantization is not a GroupQuantize.",
            "",
            "download file from remote server to local.\n\n    :param target: file path\n    :param use_cache: whether to use cache.\n    :return: local file path.\n    :rtype: str",
            ".register(cls, name, agent_cls)\n\n    Register an agent class under a given name.\n\n    Parameters\n    ----------\n    cls: Class\n        The parent class of the agent.\n    name: str\n        The name of the agent.\n    agent_cls: Type['Agent']\n        The agent class.",
            "Update time every 1/60th of a second.",
            "",
            "",
            "Parse a set expression.\n\n  :returns: A :class:`~django.template.base.Node` representing the set\n            expression.",
            "(path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]=None) -> str:\n    (path: str, ext_map: Optional[Dict[",
            "Returns the distance and angle of a point.",
            "(self, *args, **kwargs)",
            "_regularizers: List[Tuple[str, Regularizer]] = None",
            "",
            "",
            "(self):",
            "",
            "Send a table with the status of the RPC server.",
            "(opt) -> (current_lr, lr)",
            "(int, int)",
            "_defaultStack(layer = None, axolotl = False, groups = True, media = True, privacy = True, profiles = True):",
            "(str)",
            "",
            "Load the mel_filters from the npz file.\n\n  Args:\n    device: torch.device.\n    n_mels: int.",
            ":param itag: int, itag of the video\n  :return: dict, format profile of the video\n  :rtype: dict",
            ":param word_set:\n    :param url:\n    :param line_function:\n    :return:\n    :rtype: None",
            "_call_",
            "",
            "Configure the ECharts JavaScript host.\n\n  :param jshost: The JavaScript host to use.\n  :param echarts_template_dir: The directory to use for the template.\n  :param force_js_embed: Force the JavaScript to be embedded.\n  :return:",
            "",
            "",
            "_forward(self, inputs) -> torch.Tensor:\n    raise Exception(\"The forward method must be implemented by inherited class\")",
            "",
            "",
            "",
            "",
            ":param v: string or list of string\n    :return: string or list of string",
            "Returns the group of a token.\n\n    >>> ungroup('(a b c)')\n    'abc'\n    >>> ungroup('(a b c d e f)')\n    'abcdef'\n    >>> ungroup('(a b c d e f g h i j k l m n o p q r s t u v w x y z)')\n    'abcdefghijklmnopqrstuvwxyz'\n    >>> ungroup('(a b c d e f g h i j k l m n o p q r s t u v w x y z (a b c d e f g h i j k l m n o p q r s t u v w x y z))')\n    'abcdefghijklmnopqrstuvwxyz'\n    >>> ungroup('(a b c d e f g h i j k l m n o p q r s t u v w x y z (a b c d e f g h i j k l m n o p q r s t u v w x y z (a b c d e f g h i j k l m n o p q r s t u v w x y z)))')\n    'abcdefghijklmnopqrstuvwxyz'\n    >>> ungroup('(a b c",
            "_dispatchers = [\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.float32),\n  (tf.float32, tf.",
            "",
            "(int, bool, bool) -> int",
            "",
            "",
            "_sequential_loop():\n    This method is used for the process 'sequential'.\n    :return: The name of the agent that will be used to play the game.\n    :rtype: str",
            "",
            "Train autoencoder for a given number of steps.",
            "",
            "_config_changed: bool",
            "_from_hex(cls, color_hex: str) -> Color:\n\n    Returns a color object from a hex color string.\n\n    Parameters\n    ----------\n    color_hex : str\n        The hex color string.\n\n    Returns\n    -------\n    Color\n        The color object.",
            "",
            "_get_cache_logic(self, cached_response: Any):",
            "_left_tag_pattern:  _right_tag_pattern:  _left_tag_pattern:  _right_tag_pattern:",
            "",
            "Delete a model.\n\n  :param model_name: The name of the model to delete.\n  :type model_name: str",
            ":return:",
            "",
            "Test a regular put.\n\n    :param bool partial: Whether to use a partial put.\n    :return: Nothing.",
            ":return:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication` object.\n  :rtype:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication`\n  :raises:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication` object.\n  :raises:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication` object.\n  :raises:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication` object.\n  :raises:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication` object.\n  :raises:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication` object.\n  :raises:  :class:`msal.msal-python.MSAL.MSAL.MSAL.ClientApplication` object.\n  :raises:  :class:`msal",
            "",
            "This function is a helper function to scrape the entire dai-docs",
            "_run_hook",
            "(see BaseFunction.compute)",
            "Returns a boolean mask of the selected rows.\n\n    :param regex: The regex to match.\n    :param columns: The columns to match.\n    :param unselect: Whether to unselect the selected rows.\n    :return: A boolean mask of the selected rows.\n    :rtype: pandas.DataFrame",
            "",
            "Returns a tuple of the background choice and the background image.\n\n    :return: background_choice, background_image_path",
            "Generator function that yields all the Python source files in the\n  given paths.\n\n  :param paths: List of paths to directories or files to search.\n  :type paths: list",
            "_init_",
            "",
            "(def_loaded_games_dir: Path, trainer: Trainer) -> None:",
            "Returns the content between two strings.\n    :param string: The string to search in.\n    :param start: The start string.\n    :param end: The end string.\n    :return: The content between the start and end strings.",
            "_defaultStack(layer = None, axolotl = False, groups = True, media = True, privacy = True, profiles = True)",
            "",
            "",
            "(im, label=None) -> (im, label)",
            "_call_function",
            "",
            "",
            "",
            "Returns a tuple of input example.",
            "Saves the document.\n    :return: :class:`~django.db.models.Model` object.",
            "Check if the data is not empty and not only whitespace.\n\n    :param data: The data to check.\n    :return: True if the data is not empty and not only whitespace, False otherwise.\n    :rtype: bool",
            "_load_prompt_cache:\n    load prompt cache from disk\n    :param path:\n    :return:",
            "",
            "",
            "",
            "_getSimulator() -> str\n\n    Returns the name of the simulator.",
            ".retry_report_exception()",
            "(name, session, options, documentation=\"\", usage=\"",
            "_get_data_format_members:",
            "",
            "Test that we can install a pip-compatible egg with a different\n    version than the one we are currently using.",
            "(override)",
            "",
            "",
            "(str)",
            "",
            ":param enckey:",
            "",
            ":param cls:\n    :param status:\n    :return:",
            "_get_heap_boundaries()",
            "(default: Optional[float] = None, label: Optional[str] = None, **kwargs) -> None:",
            "(addr_space=None)",
            "",
            "",
            "",
            "_wrap_forward_with_set_fields(predictor, default_args):\n\n    :param predictor: the predictor to wrap\n    :param default_args: the default arguments to set",
            "",
            ".createWidget() method is called when a new widget is created.\n    :param self: the InputWidget instance.\n    :return: a new InputWidget instance.",
            ":param df_lists: list of (df, prob) tuples\n    :return:",
            "",
            "",
            ":param cls: The class of the resource body.\n  :return: The class of the resource body.\n  :rtype: :class:`~openstack_dashboard.api.v2_0.types.ResourceBody`\n  :raises: :class:`~openstack_dashboard.api.v2_0.exceptions.ResourceNotSupported`",
            "_write(self, docs, metadatas):",
            "Check that the value is a valid transaction hash.\n\n  Args:\n      value: The value to check.\n\n  Raises:\n      RPCError: If the value is not a valid transaction hash.",
            "- Gets the API url for the stage name.\n\n    - :param stage_name: The stage name to get the API url for.\n\n    - :return: The API url for the stage name.",
            "_sin_gen(self, x):",
            "(ignore_users)",
            "",
            "",
            "_from_keypair(cls, keypair) ->",
            "_add_count_data: add counts to the data list.\n\n    :param counts: list of counts.\n    :type counts: list of int.\n    :return: None.\n    :rtype: None.",
            ".chunk_key_offset(self, key)\n\n    Returns the offset of the given key in the chunk.\n\n    :param key: The key to get the offset of.\n    :type key: str",
            "(self, element):",
            "(PUT) /api/v1/spaces/{space_id}",
            "() -> bool:",
            "(cache_root=None) -> None:\n\n    :param cache_root: The root directory to use for the cache.\n        If None, the cache will not be used.\n        Default: None.\n        Type: str or None.\n        Default: None.\n        Type: str or None.",
            "",
            "Initialize a new `PyTorch-Gym-Wrapper` with the given `Gym-Env`.\n\n  Args:\n    env (Gym-Env): The `Gym-Env` to be wrapped",
            "(float, float)",
            "Generates a sequence of betas used by the forward diffusion q_t(x_t + x_t + 1/beta_t).\n\n    Args:\n        num_diffusion_timesteps (int): The number of diffusion timesteps.\n        alpha_bar (callable): The alpha_bar function.\n        max_beta (float, optional): The maximum beta value.\n\n    Returns:\n        np.array: The sequence of betas.",
            "_get_config_ref:\n    :return: The config ref of the current class.",
            ":param exclude: list of regular expressions to exclude\n       :param include: list of regular expressions to include\n       :param invalid: include invalid signatures in the output",
            "_fit_predict()",
            "",
            "",
            "_get_item() - Returns an Object from a low_value pointer.",
            "",
            "",
            "(optional) The driver to use for this browser.  The driver must be\n        a valid `webdriver.Remote` object.  If not specified,\n        a new driver will be created using the `self.browser`\n        and `self.browser_options` settings.  The driver will be\n        reused for all requests to this browser.  The driver\n        will be automatically closed after the browser is\n        closed.  See the `browser` and `browser_options`\n        settings for more information.\n        :type driver: `webdriver.Remote` or None",
            "",
            "(self, source, results, device=\"cuda\") -> None:",
            ".set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit()\n        .set_exit",
            ".match(self, regex):",
            "Delete a tensor.",
            "_parse_result(self, d):\n    return d[\"std\"]",
            "\u89e3\u6790 level \u5bf9\u5e94\u7684\u5185\u5bb9\n    :param text:\n    :param pattern:\n    :return:\n    :rtype: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type: list\n    :type:",
            "Clear all jobs from this job.\n    :param tag: (str) the tag to clear",
            "Initialize a new `ModelCheckpoint` instance.\n\n    Args:\n        checkpoint (str): The directory to save the model after each epoch.\n        directory (str): The directory to save the model after each epoch.\n        device (str): The device to use for training.\n        max_to_keep (int): The maximum number of checkpoints to keep.",
            "",
            "Remove the desktop shortcut for the game.\n\n  :param self: The :class:`Game` instance.\n  :param _args: The arguments.",
            "(dLdy, X) -> (dX, dW, dB)",
            "",
            "",
            ":param timeout: a 2-tuple of (seconds, microseconds) or None",
            "",
            "",
            "Parse a Microsoft Word file.\n\n  :param file: The file to parse.\n  :param errors: How to handle errors when parsing the file.\n  :return: The text of the file.",
            "",
            "",
            "",
            "Patch the environment with the given arguments.\n\n    :param kwargs: The arguments to patch the environment with.",
            "Saves an event to the default cache.\n\n    :param cache_key: The cache key to use.\n    :param data: The event data to save.\n    :param kwargs: The additional arguments to pass to the event manager.\n    :return: The event data.",
            "(n) = n * (n-1) * (n-2) * ... * 1",
            ":param input_tensor:\n    :param output_tensor:\n    :param output_tensor_grad:\n    :return:",
            "_draw_points(self, ax, data, center)",
            "",
            "_get_bad_permissions",
            "_logcdf(value, h, z)\n\n    Log-cdf of a Polya-Gamma distribution.\n\n    Parameters\n    ----------\n    value : float\n        Value of the function.\n    h : float\n        Shape parameter of the distribution.\n    z : float\n        Scale parameter of the distribution.\n\n    Returns\n    -------\n    float\n        Log-cdf of the function.",
            "Get documents from the database.\n  :param file_name: the file name of the document.\n  :param metadata: the metadata of the document.\n  :return: the documents.",
            "_init_",
            "",
            "",
            "Unzip a file from a zip file.\n\n  :param zip_ref: the zip file reference.\n  :param file_entry: the file entry to unzip.\n  :param target_dir: the target directory to extract the file to.",
            ":param img: np.ndarray\n  :param factor: int\n  :return: np.ndarray",
            "_get_code_package()",
            ":param v:\n    :return:\n    :rtype: text_type",
            "(result=None, verbose=False, print_all=False)",
            ":param node:\n      :param xpath:\n      :param key:\n      :param val:\n      :return:",
            "'CreateInheritableAnnotation'\n    :param self: :class:`qlast.qlast`\n    :param kids: :class:`qlast.qlast`\n    :return: :class:`qlast.qlast`\n    :rtype: :class:`qlast.qlast`",
            ":returns: A list of extensions that are currently watched by the\n    :class:`~pyglet.window.Window` object.",
            "",
            "Returns a function that sorts groups according to the group index.\n\n  :param group_index: A list of integers.\n  :param ngroups: The number of groups.\n  :return: A function that sorts groups according to the group index.",
            ":param event:",
            "(str)",
            "",
            "Sort the results by the score of the hits.\n  :param hits: The list of hits.\n  :param rank_results: Whether to rank the results.\n  :return: The sorted hits.\n  :rtype: List[dict]\n  :raises: :class:`~hits.exceptions.InvalidHitException`",
            ":param attr: The attribute to import.",
            "(observation: th.Tensor, deterministic: bool = False) -> th.Tensor:",
            "Convert a set, list, or tuple to a list.\n    :param item: the item to convert\n    :type item: set|list|tuple|str",
            "_logger.debug(\"call\")\n        self.cfg = cfg\n        self.init_params()\n        self.init_model()\n        self.init_dataloader()\n        self.init_logger()\n        self.init_evaluator()\n        self.init_logger()\n        self.init_optimizer()\n        self.init_scheduler()\n        self.init_train_dataloader()\n        self.init_val_dataloader()\n        self.init_test_dataloader()\n        self.init_loss_function()\n        self.init_metric()\n        self.init_lr_scheduler()\n        self.init_optimizer()\n        self.init_loss_function()\n        self.init_metric()\n        self.init_lr_scheduler()\n        self.init_optimizer()\n        self.init_loss_function()\n        self.init_metric()\n        self.init_lr_scheduler()\n        self.init_optimizer()\n        self.init_loss_function()\n        self.init_metric()\n        self.init_lr_scheduler()\n        self.init_optimizer()\n        self.",
            ":return: dict of environment variables to be set in the process.\n  :param prefer_system_libs: if True, will prefer system_libs to wine_path.\n  :param wine_path: if not None, will prefer wine_path to system_libs.\n  :return: dict of environment variables to be set in the process.",
            "",
            ":param img1_path: \n    :param img2_path:",
            "",
            "_init__",
            "",
            ":param payload: 1 - windows/shell_reverse_tcp, 2 - windows/meterpreter/reverse_tcp, 3 - windows/vncinject/reverse_tcp, 4 - windows/x64/shell_reverse_tcp, 5 - windows/x64/meterpreter/reverse_tcp, 6 - windows/x64/shell_bind_tcp, 7 - windows/meterpreter/reverse_https\n    :return: 1 - windows/shell_reverse_tcp, 2 - windows/meterpreter/reverse_tcp, 3 - windows/vncinject/reverse_tcp, 4 - windows/x64/shell_reverse_tcp, 5 - windows/x64/meterpreter/reverse_tcp, 6 - windows/x64/shell_bind_tcp, 7 - windows/meterpreter/reverse_https\n    :return: 1 - windows/shell_reverse_tcp, 2 - windows/meterpreter/reverse_tcp, 3 - windows/vncinject/reverse_tcp, 4 - windows/x64/shell_reverse_tcp, 5 - windows",
            "_call__",
            "",
            "",
            "",
            "Parameters\n  ----------\n  kernel_type : str\n      primal or primal_plus",
            "Test that the ratio is in the correct range.",
            ":param source: \n    :param visited: \n    :return: \n    :rtype:",
            "_event(self, event, *params, **kwparams)\n\n    Return a function that will be called when the event is\n    triggered.  The function will be called with the event\n    and any other parameters that are passed to the function.\n    The function should return None or a value that will be\n    returned as the return value of the event handler.  The\n    function will be called in the event handler's thread.\n\n    :param event: The event to be handled.\n    :param params: The parameters to be passed to the function.\n    :param kwparams: The keyword parameters to be passed to the function.\n    :return: The function that will be called when the event is\n    triggered.  The function will be called with the event and any\n    other parameters that are passed to the function.  The function\n    will be called in the event handler's thread.  The function will\n    return the value that will be returned as the return value of the\n    function.  The function will be called with the event and any\n    other parameters that are passed to the function.  The function\n    will be called in the event handler's thread.",
            ":param query:\n  :param choices:\n  :param processor:\n  :param scorer:\n  :param score_cutoff:\n  :return:",
            "(dLdy, X) -> (dX, dW, dB)",
            "",
            "",
            "",
            "",
            "_go(self):",
            "_mayRaiseExceptionAbs",
            "_make_save_file_name(store_type: str) -> str:\n\n    :param store_type: 'data' or 'error'\n    :return:",
            "",
            "(router: Optional[\"APIRouter\"] = None,\n        router_prefix: str = \"/api/v1/awel/trigger\",) -> None:",
            "",
            ":param s: string to xor\n    :param k: key to xor with\n    :return: string after xoring with key\n    :type s: str\n    :type k: str\n    :rtype: str\n    :Example:\n        >>> s = \"hello\"\n        >>> k = \"world\"\n        >>> s.xorstring(k)\n        'hllw'\n        >>> s = \"hello\"\n        >>> k = \"world\"\n        >>> k.xorstring(s)\n        'hllw'\n        >>> s = \"hello\"\n        >>> k = \"world\"\n        >>> k.xorstring(s)\n        'hllw'\n        >>> s = \"hello\"\n        >>> k = \"world\"\n        >>> k.xorstring(s)\n        'hllw'\n        >>> s = \"hello\"\n        >>> k = \"world\"\n        >>> k.xorstring(s)\n        'hllw'\n        >>> s = \"hello\"\n        >>> k = \"world\"\n        >>> k.xorstring(s)\n        'hllw'",
            "_get(self):",
            "_init_",
            "Writes data to the stream.\n\n    :param data: data to write to the stream.\n\n    :return: None.",
            "",
            "Prompt user for a Yes/No answer.\n    :param question: The question to ask the user.\n    :return: True if the user answered 'yes' or 'y', False if 'no' or 'n'.",
            "(parent_state: BaseState | None = None, init_substates: bool = True, **kwargs) -> None:",
            "",
            "\u83b7\u53d6\u5fae\u535a\u5185\u5bb9\n  :param info: \u5fae\u535a\u4fe1\u606f\n  :param is_original: \u662f\u5426\u662f\u539f\u521b\u5fae\u535a\n  :return: \u5fae\u535a\u5185\u5bb9",
            "Save the model to the output directory.\n\n  Args:\n      trainer: The trainer object.\n      output_dir: The output directory.",
            "",
            "",
            "Initialize the data space with random points.\n\n    :param init_points: number of random points to initialize with",
            "Check if events are no longer supported by dash.",
            "(str, dict or None) -> PresetDefinition or None",
            "_extract_code(self, response: str, separator: str = \"```\") -> str:",
            ".init(self, data)\n\n    :param data: :class:`~pylon.data.Data`\n\n    :rtype: :class:`~pylon.data.PylonData`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~pylon.data.DataError`\n    :raises: :class:`~py",
            "",
            "(x)",
            "",
            "(source: str, results: str, device: str = \"cuda\") -> None:\n\n    (",
            "",
            ":param str var_name: name of the variable to be set\n    :param str file_name: name of the file containing the variable to be set\n    :return:",
            "Convert a string to a continuation align style.\n\n  :param s: The string to convert.\n\n  :return: The converted style.",
            "Cancel a job.\n\n    :param job: The job to cancel.",
            "_update_kv_cache(kv, inference_params, layer_idx) -> None:",
            "_call__",
            "Args:\n        pred (paddle.Tensor): [B, H, W]\n        gt (paddle.Tensor): [B, H, W]\n        mask (paddle.Tensor): [B, H, W]\n        weights (paddle.Tensor, optional): [B, H, W]. Defaults to None.\n    \n    Returns:\n        paddle.Tensor: [B, 1, 1]",
            "",
            "Detect <Tab> key press.\n\n  :param event: :class:`~pyglet.window.event.WindowEvent`\n  :return:",
            "",
            "",
            "",
            "",
            "(pretrained=False, **kwargs) -> 'torch.nn.Module':",
            "",
            "Returns the number of units in the output layer.",
            "",
            "_processCmd(self, aInfo, aAction=None):",
            "_call__",
            "",
            "(int, str, int) -> ClusterConfig",
            ".is_partly_within_image(image)\n\n    Returns True if the current image is partly within the image.\n\n    Parameters\n    ----------\n    image : Image\n\n    Returns\n    -------\n    bool",
            ".split_device_string(string: str) -> (DeviceType, str):",
            "_get_session_info(self) -> (uid, frontaddr):",
            "_call__",
            "",
            "_predict_on_image(self, img):",
            "(x, y) -> self",
            "Save the model checkpoint.\n\n    Args:\n        iteration (int): The current iteration.\n        model (Model): The model to save.\n        args (ArgumentParser): The command line arguments.\n\n    Returns:\n        None: The model is saved in the checkpoint file.",
            "\u79fb\u9664 SQL",
            "- Sets the failure threshold for the given number of failed\n    requests.\n\n    :param int failure_threshold: The number of failed requests to\n        trigger the failure threshold.\n        :type failure_threshold: int\n        :return: self\n        :rtype: FailureThreshold",
            ":param url: str\n    :return: str",
            "",
            "_call__",
            "_get_item(self, entry, handle_value = 0):\n\n    Return a reference to an object or NoneObject if the entry is a\n    NoneObject.\n\n    :param entry: an Entry object\n    :param handle_value: the handle value to use if the entry is a NoneObject.\n    :return: an object or NoneObject.",
            ":param x: (batch, 1, 1, 1, 1)\n  :param x_mask: (batch, 1, 1, 1, 1)\n  :param offset: (batch, 1, 1, 1, 1)\n  :return:",
            "_is_same_host",
            "Convert a raw feature to a protobuf feature.\n\n    :param raw: A raw feature.\n    :type raw: bytes",
            "",
            "",
            "_store = {}\n_base_add = add",
            "",
            "",
            "",
            "Register the server's public key with the client.\n    :param s: The client's :class:`~httpx.core.http_client.Http_client` session.\n    :return: None.",
            ":param string: string to be modified\n    :param state: state of the process\n    :return: modified string",
            "",
            "Parameters\n    ----------\n    embed_size : int\n        size of the final encoded vector.",
            "_cost(self, s_start, s_goal):",
            "Display a message as a markdown formatted message.\n\n  :param message: The message to display.",
            "",
            ":param model:\n      :param device:\n      :param dim:\n      :param args:\n      :param kwargs:\n    :return:",
            "Returns the unsortedbin at the given address.\n\n    :param addr:  The address to retrieve the unsortedbin at.\n    :type addr:  int\n\n    :return:     The unsortedbin at the given address.\n    :rtype:      int\n\n    :Example:\n    >>> unsortedbin(0x0000000000000000000000000000000000000000)\n    0x0000000000000000000000000000000000000000\n    0x0000000000000000000000000000000000000000\n    0x0000000000000000000000000000000000000000\n    0x0000000",
            ":param x: \n    :return:",
            "_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) -> StudyDirection:\n\n_get_study_direction(self, study_id: int) ->",
            ":param key:",
            "",
            "",
            "",
            "\u83b7\u53d6\u5e74\u62a5\u6570\u636e\n    :param year:\n    :param quarter:\n    :return:",
            "",
            "Test static proxy requests.",
            "",
            "_get_value_trackers",
            ".",
            "_top(self, body_output, _):\n\n    :param body_output:\n    :return:",
            ":param bboxes:\n  :param img_shape:\n  :param scale_factor:\n  :param flip:\n  :return:\n  :",
            "",
            "_cell_to_text:\n    :return: str",
            "_get_reward(self, output_sequence: torch.Tensor, output_sequence_mask: torch.Tensor) -> torch.Tensor:",
            "",
            "Ask a question.\n  :param args: The question.\n  :param prompt_type: The type of the prompt.\n  :return: The answer.\n  :raises: ValueError if the prompt type is invalid.\n  :see: https://python-prompt.readthedocs.io/en/latest/index.html#python-prompt-api-reference-functions-and-methods\n  :see: https://python-prompt.readthedocs.io/en/latest/index.html#python-prompt-api-reference-functions-and-methods-1\n  :see: https://python-prompt.readthedocs.io/en/latest/index.html#python-prompt-api-reference-functions-and-methods-2\n  :see: https://python-prompt.readthedocs.io/en/latest/index.html#python-prompt-api-reference-functions-and-methods-3\n  :see: https://python-prompt.readthedocs.io/en/latest/index.html#python-prompt-api-reference-functions-and-methods-4\n  :see: https://python-",
            "(self, name, value, minval=None, maxval=None, check_fn=None):",
            "",
            "",
            "",
            "(label, interval=1, max_step=20)",
            "",
            "",
            "_UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo(self):\n\n    __UnameInfo",
            "Update forward references in the given namespace.\n\n  :param cls:  The class to update forward references for.\n  :param localns:  The local namespace to update forward references for.\n  :return:  None.",
            "",
            "Returns the URL of the current page.\n\n  :rtype: str\n  :return: The URL of the current page.",
            "Convert a time value to a datetime.time.",
            "_stop()\n    Stop the coroutine.\n    :param now: Stop the coroutine immediately if True.\n    :type now: bool",
            "Update a budget.\n\n    Args:\n        budget_id (int): The ID of the budget to update.\n        budget (BudgetIn): The updated budget data.\n    \n    Returns:\n        Budget: The updated budget.",
            "_handle_starttag -",
            "(path=None, target=None) -> ModuleSpec or None.",
            ":param n: int\n    :return: int\n    :rtype: int\n    :Example:\n    >>> climb_stairs(1)\n    1\n    >>> climb_stairs(2)\n    2\n    >>> climb_stairs(3)\n    3\n    >>>",
            ":return:  The maximum number of processes that can be used for the process pool.",
            "",

            "",
            "",
            "_get_experiment(self, experiment_id) -> Experiment:",
            "Return a unicode string representation of the object.\n  :return: A unicode string representation of the object.\n  :rtype: str\n  :raises: UnicodeError if unicode() is not implemented.",
            "_summary_ or _summary_\n\n    Args:\n        markdown (str): markdown text\n\n    Returns:\n        list: list of dicts with name and value of each markdown section",
            "_set(self, logicalId, resource):\n\n    Sets the resource for a logicalId.\n\n    :param logicalId: The logicalId of the resource.\n    :param resource: The resource to set.\n    :return: The resource.\n    :rtype: SamResource\n    :raises: ValueError if the resource is not a SamResource.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary.\n    :raises: ValueError if the resource is not a dictionary",
            "",
            ":param extra_headers:\n        :param extra_query:\n        :param extra_body:\n        :param timeout:\n    :return:\n    :rtype: SyncPage[Model]",
            "",
            "(tensorflow_serving_predict_image_classifier_configs)",
            ":param client_id:\n    :param query:\n    :return:\n    :rtype: str\n    :rtype: str\n    :type query: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :type client_id: str\n    :",
            ":param encoder_path: path to the encoder's weights\n  :param decoder_path: path to the decoder's weights\n  :return:",
            "",
            ":return:",
            "silk_path: str\n    pcm_path: str",
            "",
            ":return: Number of threads to be used.",
            "",
            "Check if exploit can be run on given target.\n\n  :param target: target to execute exploit on",
            "Save model checkpoint to the specified directory\n    \n    Args:\n        ckpt_name (str): The name of the model checkpoint to be saved.\n    \n    Returns:\n        str: The directory where the model checkpoint is saved.\n    \n    Note:\n        This function is called by the ``train`` and ``test`` function in ``train_and_test.py`` and ``test.py`` respectively.",
            "_get_attribute(self, attribute):",
            "Delete a conversation.",
            "",
            "(str) ->",
            "_init__",
            "Return the name of the staff group for a given location.\n\n    :param location: The location to get the staff group for.\n    :type location: str",
            "_check_storage_needs_cleanup(self):",
            "(xs) -> float",
            "Saves generated images",
            "_ParseAndUnwrap(self, code, dumptree=False)",
            ":param endianness: '?', 'little' or 'big'\n  :param sizes: list of 32-bit or 64-bit sizes\n  :return: list of 32-bit or 64-bit floating-point dtypes.",
            "(x, A) -> y",
            "_can_add",
            "",
            ".embeddings.run(prompt)\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return __self.embeddings.run(prompt)",
            "_init_\n:param K: int\n:param device: str\n:return:",
            "",
            "Returns a dictionary of unarchived links, by folder.",
            "",
            "_call(self, tensor_input):\n    return self.basic_module(tensor_input)",
            "",
            "_wait_for_other_player()\n  _timestep = self._underlying_env.step(self._actions)\n  _actions = [None] * self._num_players\n  _wait_for_other_player()\n  _player_timestep(player)\n  return self._player_timestep(player)",
            ":param weights: \n    :param name: \n    :return:",
            "",
            "",
            "",
            "",
            "",
            "(im)",
            "",
            "Stop all jobs in all sessions.",
            "(self):",
            "_init_ -",
            "",
            "",
            "",
            "",
            ":param session:\n      :param pool_connections:\n      :param pool_maxsize:\n      :param max_retries:\n      :return:\n      :rtype: object",
            "",
            "_cfg_file = os.path.join(self.cfg_dir, 'config.yml')\n    if os.path.exists(_cfg_file):\n        with open(_cfg_file, 'r') as f:\n            cfg = yaml.load(f)",
            "_get_loaded_models_info() -> str:",
            ".",
            "(url, method, headers, files, data, params, auth, cookies, hooks, json) -> None:",
            "_process_all_forms",
            "_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):",
            "",
            "",
            "Tests that the default mode is set on a file created by dotbot.\n\n    :param home: The home directory.\n    :param dotfiles: The dotfiles object.\n    :param run_dotbot: The run_dotbot function.\n    :return: None.",
            "",
            "Returns a network_fn that implements a fully-connected\n  multi-layer perceptron (MLP).",
            "",
            "Test that an individual boss on unit test is working as expected.\n\n  :param X_train:\n  :param y_train:\n  :param X_test:\n  :param y_test:\n  :return:",
            ":return:",
            "_extract(self, file_path):\n    Extract a tar file to the data directory.\n\n    :param file_path: The file path to extract.\n    :return: True if the file was extracted, False otherwise.",
            "(str shareName, str pathName) -> bool\n\n    :param shareName:\n    :param pathName:\n    :return:",
            "",
            "(self, other) -> bool\n\n    Return True if self is a subset of other.",
            "Handle the mouse press event.  If the middle button is\n    pressed, then close the tab that is under the\n    mouse.  If the tab is closed, then also close the\n    window.\n\n  :param event:  Qt.MouseEvent  the mouse event to handle\n  :return:  None",
            "_authenticate_user:\n    :returns: AuthResponse\n    :raises: 500, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 426, 428, 429, 431, 444, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 598, 599\n    :raises: 500, 401, 403, 404, 405, 406, 407,",
            "",
            "",
            "",
            "_build: build the model.\n\n    :param blocks_args: a list of blocks args.\n    :param global_params: a global params.\n    :return:",
            "Find all snippet files in a given directory.\n\n  :param ft: The name of the file type to find snippets for.\n  :param directory: The directory to find snippet files in.\n\n  :return: A set of snippet files.",
            "_set_validation",
            "_to_json_string:\n    Return a JSON string of the configuration.\n    :return: a JSON string of the configuration.\n    :rtype: str\n    :raises",
            ":param item_type: The type of each item in the tuple.\n  :param iterable: The iterable to be converted into a tuple.\n  :param _tuple_cache: The cache to be used by the compiler.\n  :return: The tuple.\n  :rtype: :class:`tuple`.\n  :raises: :class:`TypeError` if the item type is not a valid type.\n  :raises: :class:`TypeError` if the iterable is not a valid iterable.\n  :raises: :class:`TypeError` if the iterable is not a tuple.\n  :raises: :class:`TypeError` if the iterable is not a tuple of the same type as the item type.\n  :raises: :class:`TypeError` if the iterable is not a tuple of the same type as the item type.\n  :raises: :class:`TypeError` if the iterable is not a tuple of the same type as the item type.\n  :raises: :class:`TypeError` if the iterable is not a tuple of the same type as the item type.\n  :raises: :class:`TypeError` if the iterable is not a tuple of the same type as the item type.",
            "Test that the hosts decorator overrides the env_hosts.",
            "",
            "(description)\n\n    :param self:\n    :param waller:\n    :return:\n    :rtype: None or str",
            ":type self: object\n    :rtype: list",
            "",
            "",
            ":param get_value: the key to get the value from the BaseCounter\n    :return: a dictionary of the values of the counters.",
            "(cls, id_, name, sizes, default_size, default_count, default_value)",
            "",
            "(nodes, thunks, pre_call_clear):",
            ":param filename:\n    :param mode:\n    :return:",
            "2111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "_loglikeobs(self, params):\n    Returns the log-likelihood of the data given the parameters.",
            "_summary_",
            ":param session: The session that is currently active.\n    :return: The choice that was chosen by the user.",
            "",
            ":param topic: \n    :param request_options:",
            "(dataloader, current_iter, tb_logger, save_img) -> None",
            "_summary_",
            "Register a model class.\n\n  Args:\n      name (str): The name of the model.\n\n  Returns:\n      Type: The model class.\n\n  Examples:\n      >>> @register('model_name')\n      ... def model_name(cls, *args, **kwargs):\n      ...     # do something with the model class\n      ...     return cls",
            "",
            ".encode(x, n_q=None, st=0) -> torch.Tensor:",
            "Return a list of the children of the current element.\n  :param tag: (optional) the tag name of the elements to return\n  :param recursive: (optional) if True, return all the children of all\n    the children of the current element\n  :return: a list of the children of the current element.",
            "(see: :class:`~pipelines.Pipeline.use_params`):",
            "_init_",
            "",
            ":param model:\n        :return:\n        :rtype: int",
            "(str, List[Parameter]) -> Dict[str, List[Parameter]",
            "(self, leaf=False):",
            ":param number: the number of syllables to return\n    :return: the number of syllables in the given number of syllables\n    :raises ValueError: if the input value is not an integer or less than 1\n    :raises ValueError: if the input value is 1\n    :raises ValueError: if the input value is 2 or less",
            "(",
            ".ExpertToGates() -> tf.Tensor\n\n    Returns a tensor of expert-to-gate functions for each of the\n    self._num_experts experts.",
            "run",
            "Parse the arguments.\n\n  :param ctx: The context.\n  :param args: The arguments to parse.",
            "(sample: torch.FloatTensor, return_dict: bool = True) -> Union[DecoderOutput, torch.FloatTensor]:",
            "",
            "",
            "_clients = {}\n\n_clients = {}\ndef get_client(service: str, session: boto3.session.Session, region: str = None):",
            "_run(self, trial_parameters, workspace, callback, **kwargs)\n    def _run(self, trial_parameters, workspace, callback, **kwargs):\n    def _run_flow(self, trial_parameters, workspace, callback, **kwargs):\n    def _run_flow_with_flow_id(self, trial_parameters, workspace, callback, **kwargs):\n    def _run_flow_with_flow_id_and_flow_name(self, trial_parameters, workspace, callback, **kwargs):\n    def _run_flow_with_flow_id_and_flow_name_and_flow_type(self, trial_parameters, workspace, callback, **kwargs):\n    def _run_flow_with_flow_id_and_flow_name_and_flow_type_and_flow_kwargs(self, trial_parameters, workspace, callback, **kwargs):\n    def _run_flow_with_flow_id_and_flow_name_and_flow_type_and_flow_kwargs_and_flow_type_kwargs(self, trial_parameters, workspace, callback, **kwargs):\n    def",
            "_goes_first(func):\n    if func():\n        return",
            "",
            "Returns the environment variables for the current user.\n\n  :return: The environment variables for the current user.\n  :rtype: dict\n  :see: :func:`~django_user_env.get_env`",
            "Print message to log and exit with given exit code.\n    :param message: message to print\n    :param exit_code: exit code to exit with\n    :return: None\n    :rtype: None\n    :Example:\n    >>> import sys\n    >>> from tools import print_log\n    >>> print_log(\"Hello world\", RED, BOLD)\n    >>> sys.exit(0)\n    :Example:\n    >>> import sys\n    >>> from tools import print_log\n    >>> print_log(\"Hello world\", RED, BOLD)\n    :return: None\n    :rtype: None\n    :Example:\n    >>> import sys\n    >>> from tools import print_log\n    >>> print_log(\"Hello world\", RED, BOLD)\n    :return: None\n    :rtype: None\n    :Example:\n    >>> import sys\n    >>> from tools import print_log\n    >>> print_log(\"Hello world\", RED, BOLD)\n    :return: None\n    :rtype: None\n    :Example:\n    >>> import sys\n    >>> from tools import print_log\n    >>> print_log(\"Hello world\", RED, BOLD)",
            ":param deployment: The deployment to print\n    :return: The deployment to print\n    :rtype: dict",
            ":param v:\n    :return:\n    :rtype:",
            "_close(self):",
            "_get_competent_detectors(self, scores):",
            "_create_waiter(self, *args, **kwargs) -> 'TODO':",
            "text: str\n    min_rarity: int\n    max_rarity: int\n    included_tags: list\n    excluded_tags: list\n    return self.id.identify(\n        text,\n        min_rarity=min_rarity, max_rarity=max_rarity,\n        included_tags=included_tags, excluded_tags=excluded_tags)",
            "(result) ->",
            "Add the loss to the scalar_summary.\n\n  Args:\n    total_loss: Total loss scalar.\n\n  Returns:\n    loss_averages_op: The scalar_summary to be collected and\n      summarized in the Summary."
        ],
        [
            "_iter_raw_references() -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(self) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(self, include_self=False) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(self, include_self=True) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(self, include_self=False, include_self_as_identifier=False) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(self, include_self=True, include_self_as_identifier=False) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(self, include_self=False, include_self_as_identifier=True) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(self, include_self=True, include_self_as_identifier=True) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts",
            "(x)",
            "",
            "_sin_gen(x):",
            "",
            "Calculates the ratio of the image to the desired width and height and resizes the image to the desired width and height.\n\n    Parameters:\n        img (np.ndarray): The image to be resized.\n        width (int): The desired width of the image.\n        height (int): The desired height of the image.\n        model_height (int): The height of the model.\n\n    Returns:\n        np.ndarray: The resized image.\n        float: The ratio of the image to the desired width and height.",
            "Predict using the model.\n\n    :param X: The data to predict.\n    :return: The predictions.\n    :rtype: np.ndarray\n    :raises: :class:`~sklearn.exceptions.NotFittedError`\n    :raises: :class:`~sklearn.exceptions.Data",
            "",
            "Registers static files with the given URI.\n  :param uri: The URI to register the static files with.\n  :param file_or_directory: The file or directory to serve.\n  :param pattern: The pattern to match the static files with.\n  :param use_modified_since: Whether to use the modified-since header.\n  :param use_content_range: Whether to use the content-range header.\n  :param stream_large_files: Whether to stream large files.\n  :param name: The name of the static files.",
            "",
            "",
            "",
            "_init_\n    :param result: result of the function\n    :type result: int or float or string or list or dict or None\n    :return: None\n    :rtype: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises: None\n    :raises",
            "",
            "",
            "_make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type",
            "",
            ".encode(self, xs, masks)\n\n    :param xs: [B, T, D]\n    :param masks: [B, T]",
            "Returns the corners of the center of the rectangle",
            "",
            "Padded data to make the length a multiple of 64.\n\n  :return:  The padded data.\n  :rtype:   bytes\n  :raises:  ValueError if the length is not a multiple of 64.\n  :Example:",
            "_is_fully_within_image(self, image, fully=True, partly=True)",
            "Show error message.\n\n  Args:\n    error (str): error message.\n    width (str): width of the bubble.\n    pos (tuple): position of the bubble.\n    arrow_pos (tuple): position of the arrow.\n    exit (bool): if True, close the bubble when the arrow is clicked.\n    icon (str): icon of the error bubble.\n    duration (int): duration of the bubble.",
            "Returns the parameters of the current transform.",
            "Start a process in a new process.\n\n    :param executable: The path to the executable to start.\n    :param args: The arguments to pass to the executable.\n    :return: The process ID.",
            "()\n    return",
            "_forward",
            "_init_",
            "(output_file=None, resume=False, progress_file=sys.stderr)\n\n    :param output_file: (optional) the file to write the output to.\n    :param resume: (optional) if True, the output file will be opened in\n        append mode.  If False, the output file will be opened in write\n        mode.  (default: False)\n    :param progress_file: (optional) the file to write the progress to.\n        (default: sys.stderr)\n    :return: a new instance of the class.  (default: None)\n        (see: :func:`__init__` for more information)\n    :raises: :class:`~exceptions.Exception`\n        if the output file cannot be opened.  (see: :func:`~exceptions.Exception`\n        for more information)\n        if the progress file cannot be opened.  (see: :func:`~exceptions.Exception`\n        for more information)\n        if the output file cannot be opened.  (see: :func:`~exceptions.Exception`\n        for more information)\n        if the progress file cannot be opened.  (see",
            ".run.log(values, step=step, **kwargs)\n        logger.debug(\"Successfully logged to WandB\")\n        return",
            ":return: the json representation of the object.\n    :rtype: str\n    :raises: :class:`~django.core.serializers.",
            "_format_tb_for_exception_report_",
            "",
            "",
            "Set the backend to use for all the config objects in this\n    config object.",
            ".",
            ":param type: \n    :param message: \n    :param stack_trace: \n    :param inner_exception: \n    :param data: \n    :param error_response:",
            "",
            "_networkaccessmanager() -> QNetworkAccessManager:",
            "Test that a command is executed on the target.\n\n  :param command: The command to execute.\n  :param args: The arguments to pass to the command.\n  :param expected: The expected output of the command.\n  :param timeout: The timeout in seconds to wait for the command to complete.\n  :return: The output of the command.",
            "Returns the prompt embedding for the given adapter_name.\n\n    Args:\n        adapter_name (str): The name of the adapter.\n\n    Returns:\n        torch.Tensor: The prompt embedding.",
            "_clear()\n\n    Clear the screen and reset the cursor to the top left.\n\n    :return:",
            "`ssl_resnext101_32x8d` is a PyTorch implementation of the\n  `ResNeXt-101-32x8d` model from\n  https://github.com/facebook/fb-ResNet-Python/blob/",
            "Find the center of the arc.\n\n    :return: The center of the arc.\n    :rtype: np.array\n    :raises: ValueError if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises: Exception if the arc is not a circle.\n    :raises:",
            "_init_",
            "",
            "",
            "download file from remote server to local server\n\n  :param target: remote server file path\n  :param use_cache: use local file if exist\n  :return: local file path",
            ".register(cls, name: str, agent_cls: Type['Agent'])",
            "Initializes the clock.\n\n  Args:\n    self: The clock object.",
            "()",
            "",
            "",
            "(path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext_map: Optional[Dict[str, List[str]]]) -> str:\n    (path: str, ext",
            "",
            "_init_",
            "_regularizers: List[Tuple[str, Regularizer]] = None",
            "",
            "",
            ".close()\n    return self.close_connection()",
            "",
            "Send the status table.\n\n  :param bot: The bot.\n  :param update: The update.",
            "_get_lr_scale\n    :param opt:\n    :return:\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype: float\n    :rtype:",
            "(str|int, str|int) ->",
            "_defaultStack()",
            "(def)",
            "",
            "Generates a Mel-filters.\n\n  Args:\n      device (torch.device): The device to use.\n      n_mels (int): Number of Mel-filters to generate.\n\n  Returns:\n      torch.Tensor: The Mel-filters.",
            ":param itag: \n    :return: \n    :rtype:",
            ":param word_set: set of words to add\n  :param url: url to fetch\n  :param line_function: function to process each line of the response\n  :return: None\n  :raises: ValueError if the line_function does not return a string or None\n  :raises: ValueError if the url is not a string or None\n  :raises: ValueError if the word_set is not a set or None\n  :raises: ValueError if the line_function does not return a string or None\n  :raises: ValueError if the url is not a string or None\n  :raises: ValueError if the word_set is not a set or None\n  :raises: ValueError if the line_function does not return a string or None\n  :raises: ValueError if the url is not a string or None\n  :raises: ValueError if the word_set is not a set or None\n  :raises: ValueError if the line_function does not return a string or None\n  :raises: ValueError if the url is not a string or None\n  :raises: ValueError if the line_function does not return a string or None\n  :raises: ValueError if the url is not a",
            "_summary_or_description_of_function_or_method_",
            "Lookup a list of users and their relationships.\n\n  :param user_id: The user id to lookup.\n  :param screen_name: The screen name to lookup.\n\n  :return: A list of users and their relationships.",
            ":param jshost:\n  :param echarts_template_dir:\n  :param force_js_embed:\n  :return:\n  :rtype: object\n  :param kwargs:\n  :return:\n  :rtype: object",
            ":param cls: type of the saved search doc to be created\n  :param search_doc: type of the search doc to be converted\n  :param db_doc_id: id of the document in the database to be converted\n  :return: type of the saved search doc to be created",
            "Return the interval label for the given x-value.",
            "",
            "",
            "",
            "\ufffd",
            "",
            ":param cls:\n  :param v:\n  :return:",
            ":param expr:  A list of tokens.\n    :return:  A list of tokens.",
            ".  :param inp:  :return:  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :",
            "Builds a backbone from a config.",
            "(int) number: number of elements to randomize.\n    (bool) le: lower bound for the random number.\n    (bool) ge: upper bound for the random number.\n\n    Returns a random number between 10 and 100.",
            "Converts an XML node to a dictionary.\n    :param xml: The XML node to convert.\n    :return: The converted dictionary.",
            "",
            ".",
            "",
            "Train autoencoder.\n    :param problem_name:\n    :param data_dir:\n    :param output_dir:\n    :param hparams:\n    :param epoch:\n    :return:\n    :rtype: None",
            "",
            "Save the model to the database.\n    :param self:\n    :param args:\n    :param kwargs:\n    :return:\n    :rtype: None\n    :raises:\n    :",
            "(str) -> Color:\n\n    Return a Color instance from a color hex string.\n\n    :param color_hex: A color hex string.",
            "",
            ".get_cache_logic()",
            "_repr_impl(self):",
            "",
            "Delete a model.\n  :return:  The response.\n  :rtype:  str",
            "",
            ".",
            "Tests a put request.\n\n    :param partial:  True if the request should be partial.\n\n    :return:  The response.",
            "Acquire a token for the Microsoft Graph API.\n\n  Returns:\n    A dictionary containing the access token and refresh token.",
            "Add documents to Milvus.\n\n    :param self: The object instance.\n    :param kb_file: The knowledge file to be added.\n    :return: The status of the operation.",
            "",
            "_run_hook(self, hook, file_args):\n    Run a hook.\n\n    Parameters:\n        hook (dict): A hook dictionary.\n        file_args (dict): A dictionary of arguments for the file.\n\n    Returns:\n        A dictionary of the result of the hook.",
            "(bottomUpInput, enableLearn, computeInfOutput) -> numpy.ndarray",
            "",
            "",
            "",
            "",
            "_init_\n    :param init_data_by_df:\n        type: pd.DataFrame\n    :param dtype:\n        type: str\n    :param if_fq:\n        type: str\n    :return:\n        type: None\n    :raises:",
            "",
            "if self._loaded:\n        return\n    self._loaded = True\n    self.games_store_dir = games_store_dir\n    self.trainer = trainer",
            "Get the content between two string.\n\n    :param string: string to be processed\n    :param start: start string\n    :param end: end string\n    :return: content string",
            "",
            "",
            "",
            "_call__",
            "(input_sequence, training=True, mask=None) -> {'encoder_output': hidden}",
            "Parse data from file.\n\n  :param filename: file name\n  :return: data",
            "",
            "",
            "Input example for a single image",
            "Save the document to the database.\n    :return:",
            ":param data: str\n    :return: bool\n    :rtype: bool\n    :raises:",
            "_load_prompt_cache(self, path):\n    Load prompt cache from the given path.\n\n    Args:\n        path (str): The path to the prompt cache.\n\n    Returns:\n        dict: The prompt cache.",
            ":param cached_response:\n    :return:",
            "",
            "",
            "",
            "(str)",
            "(name, session, options, documentation=\"\", usage=\"\")):",
            "_get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:",
            "",
            "Test that we can install an upper-version-2.0-py2.7.egg-info",
            "(Re)start the jail.  This function is called when a new jail is\n    created or when a jail is re-started.  This function will\n    check the jail's database for any bans and add them to the\n    jail's queue.  This function will also check the jail's\n    database for any bans that have been removed and add them\n    to the jail's queue.  This function will also check the jail's\n    database for any bans that have been added and add them to\n    the jail's queue.  This function will also check the jail's\n    database for any bans that have been removed and add them to\n    the jail's queue.  This function will also check the jail's\n    database for any bans that have been added and add them to\n    the jail's queue.  This function will also check the jail's\n    database for any bans that have been removed and add them to\n    the jail's queue.  This function will also check the jail's\n    database for any bans that have been added and add them to\n    the jail's queue.  This function will also check the jail",
            "_normalized_numbers(self, sentence):",
            ":param model: Path to model file or model file name\n  :param task: 'classify' or 'recognize'\n  :param verbose: True or False",
            ":param allowed_methods: list of strings\n      :return: function",
            "Validates the given exchange.\n\n  :param value: The exchange to validate.\n\n  :return: The error message if the exchange is invalid, or None.",
            ":param enckey:",
            "",
            "",
            "_get_heap_boundaries(self, addr=None):",
            "(self, default: Optional[float] = None, label: Optional[str] = None, **kwargs):",
            "(start, end) -> list of",
            "",
            "Initialize centroids as random points from the data",
            "",
            ".forward(self, **kwargs):\n    :param kwargs:\n    :return:",
            "Recursive function to get all children of an element.\n\n    :param element: Element to get children of.\n    :param tag: Optional tag to filter children by.\n    :return: List of children.",
            "",
            ":param df_lists: [('df_name', df_name), ('df_name', df_name), ... ]",
            "",
            "",
            ":param cls:\n      :param resource_body_cls:\n  :return:\n  :rtype: object\n  :raises:",
            ".write()",
            "Check if the value is a valid transaction hash.\n\n  :param value: The value to check.\n\n  :raises: `RPCError` if the value is not a valid transaction hash.",
            "_get_api_url",
            "_forward(self, x):",
            "(Optional) Set users to ignore when sending messages.\n        \n    :param users: List of users to ignore.",
            ":param args:\n    :param kwargs:\n    :return:",
            ":param result: result of the query",
            "",
            "_add_count_data(self, counts)",
            "_chunk_key_offset(self, key):\n\n    Return the offset of the key in the chunk.\n\n    :param key: The key to get the offset of.\n    :type key: str",
            "(self, element):\n\n    def _last_id(self):\n\n    def _read(self):\n\n    def _write(self, data):\n\n    def _delete(self, id):\n\n    def _delete_all(self):\n\n    def _get_all(self):\n\n    def _get(self, id):\n\n    def _update(self, id, element):\n\n    def _insert(self, element):\n\n    def _update_all(self, data):\n\n    def _delete_all(self):\n\n    def _get_all(self):\n\n    def _get(self, id):\n\n    def _delete(self, id):\n\n    def _insert(self, element):\n\n    def _update(self, id, element):\n\n    def _update_all(self, data):\n\n    def _delete_all(self):\n\n    def _get_all(self):\n\n    def _get(self, id):",
            "(PUT /api/v1/space/1) - get space data and members (default space)\n    :return: 200 OK\n    :rtype: dict",
            "Returns True if the request was successful.",
            "(cache_root=None) -> None:\n\n    :param cache_root: The directory to use for the cache. If None, then the cache is not used.",
            "",
            "Args:\n        env: (gym.Env)",
            "(",
            "",
            "_get_config_ref() -> str:\n    _get_config_ref() -> str:",
            "Initializes the parser.\n\n     :param exclude: a list of regular expressions to exclude from the parser.\n     :param include: a list of regular expressions to include in the parser.\n     :param invalid: if True, the parser will include invalid characters.\n     :return: None.",
            "_fit_inverse_model()",
            "",
            "",
            "_get_item",
            "",
            "",
            ".  Sets the driver to use to interact with the page.\n\n    :param driver: the driver to use to interact with the page.\n\n    :raises ValueError: if the driver is `None`",
            "",
            "(self, source, results, device=\"cuda\") -> None:",
            "",
            "",
            "() -> str:",
            "_parse_result(self, d):\n    return d[\"std\"]",
            "",
            "",
            "(checkpoint, directory, device, max_to_keep=10)",
            "",
            "Remove the desktop shortcut for the game.\n    :param self: The current GameView.\n    :param _args: The arguments passed to the method.\n    :return: None.",
            "_bwd(self, dLdy, X):\n    Backward pass",
            "",
            ":return: :class:`str`",
            ":param timeout:\n    :return:\n    :rtype: :class:`~requests.Timeout` or :class:`~requests.models.Timeout`\n    :raises: :class:`~requests.exceptions.Timeout`\n    :raises: :class:`~requests.models.Timeout`\n    :raises: :class:`~requests.exceptions.ConnectionError`\n    :raises: :class:`~requests.models.ConnectionError`\n    :raises: :class:`~requests.exceptions.ReadTimeout`\n    :raises: :class:`~requests.models.ReadTimeout`\n    :raises: :class:`~requests.exceptions.ConnectTimeout`\n    :raises: :class:`~requests.models.ConnectTimeout`\n    :raises: :class:`~requests.exceptions.ReadTimeout`\n    :raises: :class:`~requests.models.ReadTimeout`\n    :raises: :class:`~requests.exceptions.ConnectionError`\n    :raises: :class:`~requests.models.ConnectionError`\n    :raises: :class:`~requests.exceptions.ConnectTimeout`\n    :raises: :class:`~requests.models.ConnectTimeout`",
            "Handle the mid-button click on a tab.\n\n    :param event: the mouse event.\n    :return: nothing.",
            "",
            "Parse a Microsoft Word file.\n\n  :param file: The file to parse.\n  :param errors: How to handle errors when parsing the file.\n  :return: The text of the file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises: ValueError if the file is not a Microsoft Word file.\n  :raises",
            ":param random: Random number generator\n    :param cells: List of cells\n    :param connections: List of connections\n    :return: The least used cell in the list of cells.",
            "",
            "",
            "Patch the environment with the given keyword arguments.\n\n    :param kwargs: The keyword arguments to patch the environment with.",
            "Save the event to the database.\n\n  :param cache_key: (optional) The cache key to use for the event.\n  :param data: (optional) The event data.\n  :param kwargs: (optional) The extra arguments to use for the event.\n\n  :return: The saved event.",
            "",
            ":param input_tensor:\n    :param output_tensor:\n    :param output_tensor_grad:\n    :return:\n    :rtype: Optional[torch.Tensor]\n    :raises: ValueError\n    :raises: TypeError\n    :raises: NotImplementedError\n    :raises: Exception\n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises: \n    :raises:",
            "_draw_points(self, ax, data, center)",
            "",
            "_summary",
            "_logcdf(value, h, z)",
            "list_docs",
            "(w0) :\n    :param w0: (float) the width of the input signal",
            ":returns: string representation of the object\n  :rtype: str\n  :raises: :class:`~pdfplumber.pdf.PdfInfo`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class:`~pdfplumber.pdf.PdfPage`\n  :raises: :class",
            "",
            "Extract a single file from a zip archive.\n\n  :param zip_ref: The zip file reference.\n  :param file_entry: The file entry in the zip archive.\n  :param target_dir: The target directory.\n  :return:",
            "",
            "_code(self):",
            "Convert unicode to str, but not to utf-8.\n\n  >>> safe_str(u\"foo\")\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"utf-8\", \"replace\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"replace\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"ignore\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"strict\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"xmlcharrefreplace\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"xmlcharrefreplace\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"xmlcharrefreplace\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"xmlcharrefreplace\"))\n  u\"foo\"\n  >>> safe_str(u\"foo\".encode(\"ascii\", \"xmlcharrefreplace",
            "_init_",
            ":param node:\n      :param xpath:\n      :param key:\n      :param val:",
            "CreateInheritableAnnotation",
            ":returns: A list of extensions that this file can be watched with.\n    :rtype: list of str",
            "Return True if the toolbar should be shown.",
            "Sort groups by the number of samples in each group.\n\n  Parameters\n  ----------\n  group_index : array_like\n    Index array of group elements.\n  ngroups : int\n    Number of groups.\n\n  Returns\n  -------\n  group_index : array_like\n    Sorted group indices.",
            "Handle new object file.",
            ".player_config_args[\"title\"]",
            "",
            "Sort the hits by score and cross_score.\n  :param rank_results: whether to rank the results\n  :param hits: the hits list\n  :return: the hits list\n  :rtype: List[dict]\n  :raises: Exception",
            "",
            ".get_actions(deterministic=deterministic)",
            "Preconvert a value to a list, set or path.\n\n  :param item:  the item to convert\n  :return:     the converted item.",
            "",
            "",
            "",
            ":param img1_path: list or str\n    :param img2_path: str\n    :return: list, bool\n    :return: list of image paths, boolean for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not\n    :return: list of image paths, list of image paths for bulk process or not",
            "",
            "(int, int, int, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str",
            "Returns a list of tokens and the length of the string, as well as a\n  list of token ranges.",
            ":param payload:\n        :type payload: str\n        :return:\n        :rtype: str",
            "_call__",
            "'Align the object on the border of the frame.'",
            "",
            ":param logins: dict of logins to usernames\n      :param ins: input stream\n      :param out: output stream",
            "",
            "Test that the ratio must be between 0 and 1.0.",
            ":param source: int\n    :param visited: list\n    :return:",
            "(str)",
            "",
            "(dLdy, X) -> (dX, dW, dB)",
            "",
            "",
            "",
            "",
            "_go(self):",
            "_mayRaiseExceptionAbs(self, exception_type):\n    :param exception_type:\n    :return:",
            "_make_save_file_name(self, store_type: str) -> str:",
            "",
            "_init_",
            "",
            "",
            "_get(self):",
            "_init_",
            "",
            "",
            "Prompts user for a yes or no answer.\n    :param question: The question to ask the user.\n    :return: True if the user answered 'yes' or 'y', False if the user answered 'no' or 'n'.\n    :rtype: bool",
            "",
            "_mul__",
            "\u83b7\u53d6\u5fae\u535a\u5185\u5bb9\n  :param info: \u5fae\u535a\u4fe1\u606f\n  :param is_original: \u662f\u5426\u662f\u539f\u521b\u5fae\u535a\n  :return: \u5fae\u535a\u5185\u5bb9",
            "Save model to output_dir.\n\n  Args:\n      trainer (transformers.Trainer): The trainer.\n      output_dir (str): The output directory.",
            "Return the next value.\n  :return: None, the current image, None, the current text.\n  :rtype: tuple(int, np.ndarray, int, str)\n  :raises: StopIteration if there are no more values.\n  :raises: TypeError if the current value is not a numpy array.\n  :raises: TypeError if the current text is not a string.\n  :raises: ValueError if the current value is not a numpy array.\n  :raises: ValueError if the current text is not a string.\n  :raises: ValueError if the current value is not a numpy array.\n  :raises: ValueError if the current text is not a string.\n  :raises: ValueError if the current value is not a numpy array.\n  :raises: ValueError if the current text is not a string.\n  :raises: ValueError if the current value is not a numpy array.\n  :raises: ValueError if the current text is not a string.\n  :raises: ValueError if the current value is not a numpy array.\n  :raises: ValueError if the current text is not a string.\n  :raises: ValueError if the current value is not a numpy array.",
            "",
            "Initialize the model with random points.\n\n    :param init_points: number of random points to initialize the model with.",
            "Check if events are being used in a component.",
            "(optional)  :param environment_dict:  The environment dictionary to use for this preset.\n    :type environment_dict:  dict\n    :returns:  The same instance of this class, with the environment dictionary merged into the existing\n    environment dictionary.  If the environment dictionary is None, the entire environment dictionary is\n    removed from the entire environment dictionary.  If the environment dictionary is not None, the\n    entire environment dictionary is replaced with the new environment dictionary.  If the environment\n    dictionary is None, the entire environment dictionary is removed from the entire environment\n    dictionary.  If the environment dictionary is not None, the entire environment dictionary is replaced\n    with the new environment dictionary.  If the environment dictionary is None, the entire environment\n    dictionary is removed from the entire environment dictionary.",
            "_extract_code(self, response: str, separator: str = \"```\") -> str:",
            ".",
            "",
            "(self):",
            "",
            "(source, results, device=\"cuda\") -> None:",
            ":param message:\n  :param ostream:\n  :return:",
            ":param var_name: str\n    :param file_name: str\n    :return:",
            "",
            "",
            "_update_kv_cache(kv: torch.FloatTensor, inference_params: InferenceParams) -> None:",
            "_call__",
            "Args:\n        pred (paddle.Tensor): \n        gt (paddle.Tensor): \n        mask (paddle.Tensor): \n        weights (paddle.Tensor, optional):",
            "",
            "",
            "",
            "Returns the number of pages in the document.\n  \n  @return  The number of pages in the document.\n  @rtype   int\n  @see     getNumPages\n  @see     getNumPagesInDocument\n  @see     getNumPagesInCollection\n  @see     getNumPagesInDocumentAndCollection\n  @see     getNumPagesInCollectionAndDocument\n  @see     getNumPagesInCollectionAndDocumentAndPage",
            "_add_column(self, name, data):\n\n    :param name: str\n    :param data: numpy.ndarray or numpy.recarray\n    :return:",
            "",
            "Create a Vision-Transformer-based model from the `vit_base_patch32_224_in21k`\n  pretrained model.\n\n  Args:\n      pretrained (bool): If True, load a pre-trained model.\n      **kwargs (optional keyword arguments): The keyword arguments of the\n          `vit_base_patch32_224_in21k` model.\n\n  Returns:\n      torch.nn.Module:",
            "",
            "Returns the number of output units in the layer.",
            "",
            "_processCmd(self, aInfo, aAction=None):",
            "_call__",
            "",
            "_from_node:\n    :param index: index of the node\n    :param data: data of the node\n    :param modify_index: index of the node to modify, or None if no modification is required\n    :return: a ClusterConfig object\n    :rtype: ClusterConfig\n    :raises: ValueError if data is not a valid json object\n    :raises: TypeError if data is not a valid json object\n    :raises: ValueError if index is not a valid integer\n    :raises: ValueError if modify_index is not a valid integer\n    :raises: ValueError if modify_index is not None and not a valid integer\n    :raises: ValueError if modify_index is not None and not a valid integer\n    :raises: ValueError if modify_index is not None and not a valid integer\n    :raises: ValueError if modify_index is not None and not a valid integer\n    :raises: ValueError if modify_index is not None and not a valid integer\n    :raises: ValueError if modify_index is not None and not a valid integer\n    :raises: ValueError if modify_index is not None and not a valid integer\n    :raises: ValueError if modify_index is",
            ".is_partly_within_image(self, image)",
            "_split_device_string:\n    :param string:\n    :return:",
            ":return: (uid, frontaddr)",
            "_call__",
            "",
            "(x) -> torch.Tensor\n\n    :param img: (torch.Tensor) image to predict on",
            "(X, y) -> self",
            "Save the model checkpoint with the current random state.\n\n    :param iteration: The current iteration number.\n    :param model: The model to save.\n    :param args: The arguments.",
            "Remove SQL from a question.\n\n  :param question: The question to remove SQL from.\n  :type question: str",
            "",
            "\u83b7\u53d6\u89c6\u9891\u7684id\n    :param url:\n    :return:\n    :rtype: int",
            "",
            "_call_ with sample_weight",
            "_get_item(self, entry, handle_value = 0):\n    Return the item at the given entry.\n\n    :param entry: The entry to get the item from.\n    :param handle_value: The handle value to get the item from.\n    :return: The item at the given entry.\n    :raises: :class:`~pyglet.error.PygletError` if the item is not found.\n    :raises: :class:`~pyglet.error.PygletError` if the item is not found.\n    :raises: :class:`~pyglet.error.PygletError` if the item is not found.\n    :raises: :class:`~pyglet.error.PygletError` if the item is not found.\n    :raises: :class:`~pyglet.error.PygletError` if the item is not found.\n    :raises: :class:`~pyglet.error.PygletError` if the item is not found.\n    :raises: :class:`~pyglet.error.PygletError` if the item is not",
            ":param x: (batch_size, seq_len, d_model)\n    :param x_mask: (batch_size, 1, seq_len)\n    :param offset: (int)",
            "_is_same_host(self, url):",
            "Convert raw data to proto object.\n\n    :param raw: raw data\n    :return: proto object\n    :rtype: feature_pb2.Feature",
            "",
            "",
            "Add a flow to the store.\n\n  :param f: The flow to add.\n  :type f: mitmproxy.flow.Flow\n  :return: None.\n  :rtype: None.",
            "() ->",
            "_send_attachments - Send a list of media to a chat_id.\n    :param chat_id: Chat id to send the media.\n    :param notify_type: Type of notification to send.\n    :param attach: List of media to send.\n    :return: True if all media were successfully sent, False otherwise.",
            "",
            "Register the public key of the server in the session.\n\n    :return: None.",
            "",
            "",
            "",
            "_cost(self, s_start, s_goal):",
            "Display a message in markdown format.\n\n  :param message: The message to display.",
            "",
            "Build a DataParallel model.\n\n  Args:\n      model (nn.Module): The model to be built.\n      device (str): The device where the model will be put on.\n          Options include 'cuda', 'mlu'.\n      dim (int): The dimension of the data to be put on.\n          Options include 0, 1, 2.\n      *args: Additional arguments for the DataParallel model.\n      **kwargs: Additional keyword arguments for the DataParallel model.\n\n  Returns:\n      nn.DataParallel: A DataParallel model.",
            "Gets unsortedbin from the current heap.\n\n    :param addr: Address to get the unsortedbin from.\n    :param verbose: If to print the unsortedbin.\n    :return: The unsortedbin.\n    :type: bin",
            "",
            "_get_study_direction(self, study_id: int) -> StudyDirection:",
            ":param key:\n      :return:",
            "",
            "",
            "",
            "\u83b7\u53d6\u6570\u636e\n    :param year: \u5e74\n    :param quarter: \u5b63\u5ea6\n    :return: \u80a1\u7968\u6570\u636e",
            "",
            "Test static proxy requests.",
            "",
            "_get_value_trackers",
            ".test_cleanup() should remove all the jobs from the registry.",
            "(x) -> (y)",
            "",
            "",
            "_cell_to_text(self):",
            "(output_sequence: torch.Tensor, output_sequence_mask: torch.Tensor) -> torch.Tensor:",
            "(text)",
            "(str | int | None) *args, **kwargs: Any) -> str:",
            "(name, value, minval=None, maxval=None, check_fn=None)",
            "",
            "",
            "",
            ":param label: str\n:param interval: int\n:param max_step: int\n:return:",
            "Update the latest price in all Boms.\n  :return: None.",
            "",
            "",
            "Update forward refs in the given namespace.\n\n  :param cls: The class to update forward refs for.\n  :param localns: The namespace to update forward refs in.\n  :return: None.\n  :rtype: None.\n  :raises: :class:`~typing.",
            "",
            "",
            "",
            "_stop(self, now=False):",
            "",
            "_handle_starttag(self, tag, attrs):\n    Handle the start tag of an HTML element.\n\n    :param tag: The tag name.\n    :param attrs: The attributes of the tag.\n    :return: None.",
            "(fullname, path=None, target=None) -> ModuleSpec or None.",
            "",
            "",
            "Update status of the job.\n\n  :param ft: Future object.\n  :return: None.",
            "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _",
            "Returns an array from a file.\n    :param args:\n        - filename\n        - dtype\n        - count\n        - sep\n        - -1 for autodetect",
            "Deserializes a `Ciphertext` from a `CiphertextBlob`.\n\n  :param ciphertext_blob: The `CiphertextBlob` to deserialize.\n  :return: The deserialized `Ciphertext`.",
            "_call_endpoint(self, method_name, req_body):",
            "Returns a unicode string representation of the object.\n\n  :returns: The unicode string representation of the object.\n  :",
            "",
            "_set(self, logicalId, resource):\n\n    Set the value of a resource.",
            "",
            "",
            "'Use a named query'",
            "(tensorflow_hub.load_module_config)",
            "",
            ":param encoder_path: path to the encoder state_dict\n  :param decoder_path: path to the decoder state_dict\n  :return:",
            "",
            "Disable the active adapter.\n\n  :return: The forward function of the base model.",
            "Convert a .wav file to silk.\n\n    :param pcm_path: The path to the .wav file.\n    :param silk_path: The path to the silk file.\n    :return: The duration of the silk file in milliseconds.",
            "",
            "Returns the number of threads to create.\n\n  :return: The number of threads to create.\n  :rtype: int",
            "",
            "",
            "Save model checkpoint to a directory.\n\n    Args:\n        program: the fluid.Program.\n        ckpt_name: the name of the checkpoint.\n\n    Returns:\n        the directory of the checkpoint.",
            "_get_attribute(self, attribute):\n\n    :param attribute: The attribute to describe.\n    :return: The attribute value.\n    :rtype: str",
            "Delete a conversation.\n  :param convo_id: The ID of the conversation to delete.\n  :type convo_id: str\n  :return: None.",
            "Return a queryset of all the objects that can be accessed by the\n    user.  This includes the objects the user can see, the objects that\n    the user can edit, and the objects that the user can create.\n\n    :returns: A queryset of all the objects that can be accessed by\n      the user.  This includes the objects the user can see, the\n      objects that the user can edit, and the objects that the\n      user can create.\n\n    :rtype: ``django.db.models.query.QuerySet``",
            ":param str path:",
            "",
            "Returns the name of the group for the staff_course_location.\n  :param location: The location of the staff_course_location.\n  :return: The name of the group for the staff_course_location.\n  :rtype: str\n  :raises: ValueError if the legacy name does not exist.",
            "",
            "(xs, **kwargs) -> float",
            "Generates saved images by feed",
            "(str) -> (str, str, str)",
            "",
            "(function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function, function, function, function, function,\n     function, function",
            "_can_add",
            "",
            "_wrapped_embeddings_run(self, prompt: str | list[str]) -> LLMRunner:\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return self.embeddings.run(prompt)\n\ndef run(self, prompt: str | list[str]) -> LLMRunner:\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return self.embeddings.run(prompt)\n\ndef _wrapped_embeddings_run(self, prompt: str | list[str]) -> LLMRunner:\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return self.embeddings.run(prompt)\n\ndef run(self, prompt: str | list[str]) -> LLMRunner:\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return self.embeddings.run(prompt)\n\ndef _wrapped_embeddings_run(self, prompt: str | list[str]) -> LLMRunner:\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return self.embeddings.run(prompt)\n\ndef run(self, prompt: str | list[str",
            "_init_",
            ":param name: name of the command\n  :param linux_command: linux command\n  :param windows_command: windows command\n  :return:",
            "",
            "Calculates the KL-divergence between two normal distributions.",
            "_call(self, tensor_input):",
            ":param cls:\n    :param mapping:\n    :return:",
            ".  Return the next timestep.  The environment is assumed to be in\n    the state of the current player at this timestep.  The\n    environment will be in the state of the other player at the\n    next timestep.  The environment will be in the state of the\n    current player at the final timestep.  The environment will\n    be in the state of the other player at the final timestep.",
            ":param weights:\n    :param scale:\n    :return:\n    :rtype:\n    :type scale:\n    :type name:",
            "Check exploit.check_default() returns a value when the exploit is\n  successful.\n\n  :param generic_target: A target to exploit.\n  :type generic_target: target_types.Target\n  :return: None.",
            "",
            "",
            "",
            "",
            "_getheaderAnim:\n    :param im:\n    :return:",
            "",
            "",
            "(self):",
            "_init__",
            "Sets the output keys for all the datasets.\n\n    Args:\n        datasets: list of datasets.\n        output_keys: list of output keys.\n\n    Returns:\n        None.",
            "",
            "",
            "",
            "",
            "",
            "_cfg = cfg.get_config()\n        # TODO: \n        # 1. add some default value\n        # 2. add some config check\n        # 3. add some config check for some config\n        # 4. add some config check for some config\n        # 5. add some config check for some config\n        # 6. add some config check for some config\n        # 7. add some config check for some config\n        # 8. add some config check for some config\n        # 9. add some config check for some config\n        # 10. add some config check for some config\n        # 11. add some config check for some config\n        # 12. add some config check for some config\n        # 13. add some config check for some config\n        # 14. add some config check for some config\n        # 15. add some config check for some config\n        # 16. add some config check for some config\n        # 17. add some config check for some config\n        # 18. add some config check for some config\n        #",
            "_get_loaded_models_info() -> str:",
            ".get_dev_examples",
            "(function)",
            "_form_view_function_wrapper(self, form):",
            "_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):",
            "Load the library item into the record.\n\n  :return: None.",
            ":param date_string: \n    :return:",
            "Test default mode",
            "",
            "- fully-connected (fc) layers with",
            "",
            "Test individual_boss_unit_test_probas",
            ":return:",
            "_extract(self, file_path):\n\n    Extract a tar.gz file.\n\n    Parameters\n    ----------\n    file_path : str\n        Path to the tar.gz file to extract.\n\n    Returns\n    -------\n    bool\n        True if extraction is successful, False otherwise.\n\n    See Also\n    --------\n    extract_file(self, file_path):\n        Extract a file from a tar.gz file.",
            "(shareName, pathName) -> bool\n\n    Delete a file from a share.\n\n    :param shareName: The share name.\n    :param pathName: The path name.\n    :return: True if the file was deleted successfully, False otherwise.\n    :raises: SessionError if the session is not connected to a server.",
            "",
            "_contains__",
            "",
            "",
            "",
            "",
            "_pyro_param(self, msg) -> ret",
            "(constructor)\n    Parameters\n    ----------\n    blocks_args: list of dict\n        List of dictionary containing parameters for each block.\n    global_params: dict\n        Global parameters for the model.",
            ":param ft:  the name of the file to search for\n  :param directory:  the directory to search in\n  :return:  the list of files that match the name and the directory",
            "_set_validation(self, batch_size, X_val, Y_val, trigger, val_method=None):\n    \t\n    \tSet validation",
            "_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict is a dictionary of all the configuration options for this config object.\n_internal_dict",
            "",
            "",
            "",
            "(str) post_release command.\n\n    Returns:\n        str: post_release command.\n        None: post_release command is not set.\n\n    See Also:\n        :func:`post_release_service`\n\n    :param str command: post_release command.\n        None: post_release command is not set.\n        :func:`post_release_service`\n\n    :rtype: str\n        post_release command.\n        None: post_release command is not set.\n        :func:`post_release_service`\n\n    :raises: :class:`~wouter.errors.WouterError`\n        - when post_release command is not set.\n        - when post_release command is not valid.\n        - when post_release command is not executable.\n        - when post_release command is not found.\n        - when post_release command is not found in the current environment.\n        - when post_release command is not found in the current environment.\n        - when post_release command is not found in the current environment.\n        - when post_release command is not found in the current environment.\n        - when post_",
            ":type self: Model\n  :rtype: list\n  :return: list of fields to be displayed in the form",
            "",
            "",
            ":return: a dict of the current counter's values.\n      :rtype: dict",
            "(cls, id_, name, sizes, parent, children, children_map)",
            ":param ctext:",
            "(nodes, thunks, pre_call_clear):",
            "",
            "2117708148076857758362089240872387245711970733268682457289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289716289",
            "_loglikeobs(self, params):",
            "(int):\n    The number of connected components in a graph.",
            "",
            "",
            ":param topic: \n    :param request_options:",
            "_validation(self, dataloader, current_iter, tb_logger, save_img=False):\n\n    _validation_nondist(self, dataloader, current_iter, tb_logger,\n                        save_img)\n\n_validation_nondist(self, dataloader, current_iter, tb_logger,\n                    save_img)\n\n    _validation_dist(self, dataloader, current_iter, tb_logger,\n                    save_img)\n\n_validation_dist(self, dataloader, current_iter, tb_logger,\n                    save_img)",
            "_Convert raw features to features.\n    Args:\n      raw_features: A `tf.train.Example` or `features.FeatureDict`\n        containing the features to be converted.\n      random_seed: A `int` used to seed the `np_random` for the\n        corresponding `raw_features`.\n    Returns:\n      A `features.FeatureDict` containing the converted features.",
            "",
            "Test that the same padding is used when output_padding is None.",
            ".encode(x, n_q=None, st=None) -> torch.Tensor:\n\n    Encode x using the same encoding as the model.\n\n    Parameters\n    ----------\n    x : torch.Tensor\n        The input tensor.\n    n_q : int, optional\n        The number of codes to encode.\n    st : int, optional\n        The start index of the codes to encode.\n\n    Returns\n    -------\n    torch.Tensor\n        The encoded tensor.",
            "Return all children of the element.\n  :param tag: The tag name of the children to return.\n  :param recursive: Whether to return all children, or only direct children.\n  :return: The children of the element.",
            "_use_params(self, params, **cfg):\n    Use the given params to produce a new context.\n\n    :param params: The parameters to use.\n    :param cfg: The configuration to use.\n    :return: The new context.\n    :rtype: Generator[Any, Any, Any]\n\n    :raises: :class:`~pipelines.exceptions.PipelineException` if the\n        parameters are not valid.\n\n    :raises: :class:`~pipelines.exceptions.PipelineException` if the\n        parameters are not valid.\n\n    :raises: :class:`~pipelines.exceptions.PipelineException` if the\n        parameters are not valid.\n\n    :raises: :class:`~pipelines.exceptions.PipelineException` if the\n        parameters are not valid.\n\n    :raises: :class:`~pipelines.exceptions.PipelineException` if the\n        parameters are not valid.\n\n    :raises: :class:`~pipelines.exceptions.PipelineException` if the\n        parameters are not valid.\n\n    :raises: :class:`~pipelines.exceptions.PipelineException` if the\n        parameters are not valid.\n\n    :raises: :",
            "_init_",
            "Close the tensorboard writer.",
            "Returns the token limit for a given model.\n    \n    Args:\n        model (str): The model to get the token limit for.\n\n    Returns:\n        int: The token limit for the model.",
            "_get_param_groups() - returns a dictionary of all the parameters that are used by the model and the datamanager.\n        - datamanager_params - a dictionary of all the parameters that are used by the datamanager.\n        - model_params - a dictionary of all the parameters that are used by the model.\n\n:return: a dictionary of all the parameters that are used by the model and the datamanager.\n:rtype: Dict[str, List[Parameter]",
            "- Returns True if the node is a leaf.\n     *\n     * @return {Boolean}",
            "Returns the number of Syllables in a given number of words.\n\n    Parameters\n    ----------\n    number : int\n        Number of words in a sentence.\n\n    Returns\n    -------\n    int\n        Number of Syllables in a given number of words.",
            "_generate_context(self, message: str) -> str:",
            "",
            "run the test",
            "Parse the arguments.\n\n  :param ctx: The current context.\n  :param args: The arguments to parse.",
            "(torch.FloatTensor) -> (torch.FloatTensor | (torch.FloatTensor, torch.FloatTensor))",
            "",
            "Runs the shell_plus in the output directory.",
            "_clients = {}\n\n_clients_lock = threading.Lock()",
            "_run(self, trial_parameters: dict, workspace: str, callback=None, **kwargs):",
            "_goes_first(self.is_main_process):",
            "",
            ":return: The environment to use for this request.",
            "",
            "",
            "",
            "_close(self):",
            "_get_competent_detectors(self, scores):",
            "_create_waiter(factory_self, waiter_model)",
            "",
            "",
            "Add loss summaries to the train_op.\n\n  Args:\n    total_loss: loss for all of the model's train_ops"
        ],
        [
            "_iter_raw_references() -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(elem) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(elem, include_self=True) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(elem, include_self=False) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(elem, include_self=False, include_self_type=False) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(elem, include_self=False, include_self_type=True) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(elem, include_self=False, include_self_type=True, include_self_type_id=False) -> Generator[ObjectReferencePart, None, None]:\n    _iter_reference_parts(elem, include_self=False, include_self_type=True, include_self_type_id=True) -> Generator[ObjectReferencePart,",
            ".combine(x) -> self.data = x.data + self.data",
            "",
            "_sin_gen(self, x):\n\n    l_tanh(l_linear(l_sin_gen(x)))",
            "Stop the server.\n\n  :return: None.\n  :rtype: None.\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException`\n  :raises: :class:`~scalene.server.ServerException",
            ":param img:\n      :param width:\n      :param height:\n      :param model_height:\n      :return:",
            "",
            "",
            "Registers a directory of static files with the given URI.\n\n    :param uri: The URI to which the static files are registered.\n    :param file_or_directory: The directory of static files to register.\n    :param pattern: The pattern to match the static files.\n    :param use_modified_since: Whether to use the modified-since header.\n    :param use_content_range: Whether to use the content-range header.\n    :param stream_large_files: Whether to stream large files.\n    :param name: The name of the static files.",
            "",
            "",
            "",
            "_init_ -",
            "Convert `s` to a string of the specified encoding.\n\n    If `s` is already a string of the specified encoding, it is returned\n    unchanged. Otherwise, `s` is encoded using `encoding` and returned as a\n    string.",
            "",
            "_make_save_file_name(store_type: str) -> str:\n\n    _make_save_file_name(store_type: str) -> str:\n\n    _make_save_file_name(store_type: str, crawler_type_var: str) -> str:",
            "",
            ".  :param xs: [paddle.Tensor]\n:param masks: [paddle.Tensor]",
            ":return: (pt1, pt2, pt3, pt4) \n    :rtype: tuple",
            "",
            "Padded data to make it 64-byte aligned.",
            ".is_fully_within_image(self, image):",
            "",
            "",
            "Start a new process and return its process id.\n\n    :param executable: the path to the executable to run\n    :param args: the arguments to pass to the executable\n    :return: the process id of the new process\n    :raises: :class:`multiprocessing.AuthenticationError` if the process is not running",
            "",
            "_forward",
            "(",
            "(output_file=None, resume=False, progress_file=sys.stderr)",
            "_log()",
            "_to_json",
            "(str)",
            "",
            "Generates a policy from the app.py file in the project directory.\n\n  :param config: The configuration object.\n  :return: The policy object.",
            "",
            "",
            "",
            "",
            "_networkaccessmanager() -> Optional[QNetworkAccessManager]:",
            "Test that command execution works.",
            "Get the prompt embedding to save.\n\n    Args:\n        adapter_name (str): The name of the adapter.\n\n    Returns:\n        torch.Tensor: The prompt embedding.",
            "",
            "`ssl_resnext101_32x8d` is a PyTorch implementation of the\n  ResNeXt-101-32x8d-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl-ssl",
            "",
            "_init_",
            "",
            "",
            ":param target: \n    :param use_cache: \n    :return:",
            "(cls, name: str, agent_cls: Type['Agent']) -> None:\n\n    Register an agent class for use in the environment.",
            ":type self: MainScene\n  :rtype: None\n  :return: None\n  :raises: None\n  :no",
            "",
            "",
            "Parse a set expression.\n\n  :returns: :class:`~django.template.base.Node`\n  :parametrized-by: assign_target, filter_node, body\n\n  :parametrized-by: assign_target, filter_node, body\n  :parametrized-by: assign_target, filter_node, body, drop_needle\n  :parametrized-by: assign_target, filter_node, body, drop_needle\n  :parametrized-by: assign_target, filter_node, body, drop_needle, with_namespace",
            "(str, Optional[Dict[str, List[str]]]) = None) -> str:\n    code = \"\n        code += ImportDefinition.build(path=path)\n        code += ClassDefinition.build(path, ext_map)\n\n        return code\n    \n    def build(path: str, ext_map: Optional[Dict[str, List[str]]] = None) -> str:",
            "",
            "(self, *args, **kwargs)",
            "_regularizers: List[Tuple[str, Regularizer]] = None",
            "",
            ":param obj:  str or bytes\n  :param encoding:  str\n  :param errors:  str\n  :return:  str or bytes",
            "(self):\n\n    def __enter__(self):\n\n    def __exit__(self, *args, **kwargs):\n\n    def __call__(self, *args, **kwargs):\n\n    def __repr__(self):\n\n    def __str__(self):\n\n    def __getattr__(self, attr):\n\n    def __setattr__(self, attr, value):\n\n    def __delattr__(self, attr):\n\n    def __getattribute__(self, attr):\n\n    def __setattribute__(self, attr, value):\n\n    def __delattribute__(self, attr):\n\n    def __getitem__(self, key):\n\n    def __setitem__(self, key, value):\n\n    def __delitem__(self, key):",
            "",
            "Show the status table in a message.\n\n  :param bot: the bot to send the message to\n  :param update: the update to send the message to\n  :return: None\n  :raises: RPCException if the RPC server is not available",
            "_get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr_scale()\n    _get_lr",
            "(str|int, str|int) ->",
            "",
            "(self) -> str:",
            "",
            "Generate mel filters.\n\n  Args:\n      device (torch.device): Device to load the filters on.\n      n_mels (int): Number of filters to generate.\n\n  Returns:\n      torch.Tensor: Mel filters.\n\n  Note:\n      This function generates the mel filters from a pre-trained model.",
            ":param itag:",
            ":param word_set: set of words\n  :param url: url to get words from\n  :param line_function: function to process each line of the response",
            "_summary_or_description_of_method_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or_class_or_module_or_package_or_function_or",
            "",
            ":param jshost:\n  :param echarts_template_dir:\n  :param force_js_embed:\n  :return:\n  :rtype: object\n  :raises:",
            ":param cls: The class to create the saved search doc from.\n  :param search_doc: The search doc to create the saved search doc from.\n  :param db_doc_id: The database document id to use for the saved search doc.\n  :return: The saved search doc.\n  :rtype: :class:`SavedSearchDoc`\n  :raises: :class:`ValueError` if the search doc is not a :class:`SearchDoc`.\n  :raises: :class:`ValueError` if the search doc is not a :class:`SearchDoc`.\n  :raises: :class:`ValueError` if the search doc is not a :class:`SearchDoc`.\n  :raises: :class:`ValueError` if the search doc is not a :class:`SearchDoc`.\n  :raises: :class:`ValueError` if the search doc is not a :class:`SearchDoc`.\n  :raises: :class:`ValueError` if the search doc is not a :class:`SearchDoc`.\n  :raises: :class:`ValueError` if the search doc is not a :class:`SearchDoc`.\n  :raises: :class:`ValueError` if the search doc is not a",
            "",
            "_forward(self, inputs):",
            "",
            "",
            "",
            "",
            ":param cls:\n  :param v:\n  :return:",
            "This function is used to convert a group to a single token.\n    :param expr: the expression to be converted\n    :return: the converted expression",
            "_dispatchers:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:\n    _dp:\n    _ep:",
            "Build a backbone from a config.\n\n    Args:\n        cfg (ConfigDict): Config to build from.\n        default_args (dict, optional): Default args to pass to the backbone.\n\n    Returns:\n        str: The backbone name.",
            "(int) Randomize the number of elements in the list.\n    \n    :param number: (int) The maximum number of elements to generate.\n    :param le: (bool) Whether to generate a number less than the maximum.\n    :param ge: (bool) Whether to generate a number greater than the maximum.\n    :return: (int) The number of elements to generate.",
            "\u5c06xml\u8f6c\u6362\u6210dict\n    :param xml: xml\n    :return: dict",
            "",
            "(This method is called by the main loop of the experiment.)",
            "",
            "Trains an autoencoder on the given data set.\n     Args:\n       problem_name: The name of the problem to train the autoencoder on.\n       data_dir: The directory where the data is stored.\n       output_dir: The directory where the model is stored.\n       hparams: The hyperparameters to use for training.\n       epoch: The current epoch number.\n     Returns:\n       The number of steps completed during training.",
            "",
            "_config_changed = False\n  def save(self, *args, **kwargs):",
            "(cls, color_hex: str) -> Color:",
            "",
            "_get_cache_logic(self, cached_response: Any):",
            "_",
            "",
            "Delete a model.\n\n  :param ModelName: The name of the model to delete.\n  :type ModelName: str",
            "() -> bool:",
            "",
            "Test a regular put.\n\n    :param partial: Whether to send a partial put.\n    :type partial: bool\n    :return: Nothing.\n    :rtype: None\n    :raises: :class:`~httpx.ConnectError` if the connection fails.\n    :raises: :class:`~httpx.RequestError` if the request fails.\n    :raises: :class:`~httpx.ResponseError` if the response fails.\n    :raises: :class:`~httpx.ConnectError` if the connection fails.\n    :raises: :class:`~httpx.RequestError` if the request fails.\n    :raises: :class:`~httpx.ResponseError` if the response fails.\n    :raises: :class:`~httpx.ConnectError` if the connection fails.\n    :raises: :class:`~httpx.RequestError` if the request fails.\n    :raises: :class:`~httpx.ResponseError` if the response fails.\n    :raises: :class:`~httpx.ConnectError` if the connection fails.\n    :raises: :class:`~httpx.RequestError` if the",
            "",
            "",
            "Scrape all the plain-text files from the dai-docs site and convert them to the\n    train_cleaned.json file format.",
            "_run_hook(self, hook, file_args):\n    Run a hook.",
            ".compute(bottomUpInput, enableLearn, computeInfOutput=None)",
            ":param regex:\n    :param columns:\n    :param unselect:\n    :return:",
            "",
            ":return:",
            "yields the source code of the given paths",
            "_init_",
            "",
            "(self, games_store_dir: Path, trainer: Trainer):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def load_games(self, games_store_dir: Path):\n    def",
            ":param string: string to search\n    :param start: start of the substring\n    :param end: end of the substring\n    :return: the substring between start and end\n    :rtype: str\n    :Example:\n    >>> str_between(\"abc1234567890\", \"1234567890\", \"1234567890\")\n    '1234567890'\n    :",
            "",
            "",
            "",
            "_call__",
            "_call:\n    :param input_sequence:\n    :param training:\n    :param mask:\n    :return:\n    :rtype: object",
            "",
            "",
            "",
            ":return:",
            "Save the document to the database.",
            "Check if the given data is not empty and not only whitespaces.\n\n  :param data: The data to check.\n  :return: True if the data is not empty and not only whitespaces, False otherwise.\n  :rtype: bool",
            "_load_prompt_cache(self, path):",
            "",
            "Test seeking from current position.",
            "",
            "",
            "_safe_report_exception(self):",
            "(name, session, options, documentation=\"\", usage=\"",
            "_get_data_format_members:",
            "",
            "Test that the url_req function correctly handles case mismatch",
            "(function)",
            "",
            ":param model: yolov8n.pt or yolov8n.pt.yaml or yolov8n.pt.yaml.torchscript\n  :param task: detect, segment, classify, or (optional) a custom",
            "Creates a method not allowed handler.\n\n    :param allowed_methods: a list of allowed methods.\n\n    :return: a function.",
            "Validates the exchange.\n\n  :param value: The exchange to be validated.\n\n  :return: The error message if the exchange is invalid, otherwise None.",
            ":param enckey:",
            "",
            "Return message by status",
            "_get_heap_boundaries()",
            "",
            "(start, end) is inclusive.",
            "",
            "",
            "",
            "_wrap_forward_with_set_fields",
            "(element, tag, results) -> [results]",
            "",
            ":param df_lists: list of (data_frame, probability)\n    :type df_lists: list of (pd.DataFrame, float)\n    :return:",
            "",
            "",
            "Register a new resource type.\n\n  Args:\n    cls (class): The class to be registered.\n\n  Returns:\n    class: The registered class.\n\n  Raises:\n    AssertionError: If the resource type is already registered.",
            "(str) Write the indexable document to the store.\n\n    :returns: the store path.",
            "Check if a string is a valid transaction hash.\n\n  :param value: The string to check.\n  :raises: RPCError if the string is not a valid transaction hash.",
            "_get_api_url()",
            "_get_sine_merge(self, x):",
            "(optional)",
            "",
            "",
            "_from_keypair(cls, keypair):\n\n    :param cls: The class to create.\n    :param keypair: The keypair to use to create the new instance.\n    :return: The new instance.\n    :rtype: :class:`cls`\n    :raises: :class:`ValueError` if the keypair is invalid.\n    :raises: :class:`TypeError` if the keypair is not a tuple.\n    :raises: :class:`TypeError` if the keypair is not a tuple of two\n        strings.\n    :raises: :class:`TypeError` if the keypair is not a tuple of two\n        strings.",
            "_add_count_data\n    :param counts:\n    :return:",
            "_chunk_key_offset() - returns the offset of a given chunk key.\n\n    :param key: the chunk key to find the offset of.\n    :type key: str",
            "_insert(self, element):\n    Inserts an element into the database.\n\n    :param element: The element to insert.",
            "(PUT) /api/v1/spaces/:id/default-space",
            "Return True if the request was successful.  This is defined as a\n  successful request in the following sense:\n  - The request was successful.  This is defined as a successful\n    request in the following sense:\n    - The request was successful.  This is defined as a successful\n      request in the following sense:\n      - The request was successful.  This is defined as a successful\n        request in the following sense:\n        - The request was successful.  This is defined as a successful\n          request in the following sense:\n          - The request was successful.  This is defined as a successful\n            request in the following sense:\n            - The request was successful.  This is defined as a successful\n              request in the following sense:\n              - The request was successful.  This is defined as a successful\n                request in the following sense:",
            "_init_",
            "",
            "Initialize a new `PyTorchGymWrapper` object.\n\n  Args:\n      env (gym.Env):\n      skip (int, optional): The number of timesteps to skip before taking a new action.\n          Defaults to 4.\n\n  Returns:\n      PyTorchGymWrapper: A new instance of `PyTorchGymWrapper`.\n\n  Example:\n      >>> import torch_geometric.gym\n      >>> import torch_geometric.gym.torch_geometric_gym\n      >>> import torch_geometric.datasets\n      >>> import torch_geometric.transforms\n      >>> import torch_geometric.data\n      >>> import torch_geometric.loader\n      >>> import torch_geometric.nn\n      >>> import torch_geometric.utils\n      >>> import torch_geometric.datasets\n      >>> import torch_geometric.transforms\n      >>> import torch_geometric.data\n      >>> import torch_geometric.loader\n      >>> import torch_geometric.nn\n      >>> import torch_geometric.utils\n      >>> import torch_geometric.datasets\n      >>> import torch_",
            "(float, float) -> (th.Tensor, th.Tensor)",
            ":param num_diffusion_timesteps: \n    :param alpha_bar: \n    :param max_beta: \n    :return:",
            "_get_config_ref: Returns the config reference for this class.\n    :rtype: str\n    :return: The config reference for this class.",
            "Initialize the class.\n\n    :param exclude: List of strings to exclude from the signature.\n    :param include: List of strings to include in the signature.\n    :param invalid: Whether or not to display invalid signatures.",
            "_fit_predict_model(self, X: np.ndarray, Y: np.ndarray) -> None:",
            "",
            "",
            "Return the item at the given entry.\n\n:param entry: _ENTRY_HEADER\n:return: _OBJECT_HEADER\n:rtype: _OBJECT_HEADER\n:raises: _ERROR_CODE_INVALID_ENTRY_POINTER, _ERROR_CODE_INVALID_HANDLE_VALUE, _ERROR_CODE_INVALID_OBJECT_POINTER, _ERROR_CODE_INVALID_OBJECT_TYPE, _ERROR_CODE_INVALID_OBJECT_HANDLE_TYPE, _ERROR_CODE_INVALID_OBJECT_HANDLE_",
            "",
            "",
            "(Optional)  A web browser driver to use for the tests.\n        This is used to control the browser and to capture the\n        browser's logs.\n        Default: None.\n        Type: :class:`~selenium.webdriver.WebDriver` or `None`",
            "",
            "(source, results, device=\"cuda\") -> None:",
            "-",
            ".matches(regex):\n\n    Returns a QueryRegex object that matches the given regex.\n\n    :param regex: a string or a compiled regex object.\n    :return: a QueryRegex object that matches the given regex.\n    :rtype: QueryRegex\n    :raises: ValueError if the regex is not a string or a compiled regex object.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :raises: ValueError if the regex is not a valid regex.\n    :",
            "",
            "_parse_result(self, d):\n    return d[\"std\"]",
            ":param text:\n      :param pattern:\n      :return:",
            "",
            "(checkpoint, directory, device, max_to_keep=10)",
            "",
            "Remove the launcher shortcut from the user's desktop.\n\n    :param self: The :class:`~xdg.Desktop` instance.\n    :param _args: The arguments passed to the shortcut.",
            "(dLdy, X) -> (dX, dW, dB)",
            ":param value:\n    :param newdim:\n    :return:",
            ":return: \n    :rtype: str\n    :param self: \n    :type self:",
            "",
            "Handle the mouse press event.\n\n  :param event: The mouse press event.\n\n  :return: None.\n\n  :rtype: None.\n\n  :see: :class:`QTabWidget`\n\n  :see: :class:`QTabWidget.mousePressEvent`\n\n  :see: :class:`QTabWidget.close_tab(int)`",
            "",
            "Parse a Microsoft Word file.\n\n  Parameters\n  ----------\n  file : Path\n    Path to the file to be parsed.\n  errors : str, optional\n    Error handling method. One of \"ignore\", \"raise\", \"log\".\n\n  Returns\n  -------\n  str\n    The text of the file.\n\n  Raises\n  ------\n  ValueError\n    If the file is not a Microsoft Word file.\n    If the error handling method is invalid.",
            "",
            "",
            "",
            "Patch environment variables.\n\n  :param kwargs:\n  :return:\n  :rtype: :class:`Generator`\n  :raises: :class:`ValueError`",
            "Save an event to the database.\n\n    :param cache_key: The cache key to use for the event.\n    :param data: The event data.\n    :param kwargs: Additional arguments.",
            "",
            ":param input_tensor:\n:param output_tensor:\n:param output_tensor_grad:\n:return:",
            ".scatter(self, ax, data, center)",
            "",
            "",
            "_logcdf:",
            "Return a list of documents from the specified file name and metadata.\n  :param file_name: The name of the file to search.\n  :param metadata: The metadata to search for.\n  :return: A list of documents.\n  :rtype: List[Document]\n  :raises: :class:`~kb_client.exceptions.NotFoundException` if the file name is not found.\n  :raises: :class:`~kb_client.exceptions.InvalidInputException` if the metadata is invalid.\n  :raises: :class:`~kb_client.exceptions.UnauthorizedException` if the user is not authorized to access the file.\n  :raises: :class:`~kb_client.exceptions.InternalException` if an error occurs while retrieving the documents from the database.\n  :raises: :class:`~kb_client.exceptions.InvalidInputException` if the metadata is invalid.\n  :raises: :class:`~kb_client.exceptions.InvalidInputException` if the file name is not found.\n  :raises: :class:`~kb_client.exceptions.UnauthorizedException` if the user is not authorized to access the file.\n  :raises",
            "_init_",
            "",
            "Delete a game from the database.",
            "Unzip a file from a zip file.\n\n  :param zip_ref: The zip file reference.\n  :param file_entry: The file entry from the zip file.\n  :param target_dir: The target directory to extract the file to.",
            "",
            "_get_code_package_and_return_code_object(self):\n    def get_code_object(self):\n    def get_code_object_from_code_package(self):\n    def get_code_object_from_code_package_and_return_code_object(self):\n    def get_code_object_from_code_package_and_return_code_object_from_code_package(self):\n    def get_code_object_from_code_package_and_return_code_object_from_code_package_and_return_code_object(self):\n    def get_code_object_from_code_package_and_return_code_object_from_code_package_and_return_code_object_from_code_package(self):\n    def get_code_object_from_code_package_and_return_code_object_from_code_package_and_return_code_object_from_code_package_and_return_code_object_from_code_package(self):\n    def get_code_object_from_code",
            "Convert a value to a string.",
            "(str, bool, bool) ->",
            "Returns the element that matches the given xpath and attribute key.\n\n  :param node: The DOM node to search.\n  :param xpath: The xpath to search.\n  :param key: The attribute key to search.\n  :param val: The attribute value to search.\n  :return: The element that matches the given xpath and attribute key.",
            "'CreateInheritableAnnotation' : :class:`qlast.CreateAnnotation`\n    :param qlast.CreateAnnotation qlast.CreateAnnotation r : :class:`qlast.CreateAnnotation`\n    :param qlast.CreateAnnotation qlast.CreateAnnotation qlast.CreateAnnotation qlast.CreateAnnotation qlast.CreateAnnotation",
            ":return: list of extensions to be watched.",
            "Show toolbar in debug mode.\n\n    :param request: request object.\n\n    :return: True if toolbar should be shown, False otherwise.",
            "Returns a function to sort the groups by their index.\n\n    Parameters\n    ----------\n    group_index : array_like\n        The index of each group.\n    ngroups : int\n        The number of groups.\n\n    Returns\n    -------\n    function : int -> int\n        The function to sort the groups by their index.",
            "",
            ".player_config_args[\"title\"]",
            "",
            "Sort the hits by score.\n  :param rank_results: Whether to rank the results.\n  :param hits: The list of hits.\n  :return: The list of hits.\n  :rtype: List[dict]\n  :raises: ValueError if the rank_results is not True.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of hits.\n  :raises: ValueError if the hits is not a list of",
            "Import a symbol from the app's module.\n\n  :param attr: The symbol to import.",
            "_predict(self, observation: th.Tensor, deterministic: bool = False) -> th.Tensor:",
            "",
            "",
            "Returns a dict of environment variables to use.\n\n    :param prefer_system_libs: If True, prefer to use the system's\n        libraries over the wine-specific ones.\n    :param wine_path: The path to the wine.exe binary.\n\n    :return: A dict of environment variables to use.",
            "",
            ":param img1_path:",
            "",
            "(int, int, int, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str",
            "",
            "1: \"windows/shell_reverse_tcp\"\n      2: \"windows/meterpreter/reverse_tcp\"\n      3: \"windows/vncinject/reverse_tcp\"\n      4: \"windows/x64/shell_reverse_tcp\"\n      5: \"windows/x64/meterpreter/reverse_tcp\"\n      6: \"windows/x64/shell_bind_tcp\"\n      7: \"windows/meterpreter/reverse_https\"\n      8: \"windows/x64/shell_reverse_tcp\"\n      9: \"windows/x64/meterpreter/reverse_tcp\"\n      10: \"windows/x64/shell_bind_tcp\"\n      11: \"windows/meterpreter/reverse_https\"\n      12: \"windows/x64/shell_reverse_tcp\"\n      13: \"windows/x64/meterpreter/reverse_tcp\"\n      14: \"windows/x64/shell_bind_tcp\"\n      15: \"windows/meterpreter/reverse_https\"\n      16: \"windows/x64",
            "_call__",
            "",
            "",
            "(logins, ins=sys.stdin, out=None) ->",
            ":param kernel_type: primal or polynomial\n    :param dim: dimension of the input space\n    :param lamb: regularization parameter\n    :param gamma: coefficient of the polynomial kernel",
            "Test that bad ratios raise an error.",
            "",
            "(str)",
            ":param query:\n      :param choices:\n      :param processor:\n      :param scorer:\n      :param score_cutoff:\n  :return:\n  :rtype:",
            "(dLdy, X) -> (dX, dW, dB)",
            "",
            "",
            "",
            "",
            "(self):\n    def __call__(self):\n        return self.go()",
            ".",
            "_make_save_file_name(self, store_type: str) -> str:\n\n    _make_save_file_name(self, store_type) -> str:\n\n    _make_save_file_name(self, store_type, crawler_type_var.get()) -> str:\n\n    _make_save_file_name(self, store_type, crawler_type_var.get(), language_var.get()) -> str:\n\n    _make_save_file_name(self, store_type, crawler_type_var.get(), language_var.get(),\n                         crawler_lang_var.get()) -> str:\n\n    _make_save_file_name(self, store_type, crawler_type_var.get(), language_var.get(),\n                         crawler_lang_var.get(), country_var.get()) -> str:\n\n    _make_save_file_name(self, store_type, crawler_type_var.get(), language_var.get(),\n                         crawler_lang_var.get(), country_var.get(),\n                         crawler_country_var.get()) -> str:",
            "",
            "(router: Optional[\"APIRouter\"] = None, router_prefix: str = \"/api/v1/awel/trigger\") -> None:",
            "",
            ":param s: string to be encrypted\n    :param k: key to be used for encryption\n    :return: string after encryption",
            "_get(self):",
            "_init_",
            "",
            "",
            ":param question: A string that is the question to be asked.\n  :returns: True if the user answers 'yes' or 'y' otherwise False.",
            "(parent_state: BaseState | None = None, init_substates: bool = True, **kwargs):",
            "_mul__",
            "\u83b7\u53d6\u5fae\u535a\u5185\u5bb9\n\n  :param info: \u5fae\u535a\u4fe1\u606f\n  :param is_original: \u662f\u5426\u662f\u539f\u521b\n  :return: \u5fae\u535a\u5185\u5bb9",
            "",
            "",
            "",
            "Initialize the model with random points.\n\n    :param init_points: number of random points to initialize the model with.\n    :type init_points: int\n    :return: None\n    :rtype: None\n    :raises: None\n    :",
            "Check if the events are no longer supported by dash.",
            "_with_additional_config",
            "_extract_code(self, response: str, separator: str = \"```\") -> str:",
            "_units: dict[int, str]\n_abilities: dict[int, Ability]\n_general_abilities: set[int]\n\n    :param data: Data from the database.",
            "",
            "_get_job_batch_list_from_arguments(self):",
            "",
            "_load_model",
            "",
            ":param str var_name: Name of the variable to set.\n    :param str file_name: Name of the file containing the variable to set.\n    :return: None.",
            "Convert a string to a continuation align style.\n\n  :param s: the string to convert\n  :returns: the converted string\n  :raises ValueError: if the string is not a valid continuation align style\n  :returns: the converted string\n  :raises ValueError: if the string is not a valid continuation align style",
            ":param job: The job to cancel.\n    :return: None.",
            "(torch.FloatTensor, InferenceParams) -> None:",
            "(r):\n    :param Request r:\n    :rtype: Request",
            "Parameters\n    ----------\n    pred: paddle.Tensor\n        The prediction tensor.\n    gt: paddle.Tensor\n        The ground-truth tensor.\n    mask: paddle.Tensor\n        The mask tensor.\n    weights: paddle.Tensor, optional\n        The weights tensor.\n    \n    Returns\n    -------\n    loss: paddle.Tensor\n        The loss tensor.",
            "",
            "",
            "",
            "",
            "_add_column(self, name, data):\n\n    Add a column to the dataframe.\n\n    Parameters\n    ----------\n    name : str\n        Name of the new column.\n    data : numpy.ndarray\n        Data to be added to the column.\n\n    Returns\n    -------\n    None.",
            "",
            "Create a `vit_base_patch32_224_in21k` model.",
            "",
            "",
            "",
            "_processCmd(self, aAction, aInfo):",
            "_call__",
            "",
            "_from_node(index, data, modify_index=None)",
            ".is_partly_within_image(self, image):\n\n    ..",
            ".split(string: str) -> \"Device\":",
            ":return:",
            "_call__",
            "",
            ".predict_on_image(self, img):\n\n    :param img: np.ndarray or torch.Tensor\n    :return: np.ndarray or torch.Tensor\n    :rtype: np.ndarray or torch.Tensor\n    :raises: ValueError\n    :raises: TypeError\n    :raises: Exception\n    :raises: ImportError\n    :raises: ImportError: when `img` is not a np.ndarray or torch.Tensor\n    :raises: ValueError: when `img` is not a np.ndarray or torch.Tensor\n    :raises: TypeError: when `img` is not a np.ndarray or torch.Tensor\n    :raises: Exception: when `img` is not a np.ndarray or torch.Tensor\n    :raises: ImportError: when `img` is not a np.ndarray or torch.Tensor\n    :raises: ImportError: when `img` is not a np.ndarray or torch.Tensor\n    :raises: Exception: when `img` is not a np.ndarray or torch.Tensor\n    :raises: ImportError: when `img` is not a np.ndarray or torch.Tensor\n    :raises: ValueError: when `img` is not a np.",
            "_fit(self, X, y):\n    Return the fitted model.\n\n    Parameters\n    ----------\n    X : array_like, shape = [n_samples, n_features]\n        Training data.\n\n    y : array_like, shape = [n_samples]\n        Target values.\n\n    Returns\n    -------\n    self : object\n        Returns the instance of the fitted model.\n\n    See also\n    --------\n    sklearn.linear_model.LinearRegression : Linear model.",
            "Save the model checkpoint to the specified directory.\n\n    Args:\n        iteration (int): The current iteration number.\n        model (Model): The model to save.\n        args (ArgumentParser): The command line arguments.\n\n    Returns:\n        None: The model is saved to the specified directory.",
            "Removes the SQL from the question.\n\n  :param question: The question to remove the SQL from.\n  :type question: str",
            ":param int failure_threshold: The number of failures before the server is\n        considered failed.",
            "\u83b7\u53d6\u89c6\u9891\u7684id\n    :param url:\n    :return:\n    :rtype: str",
            "",
            "_call__",
            "_get_item(self, entry, handle_value = 0):\n    Return the object of the given entry.",
            ":param x: [Tensor] [batch_size, max_length, hidden_size]\n  :param x_mask: [Tensor] [batch_size, max_length]",
            ".",
            "",
            "",
            "_init_",
            "_store: dict[int, mitmproxy.flow.Flow]\n_base_add: mitmproxy.flow.add_flow_internal\n_focus: mitmproxy.",
            "",
            "_send_attachments(self, chat_id, notify_type, attach):\n\n    Send a list of attachments.\n\n    Parameters\n    ----------\n    chat_id : str\n        The ID of the chat to send the attachments to.\n    notify_type : str\n        The type of notification to send.\n    attach : list\n        The list of attachments to send.\n\n    Returns\n    -------\n    bool\n        True if any of the attachments could not be sent, False otherwise.",
            ":param path: \n:param commit: \n:return: \n:rtype:",
            ":return:\n        :rtype: :class:`dh.DHPublicNumbers`",
            "",
            "",
            ":param embed_size: \n    :type embed_size: int\n    :return: \n    :rtype:",
            "_cost(self, s_start, s_goal):\n\n    Return the euclidean distance between two states.\n\n    :param s_start: start state\n    :param s_goal: goal state\n    :return: cost",
            "Display a message in a rich text format.\n\n    :param message: The message to display.",
            "(Callable)\n    Returns the current state of the widget.\n    :return: A dictionary of the current state.\n    :rtype: dict",
            "Build a DataParallel or MLUDataParallel.\n\n    Args:\n        model (nn.Module): The model to be built.\n        device (str): The device to be used.\n        dim (int): The dimension to be used.\n        *args: The arguments to be passed to the DataParallel or MLUDataParallel.\n        **kwargs: The keyword arguments to be passed to the DataParallel or MLUDataParallel.\n\n    Returns:\n        DataParallel or MLUDataParallel.\n\n    Example:\n        >>> from torch import nn\n        >>> model = nn.Sequential(...)\n        >>> model = build_dp(model, 'cuda', 0)\n        >>> model = build_dp(model, 'mlu', 0)",
            ":param addr: Address to check\n    :type addr: int\n    :param verbose: Print formatted bins\n    :type verbose: bool\n    :return: None\n    :rtype: None",
            ":param x: \n    :return:",
            "_get_study_direction_from_study_id_is_not_implemented_by_implementation_of_this_method_error_",
            "",
            "",
            "Returns the maximum sequence length in the model.",
            "",
            "\u83b7\u53d6\u589e\u957f\u6570\u636e\n    :param year: \u5e74\n    :param quarter: \u5b63\u5ea6\n    :return: \u589e\u957f\u6570\u636e\n    :rtype: pd.DataFrame",
            "",
            "Test static proxy request.\n\n  :return: None.",
            "Set the model to use in the environment.\n\n    :param model: The name of the model to use.",
            "_get_value_trackers()",
            ".",
            "_top(self, body_output, _):",
            ":param bboxes:\n      :param img_shape:\n      :param scale_factor:\n      :param flip:\n      :return:",
            "",
            "_cell_to_text:\n    :return: str",
            "(output_sequence: torch.Tensor, output_sequence_mask: torch.Tensor) -> torch.Tensor:",
            "",
            "Ask a question.\n\n  Parameters\n  ----------\n  prompt_type : type[str] | type[int] | None\n    The type of prompt to use. If None, then the type of prompt is\n    determined by the type of the first argument. If the first\n    argument is a string, then the type of prompt is string. If\n    the first argument is an integer, then the type of prompt is\n    int. If the first argument is not a string or integer, then\n    an error is raised.",
            "_init_",
            "",
            "",
            ":return: a dictionary of hyperparameters for this layer.\n  :rtype: dict\n  :Example:\n    >>> class Embedding(Layer):\n    ...     def hyperparameters(self):\n    ...         return {\n    ...             \"layer\": \"Embedding\",\n    ...             \"init\": self.init,\n    ...             \"pool\": self.pool,\n    ...             \"n_out\": self.n_out,\n    ...             \"vocab_size\": self.vocab_size,\n    ...             \"optimizer\": {\n    ...                 \"cache\": self.optimizer.cache,\n    ...                 \"hyperparameters\": self.optimizer.hyperparameters,\n    ...             }\n    ...         }\n    ...     return self.hyperparameters()\n    ...\n    {'layer': 'Embedding', 'init': 'random', 'pool': 'mean', 'n_out': 100, 'vocab_size': 1000, 'optimizer': {'cache': 'sgd', 'hyperparameters': {'lr': 0.001, 'momentum': 0.9}}}",
            "_init_\n    :param label: label for the progress bar\n    :param interval: interval for the progress bar\n    :param max_step: max step for the progress bar\n    :return:",
            "Update latest price in all Boms.",
            "",
            "",
            "Update forward references in the class definition.",
            "",
            "",
            ":param value:\n    :return:",
            "_stop(self, now=False):",
            "",
            "_handle_starttag:",
            "_find_spec(fullname, path=None, target=None) -> ModuleSpec or None.",
            "\u722c\u697c\u68af\uff0c\u8fd4\u56den\u9636\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd",
            ":type self: object\n    :rtype: int",
            "",
            "_summary_text\n\n    :param param: description",
            ":param args:\n    :param kwargs:\n  :return: :class:`~numpy.ndarray`",
            ":param ciphertext_blob: \n    :return: \n    :rtype:",
            "_call_endpoint(self, method, req_body):\n    :param experiment_id: str",
            ":return:",
            "\\brief Extract markdown sections from a markdown string\n\n:param markdown: String with markdown sections\n:return: List of dictionaries with name and value of the markdown section\n:rtype: List[Dict[str, str]]\n:raises:",
            "_set(self, logicalId, resource):\n\n    :param str logicalId:\n    :param resource:\n    :return:\n    :rtype:",
            "",
            "Get a list of models.\n\n    :param extra_headers: Extra headers to include in the request.\n    :param extra_query: Extra query parameters to include in the request.\n    :param extra_body: Extra body to include in the request.\n    :param timeout: The timeout to use for the request.\n    :return: The list of models.",
            "",
            ":param configs:\n  :param label_map_path:\n  :return:",
            "Saves the query to the database.",
            "Initialize the model.\n\n  Parameters\n  ----------\n  encoder_path : str, optional\n    Path to the encoder model weights.\n  decoder_path : str, optional\n    Path to the decoder model weights.\n\n  Returns\n  -------\n  model : torch.nn.Module\n    The model instance.",
            "",
            "Disable the adapter and all its layers.\n\n    :return: None.",
            "Convert a .wav file to a .silk file.\n\n    Parameters\n    ----------\n    pcm_path : str\n        Path to a .wav file.\n    silk_path : str\n        Path to a .silk file.\n\n    Returns\n    -------\n    float\n        The duration of the .silk file in milliseconds.",
            "",
            "",
            "Return the request if it is a SAML request, otherwise raise an error.",
            "",
            "Save model checkpoint to the directory\n    \n    Args:\n        ckpt_name (str): model name\n    \n    Returns:\n        str: model save path",
            "_get_attribute(self, attribute):\n\n    Returns the attribute of the resource.\n\n    :param attribute: The name of the attribute to get.\n    :return: The attribute value.\n    :rtype: str or unicode or int or float or bool or None.\n    :raises: :class:`~botocore.exceptions.ClientError` if the attribute does not exist.",
            "Delete a conversation.\n\n  Args:\n      convo_id: The id of the conversation to delete.\n\n  Returns:\n      None.",
            "",
            ":param path: path to the model",
            "_init__",
            "",
            "",
            "(xs) -> float",
            "Saves a plot of generated images.",
            "_ParseAndUnwrap:",
            ":param endianness: 'b' or 'B' or 'h' or 'H' or 'i' or 'I' or 'l' or 'L' or 'q' or 'Q' or 'd' or 'D' or 'f' or 'F' or 'e' or 'E' or 'g' or 'G' or 'a' or 'A' or 's' or 'S' or 'p' or 'P' or 'c' or 'C' or 'n' or 'N' or 'x' or 'X' or 'u' or 'U' or 'y' or 'Y' or 'z' or 'Z' or 'f' or 'F' or 'e' or 'E' or 'g' or 'G' or 'a' or 'A' or 's' or 'S' or 'p' or 'P' or 'c' or 'C' or 'n' or 'N' or 'x' or 'X' or 'b' or 'B' or 'h' or 'H' or 'i' or 'I' or 'l' or 'L' or 'q",
            "_test_optimizations_vm",
            "_can_add(self, data)",
            "",
            "_wrapped_embeddings_run(self, prompt: str | list[str]) -> LLMEmbeddings:\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    return self.embeddings.run(prompt)",
            "_init_\n    :param K:\n    :param device:",
            "",
            "",
            "Calculates the KL-divergence between two normal distributions.\n    \n    Parameters\n    ----------\n    mean1 : float or th.Tensor\n        Mean of the first normal distribution.\n    logvar1 : float or th.Tensor\n        Log-variance of the first normal distribution.\n    mean2 : float or th.Tensor\n        Mean of the second normal distribution.\n    logvar2 : float or th.Tensor\n        Log-variance of the second normal distribution.\n    \n    Returns\n    -------\n    kl : th.Tensor\n        The KL-divergence between the two normal distributions.",
            "_call(self, tensor_input):\n    return self.basic_module(tensor_input)",
            ":param cls:\n  :param mapping:\n  :return:",
            "_wait_for_other_player()\n\n_timestep(player: int)\n\n_player_timestep(player: int)\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions[player] = action\n\n_actions",
            ":param weights:\n    :param name:\n    :return:\n    :",
            "Check if the exploit is working properly.\n\n  :param generic_target: The target to execute the exploit on.\n\n  :return: None.",
            "",
            "",
            "",
            "",
            "_getheaderAnim : :param im: :return:",
            "\"small-fake-a==0.2\" and \"small-fake-b==0.3\" should be added to the\n    requirements.txt file",
            "",
            "(self):",
            "_init_ -",
            "Sets the output keys for the given datasets.\n\n    :param datasets: list of datasets to set the output keys for\n    :param output_keys: list of output keys to set for the given datasets\n    :return:",
            "",
            "",
            "",
            "'Enhance' the connection to the remote server.",
            "",
            "_init_function_ = lambda self, cfg: self.init_function(cfg)\n\n        return self.init_function_",
            "_get_loaded_models_info_result_type_dict_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict_str_dict",
            ".",
            "(str|None) -> None",
            "_process_all_forms",
            "_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):",
            "Load the current song into the current song object.\n  :return: None",
            "",
            "Test that a file created with defaults is created with the correct\n    mode.\n\n    :param home:\n    :param dotfiles:\n    :param run_dotbot:\n    :return:\n    :rtype: None\n    :raises: :class:`~dotbot.DotbotError`",
            "",
            "",
            "",
            "",
            ":return:",
            "_extract(self, file_path):",
            "(str shareName, str pathName) -> (str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str",
            "Clear the jobs.",
            "(x, y) in (0, 1)",
            "",
            "",
            "",
            "",
            "",
            "(blocks_args, global_params) -> Model:\n\n    :param blocks_args: list of dictionaries, one dictionary per block\n    :param global_params: global parameters for all blocks, e.g. number of\n        layers in the entire model.",
            "",
            "_set_validation",
            "_to_json_string()",
            ":param item_type: The type of the elements in the iterable.\n  :param iterable: The iterable to be converted to a typed tuple.\n  :param _tuple_cache: The cache of compiled typed tuples.\n  :return: A typed tuple.\n  :raises TypeError: If the item_type is not a type.",
            ":param str hosts:",
            "",
            "_post_release",
            ":return: list of all fields that are defined in the class.",
            "",
            "Returns a list of documents and their scores for a given term.\n\n    :param cls: The class to use for the search.\n    :param term: The term to search for.\n    :param weights: A list of weights to use for each document.\n    :param with_score: Whether to include the score in the result.\n    :param score_alias: The alias to use for the score.\n    :param explicit_ordering: Whether to use the explicit ordering.\n\n    :return: A list of documents and their scores.\n    :rtype: list of (int, float)",
            "Convert a Counter to a dictionary.\n\n  :param get_value: a function that returns a value from a counter.\n  :type get_value: function\n  :return: a dictionary of the counter.\n  :rtype: dict\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators.counter.CounterError`\n  :raises: :class:`~pylons.decorators.decorators",
            "(cls, id_, name, sizes, default_size, default_value, default_value_type)",
            "",
            "(nodes, thunks, pre_call_clear)\n    :param nodes: list of nodes\n    :param thunks: list of thunks\n    :param pre_call_clear: list of clear functions to call before calling the thunk",
            "",
            "21ff0b  Netscape2.0  loops=2^16-1",
            "(",
            "_summary_",
            "Choose an item from the list of items.\n    :param session: The session that the item is being chosen for.\n    :return: The item that was chosen.",
            ":param loader:\n    :param model:\n    :return:",
            "Returns a dict with the answer and format for the given page.\n\n  :param topic: The page to get the answer for.\n  :param request_options: A dictionary of options to pass to the adapter.\n\n  :return: A dict with the answer and format for the given page.",
            "(dataloader, current_iter, tb_logger, save_img) -> None:\n\n    :param dataloader:\n    :param current_iter:\n    :param tb_logger:\n    :param save_img:\n    :return: None:",
            "- Parameters:\n      - `raw_features`: The raw features to be converted to features.\n        - `random_seed`: The random seed used to generate the features.\n\n- Returns:\n  - `features`: The features corresponding to the raw features.",
            ":param name:",
            "Test that same padding without output padding is the same as the same padding with output padding.",
            ".encode(x, n_q=None, st=None) -> torch.Tensor:",
            "Return all children of the element.\n  :param tag: The tag name of the element to filter.\n  :param recursive: Whether to include all children of children.\n  :return: A list of selenium.webdriver.remote.webelement.WebElement.\n  :rtype: list[selenium.webdriver.remote.webelement.WebElement]\n  :raises: selenium.common.exceptions.StaleElementReferenceException if the element is no longer present in the DOM.\n  :raises: selenium.common.exceptions.NoSuchElementException if the element is not found in the DOM.",
            "(param_dict, **cfg) -> (self, param_dict, **cfg)",
            ".",
            "Close the writer.\n\n    Args:\n        None\n\n    Returns:\n        None.",
            ":param model:\n    :return:\n    :",
            "(str, List[Parameter]) -> Dict[str, List[Parameter]",
            "(bool)\n    Return True if the node has no children, False otherwise.\n\n    Returns:\n        bool: True if the node has no children, False otherwise.",
            "Parameters\n    ----------\n    number : int\n        The number of terms in the sequence.\n\n    Returns\n    -------\n    int\n        The number of terms in the sequence.",
            "_generate_context(self, message: str) -> str:\n\n    Generate a context for a message.\n\n    Args:\n        message (str): The message to generate a context for.\n\n    Returns:\n        str: The context for the message.",
            "_expert_devices: list of devices to use for expert",
            "run the test",
            "",
            "(sample: torch.FloatTensor, return_dict: bool = True) -> Union[DecoderOutput, torch.FloatTensor]:",
            "",
            "Call django shell_plus.",
            "_clients = {}\n\n_clients = {}",
            "_run(self, trial_parameters, workspace, callback, **kwargs)\n    _run_flow(self, trial_parameters, workspace, callback, **kwargs)\n    _run_flow_with_custom_logger(self, trial_parameters, workspace, callback, **kwargs)\n    _run_flow_with_custom_logger_and_callback(self, trial_parameters, workspace, callback, **kwargs)\n    _run_flow_with_custom_logger_and_callback_and_callback(self, trial_parameters, workspace, callback, **kwargs)\n    _run_flow_with_custom_logger_and_callback_and_callback_and_callback(self, trial_parameters, workspace, callback, **kwargs)\n    _run_flow_with_custom_logger_and_callback_and_callback_and_callback_and_callback(self, trial_parameters, workspace, callback, **kwargs)\n    _run_flow_with_custom_logger_and_callback_and_callback_and_callback_and_callback_and_callback(self, trial_parameters, workspace, callback, **kwargs)\n    _run",
            "_goes_first(self, func):",
            "",
            "",
            "() -> None",
            ":param deployment:",
            "",
            "(self):",
            "_get_competent_detectors(self, scores):",
            "_create_waiter(factory_self, waiter_model)\n\n    Create a new waiter action for the given waiter model.\n\n    :param factory_self: The factory object.\n    :param waiter_model: The waiter model.\n    :return: A function that can be used to invoke the waiter action.",
            "'",
            "(override)",
            "Args:\n        total_loss: \n    Returns:"
        ]
    ],
    "google/codegemma-2b": [
        [
            ".",
            "(self, x)\n\n    Combine two lists",
            "",
            "_forward",
            "Stops the Scalene application.",
            "Function to compute the ratio and resize the image\n    \n    Args:\n        img (numpy.ndarray): Input image\n        width (int): Width of the image\n        height (int): Height of the image\n        model_height (int): Height of the model\n        \n    Returns:\n        img (numpy.ndarray): Resized image\n        ratio (float): Ratio of the image",
            "to predict the target value of the input X. \n    \n    Args:\n        X (ndarray): input data.\n        \n    Returns:\n        ndarray: predicted target values.\n        \n    Raises:\n        NotImplementedError: if the method is not implemented.",
            "Returns:\n        dict: dictionary of scores for each algorithm\n        np.ndarray: number of steps for each algorithm\n        np.ndarray: score thresholds",
            "",
            "to enable iteration over the buffers",
            "",
            "Returns the coordinates of the point at the given direction.\n    \n    Args:\n        dim: The dimension of the point to return.\n        direction: The direction of the point to return.\n    \n    Returns:\n        The coordinates of the point at the given direction.",
            "(str) -> None",
            "Convert a string to a native Python type.",
            "Initialize a `DataFrame` object.\n\n    Parameters\n    ----------\n    args : sequence of arrays or 2D `DataFrame` objects\n        The data to be stored in the `DataFrame`.\n    concat_rows : bool, optional\n        If `True`, then the rows of the `DataFrame` will be concatenated\n        into a single row.\n    **kwargs :\n        Additional keyword arguments.",
            "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "TODO: refactor this function to return the path to the log file.",
            ".\n    Args:\n        xs: [batch_size, seq_len, dim]\n        masks: [batch_size, seq_len]\n    Returns:\n        [batch_size, seq_len, dim]",
            "Returns a list of corners and center of the region",
            "",
            "Pad the data to be a multiple of 64 bytes.",
            ", checks if the image is fully within the image.\n\n    Args:\n        image (Image): the image to check.\n\n    Returns:\n        bool: True if the image is fully within the image, False otherwise.",
            "",
            "Get the parameters of the model.\n    \n    Returns\n    -------\n    list\n        List of parameters.",
            "Start a process that will be detached from the parent process.",
            "Destroy the object",
            "(x, style, skip) -> out",
            "(Constructor)",
            "(self, output_file=None,\n                 resume=False, progress_file=sys.stderr)\n\n    Create a new progress reporter.\n\n    :param output_file: If given, the progress will be written to this file.\n    :param resume: If True, the progress will be resumed from the last\n        recorded status.\n    :param progress_file: If given, the progress will be printed to this\n        file.",
            ".log() is a decorator that logs values to WandB.\n\n    Args:\n        values (dict): The values to log.\n        step (Optional[int]): The step to log the values to.\n        **kwargs: Additional keyword arguments to pass to the run.log() method.\n\n    Example:\n        >>> @wandb.log\n        ... def log(values: dict, step: Optional[int] = None, **kwargs):\n        ...     logger.debug(\"Logging values: %s\", values)\n        ...     return wandb.log(values, step=step, **kwargs)\n        ...\n        >>> log({\"a\": 1, \"b\": 2})",
            "for testing",
            ".format_tb(exc_traceback, limit=None, frame=None, file=sys.stderr)",
            "",
            "Generates a policy that allows the app to write logs to CloudWatch and \n    attach itself to a VPC.\n    \n    Args:\n        config (object): Configuration object\n    \n    Returns:\n        policy (dict): Policy to be used by CloudFormation",
            "Sets the backend for all configuration files.\n    \n    :param backend: The backend to set.",
            "for unknown types, return application/octet-stream",
            "@param {Object} kwargs",
            "\u968f\u673a\u751f\u6210\u4e00\u4e2a 1-9 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u5e76\u6392\u9664 0",
            "to be implemented by subclasses",
            "Test that the command is executed on the local machine.",
            "This function returns the prompt embedding to be used in the model.\n    \n    Args:\n        adapter_name (str): The name of the adapter to use.\n    \n    Returns:\n        torch.Tensor: The prompt embedding.",
            ".clear()\n    \n    def _clear(self):",
            "",
            "Returns the center of the arc.",
            "(async)\n    Initialize the class with the given configuration and optional parameters.\n\n    Args:\n        config (dict): The configuration dictionary.\n        conversation_id (str, optional): The conversation ID. Defaults to None.\n        parent_id (str, optional): The parent ID. Defaults to \"\".\n        base_url (str, optional): The base URL. Defaults to \"\".\n\n    Returns:\n        None",
            "This function takes in a GemmaConfig and a GroupQuantize object, and returns a tuple of a\n    quantized model and a mapping from the original to quantized weights.",
            ".\n    Returns an iterable mapping each item to its normalized form.\n\n    .. versionadded:: 1.0",
            "Download a file from a remote GDB server\n    \n    Parameters\n    ----------\n    target : str\n        The remote file to download\n    use_cache : bool\n        Whether to use the local cache\n    \n    Returns\n    -------\n    local_name : str\n        The local path of the downloaded file",
            ".\n    Registers a new agent class for the given name.\n\n    Args:\n        name (str): The name under which the agent class will be registered.\n        agent_cls (Type['Agent']): The agent class to register.\n\n    Raises:\n        ValueError: If the agent class is already registered under the given name.",
            "This method is called when the widget is mounted.",
            "",
            "(self, buffers)\n\n    Initialize the buffers.",
            "Parse a set statement.",
            ".",
            "",
            "(self, *args, **kwargs):",
            ".\n\n    Args:\n        regexes (List[Tuple[str, Regularizer]], optional): Defaults to None.",
            "Sign the given payload with the testing key.\n    \n    :param payload: The payload to sign.\n    :return: The signed JWT.",
            "",
            ".\n    Closes the connection to the database.",
            "Returns the name of the type of the object.",
            "",
            "(self, opt):",
            "This method allows to set the scope of the bot command to a specific chat.\n    \n    Args:\n        chat_id (str): Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n        user_id (int): User identifier of the target user\n\n    Returns:\n        BotCommandScopeChatMember: The BotCommandScopeChatMember object",
            ".",
            ".\n    Run the model and return the answer.",
            "Forward pass of the network.\n    \n    Args:\n        x: Input tensor.\n    \n    Returns:\n        Output tensor.",
            "Return the Mel filters.\n    \n    Args:\n        device: torch.device\n        n_mels: int\n    \n    Returns:\n        torch.Tensor",
            "Returns the format profile for the given itag.",
            "Adds words from a given URL to a given set of words.\n    \n    Args:\n        word_set (set): The set of words to add to.\n        url (str): The URL to read words from.\n        line_function (callable): A function that takes a line of text and returns a word.",
            "This method is used to run the code.",
            "",
            "x\n    :param jshost:\n    :param echarts_template_dir:\n    :param force_js_embed:\n    :return:",
            "Convert a SearchDoc into a SavedSearchDoc.\n    \n    Args:\n        cls (SavedSearchDoc): The type of the SavedSearchDoc to return.\n        search_doc (SearchDoc): The SearchDoc to convert.\n        db_doc_id (int, optional): The id of the document in the database. Defaults to 0.\n    \n    Returns:\n        SavedSearchDoc: The SavedSearchDoc.",
            "Returns the interval label for a given frequency.\n    \n    Parameters\n    ----------\n    x : float\n        Frequency of the interval.\n    pos : Optional[int], optional\n        Position of the interval in the octave, by default None.\n\n    Returns\n    -------\n    str\n        Interval label.",
            "forward function",
            "Get all songs",
            "This function encrypts or decrypts a given text using a given cipher.\n    \n    Args:\n        greppable (bool): Whether the text should be greppable.\n        Cipher (str): The name of the cipher to use.\n        text (str): The text to encrypt or decrypt.\n        debug (bool): Whether to print debug messages.\n    \n    Returns:\n        str: The decrypted or encrypted text.",
            "\u51fd\u6570\u8bf4\u660e:\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5206\u7c7b,\u8fd4\u56de\u5206\u7c7b\u7ed3\u679c\n    Parameters:\n        datToClass - \u8f93\u5165\u6570\u636e\n        classifierArr - \u8bad\u7ec3\u597d\u7684\u5206\u7c7b\u5668\n    Returns:\n        classEst - \u5206\u7c7b\u7ed3\u679c",
            "",
            "Uppercase the string or list of strings. \n    \n    Parameters\n    ----------\n    v : str or list of str or set of str\n    \n    Returns\n    -------\n    str or list of str or set of str",
            "Ungroup the expression.",
            ".\n    Dispatches the input to the dispatcher.\n    Args:\n      inp: the input to dispatch.\n    Returns:\n      the output of the dispatcher.",
            "_summary_\n    Build backbone from config.\n    Args:\n        cfg (ConfigDict): Config object.\n        default_args (dict, optional): Default arguments to be used for building the backbone. Defaults to None.\n    Returns:\n        nn.Module: The backbone.",
            "(self, number=10, le=False, ge=False) -> int:\n\n    Return a random number between 10 and 100, if le and ge are False,\n    else between 100 and 140.\n\n    Parameters\n    ----------\n    number : int, optional\n        Number of elements in the list. The default is 10.\n    le : bool, optional\n        If True, the random number will be between 100 and 140. The default is False.\n    ge : bool, optional\n        If True, the random number will be between 10 and 100. The default is False.\n\n    Returns\n    -------\n    int\n        A random number between 10 and 100, if le and ge are False,\n        else between 100 and 140.",
            "Converts an XML node to a dictionary.\n    \n    :param xml: XML node to convert\n    :return: dictionary",
            "This function prepares the sample text for the model.",
            "for all agents in the agents list.",
            "",
            "Trains an autoencoder for the given problem and returns the model.",
            "_forward",
            ".",
            ">>> Color.from_hex(\"#000000\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#000\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#0000\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#00\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#0\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#00000\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#0000000\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#00000000\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#000000000\")\n    Color(0, 0, 0)\n    >>> Color.from_hex(\"#0000",
            "Returns the number of items in the cart.",
            ".\n    Gets the cached logic.",
            ".",
            "",
            "Deletes a SageMaker model.",
            "Start the thread and wait for it to be stopped.",
            ".\n    Returns:\n        SparseArrayType: The embedding of the model.",
            "_test_put()",
            "_acquire_token_func_\n\n    Args:\n        sp_directory_id (str): The directory ID of the service principal.\n        sp_client_id (str): The client ID of the service principal.\n        sp_client_secret (str): The client secret of the service principal.\n\n    Returns:\n        dict[str, Any]: A dictionary containing the access token and the expiration time.",
            "Add a new document to Milvus. \n    \n    Args:\n        kb_file (KnowledgeFile): The KnowledgeFile object to add.\n        \n    Returns:\n        bool: True if the document is added successfully, False otherwise.",
            "Test the scrape_dai_docs function",
            ".",
            ".",
            "Selects rows that match the given regex.\n\n    Args:\n        regex (str): The regex to match.\n        columns (list of pandas.Series): The columns to select.\n        unselect (bool, optional): If True, unselects the rows that match the regex. Defaults to False.\n\n    Returns:\n        pandas.DataFrame: The selected DataFrame.",
            "Forward pass of the model.\n    \n    Args:\n        x (torch.Tensor): Input tensor of shape (batch_size, sequence_length).\n        emb (torch.Tensor): Embedding tensor of shape (vocab_size, embedding_size).\n\n    Returns:\n        torch.Tensor: Output tensor of shape (batch_size, sequence_length, embedding_size).",
            "Get the background configuration.",
            ":param paths: \n    :return:",
            "(self, init_data_by_df, dtype='stock_day', if_fq='bfq')\n    \n    Args:\n        init_data_by_df (pd.DataFrame):\n        dtype (str, optional): Defaults to 'stock_day'.\n        if_fq (str, optional): Defaults to 'bfq'.\n    \n    Raises:\n        TypeError: if init_data_by_df is not kind of DataFrame type !\n    \n    Returns:\n        None:",
            "Update the data in the database",
            ".",
            "Returns the content between start and end in a string.",
            "for now we don't use axolotl\n    if axolotl:\n        return YowStackBuilder.getDefaultLayers(axolotl = True, groups = groups, media=media,privacy=privacy, profiles=profiles)\n    else:",
            "versioning",
            "_adb_command\n\n    :param command:\n    :return:",
            ".",
            ".\n    Args:\n        input_sequence (tf.Tensor): Input sequence to be encoded.\n        training (bool): Whether to use the training or inference mode.\n        mask (tf.Tensor, optional): Mask to apply to the input sequence. Defaults to None.\n    Returns:\n        dict: Dictionary containing the output of the encoder.",
            "",
            ".",
            "Returns today's date.",
            "_input_example_",
            "Save the document",
            "Check if data is not empty and not only whitespaces",
            ".\n    Loads the prompt cache from the given path.",
            "Get the cached response from the cache\n    \n    Args:\n        cached_response (Any): The cached response from the cache\n    \n    Returns:\n        Any: The cached response from the cache",
            "",
            "_summary_\n\n    Args:\n        name (_type_): _description_\n\n    Returns:\n        _type_: _description_",
            "(str) -> str\n    Returns the simulator name.",
            ".\n    .. versionadded:: 1.11.0",
            ".",
            ".",
            "Returns the range of the range.",
            "Test that the upper-package is installed with a case mismatch",
            ".",
            "2022-04-14\n    @author: Administrator\n    @return:",
            "Initialize the YOLOv8 model.\n    \n    Parameters:\n    - model (str or Path): Path to the YOLOv8 model file or URL.\n    - task (str): Task to perform.\n    - verbose (bool): Whether to print verbose output.\n    \n    Returns:\n    - YOLOWorld: Instance of the YOLOWorld class.",
            "405 Method Not Allowed",
            "Validates the exchange value.\n    \n    Args:\n        value (str): The exchange value.\n    \n    Returns:\n        Optional[str]: A string indicating the error if the value is invalid, otherwise None.",
            "Decrypt the encrypted credhist with the given key.",
            "def _repr_html_(self):",
            "v2.0",
            ".",
            "Parameters\n    ----------\n    default : float, optional\n        The default value. The default is 1.0.\n    label : str, optional\n        The label. The default is None.",
            "_read_addr_range\n    \n    Read a range of memory from the given address space.\n    \n    Args:\n        start (int): The start address.\n        end (int): The end address.\n        addr_space (int): The address space to read from.\n    \n    Returns:\n        bytes: The read data.",
            "search the corresponding LM ID",
            "Randomly initializes k centroids from X\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Training data, shape (n_samples, n_features)\n        \n    Returns\n    -------\n    centroids : np.ndarray\n        Centroids, shape (k, n_features)",
            "Set the feeds to be used for scraping",
            ".",
            "Recursively get all children of an element.\n    \n    :param element: Element to get children of.\n    :param tag: Tag name to filter children by.\n    :return: Set of elements.",
            "{\n        \"type\": \"input\",\n        \"label\": \"Input Widget\",\n        \"placeholder\": \"Enter your name\",\n        \"required\": True,\n        \"value\": \"William\"\n    }",
            ":param df_lists:",
            "This method is used to get the page layout of the page.",
            "",
            "Decorator for registering a resource body class.",
            "for each raw data file, create an indexable document\n    and store it in the store",
            "Checks that the given string is a valid transaction hash.",
            "for the given stage name, get the api url",
            "(self, x):",
            ".\n    Sets the ignore users.\n\n    :param users: list of users to ignore\n    :return: self",
            "Extract features from the given arguments and kwargs.",
            "Record the result of a query.",
            "_from_keypair\n    \n    Args:\n        cls (_type_): _description_\n        keypair (_type_): _description_\n    \n    Returns:\n        _type_: _description_",
            "for each count, add the count to the data structure.",
            ".\n    Returns the offset of the key in the chunk.",
            "(self, element):\n        Inserts a new element into the list.\n        \n        The element is added to the end of the list.",
            ".\n    Test default space.",
            "v\n    Returns:\n        bool: True if the operation was successful, False otherwise.",
            ".",
            "Decorator for making a poutine queue.\n    \n    :param fn: function to decorate\n    :param queue: queue to use for the poutine\n    :param max_tries: maximum number of times to retry the poutine\n    :return: decorated function",
            "",
            "for log probability of a given parameters",
            "Compute the beta values for a linear schedule\n    \n    Parameters\n    ----------\n    num_diffusion_timesteps: int\n        number of betas to compute\n    alpha_bar: function\n        schedule parameter controls the sharpness of the schedule\n    max_beta: float\n        the maximum beta to use; use values lower than 1 to\n        prevent singularities.\n        \n    Returns\n    -------\n    betas: np.ndarray\n        the beta values for each timestep",
            ".\n    Gets the configuration reference for the class.\n\n    Returns:\n        str: The configuration reference for the class.",
            "",
            ".\n    Fits the model to the data.\n    :param X: The data.\n    :param Y: The labels.\n    :return: None.",
            "Sets the model type to \"yolov3\"",
            "-*- coding: utf-8 -*-",
            "_get_item\n\n    Get the object at the given entry.\n\n    @param entry: The entry to get the object from.\n    @param handle_value: If True, return the handle value.\n    @return: The object at the given entry.",
            "to iterate over the buffers",
            "",
            "for the driver to be set to the current instance.",
            "Randomly flip the image horizontally or vertically.\n    \n    Parameters\n    ----------\n    \n    img : torch.Tensor\n        The image tensor to be flipped.\n    \n    d : int\n        The dimension to be flipped.\n    \n    Returns\n    -------\n    \n    torch.Tensor\n        The flipped image tensor.",
            "(init)",
            "This is the handler for the F10 key.",
            "(self, regex):\n\n    Returns a query that matches the given regular expression.",
            "Delete a tensor by name",
            "(float)",
            "",
            "Clear the queue.",
            "(Optional) Initialize the checkpoint manager.\n\n    Args:\n        checkpoint (str): Path to the checkpoint.\n        directory (str): Directory to store the checkpoints.\n        device (str): Device to use for training.\n        max_to_keep (int): Maximum number of checkpoints to keep.",
            "",
            "_summary_\n    Remove the desktop shortcut for the current game.",
            "(dLdy, X) -> (dX, dW, dB)\n\n    dLdy is the derivative of the loss with respect to the output of the\n    network.\n    X is the input to the network.",
            "_expand_tile__\n\n    Args:\n        value (_type_): _description_\n        newdim (_type_): _description_\n\n    Returns:\n        _type_: _description_",
            "Returns a string representation of the object.",
            "timeout decorator",
            "This function is called when the user clicks the middle button on the mouse.\n    It checks if the tab at the clicked position is the active tab, and if so,\n    it closes the tab.",
            "Returns:\n        Dict[str, Any]:",
            ".\n    Parse a file and return its contents as a string.\n\n    Args:\n        file: The file to parse.\n        errors: The errors to ignore.\n\n    Returns:\n        The contents of the file as a string.\n\n    Raises:\n        ValueError: If docx2txt is not installed.",
            ".\n    Args:\n      random: An instance of the Random class.\n      cells: A list of cells.\n      connections: An instance of the Connections class.\n    Returns:\n      A cell from the list of cells.",
            "start_project(self, idea, role=\"BOSS\", cause_by=BossRequirement)",
            "Test that the get_crypto_info_csv_path function returns a pathlib.Path object.",
            "Patch the environment with the values passed in the kwargs.\n    \n    Parameters\n    ----------\n    kwargs : dict\n        A dictionary of key-value pairs to be added to the environment.\n    \n    Yields\n    ------\n    None\n        Yields None.\n    \n    Example\n    -------\n    >>> patch_environment(\n    ...     PYTHONPATH=\"/path/to/python\",\n    ...     PATH=\"/path/to/bin:/path/to/other/bin\"\n    ... )",
            "Save an event to Sentry.\n\n    :param cache_key: Optional cache key.\n    :param data: Event data.\n    :param kwargs: Additional kwargs.",
            "Calculates the factorial of a number.\n    \n    Parameters:\n    num (int): The number for which to calculate the factorial.\n    \n    Returns:\n    int: The factorial of the given number.",
            "Backward step of a single layer\n    :param input_tensor: Input tensor\n    :param output_tensor: Output tensor\n    :param output_tensor_grad: Output tensor gradient\n    :return: Input tensor gradient",
            "Parameters\n    ----------\n    ax : matplotlib.axes.Axes\n    data : array_like\n    center : float",
            "",
            ".",
            "for value < 0, return -inf",
            "Get a list of documents from the KB.\n\n    Args:\n        file_name (str, optional): The file name to search for. Defaults to None.\n        metadata (Dict, optional): The metadata to search for. Defaults to {}.\n\n    Returns:\n        List[Document]: A list of documents.",
            "(w0)",
            "Return string representation of PdfInfo.",
            "Deletes a game from the database.",
            "Unzip a file entry into the target directory.",
            "Apply rotation to image\n    \n    Parameters\n    ----------\n    img : numpy.ndarray\n        Image to rotate.\n    factor : int, optional\n        Number of times to rotate the image. The default is 0.\n    \n    Returns\n    -------\n    numpy.ndarray\n        Rotated image.",
            ".",
            "Safely convert v to a string.",
            ".",
            "find xpath attribute",
            "",
            "Returns a list of watched extensions.",
            "Check if toolbar should be displayed.",
            "",
            "",
            ".",
            "Return the first match of the given regex in the given string.",
            "Sorts the results based on the score of the query.\n\n    Args:\n        rank_results (bool): Whether to rank the results based on the score of the query.\n        hits (List[dict]): The list of hits.\n\n    Returns:\n        List[dict]: The sorted list of hits.",
            "Import a symbol from the current module.\n\n    :param attr: The symbol to import.\n    :return: The imported symbol.",
            "for deterministic = False\n        \n        Returns:\n            th.Tensor: action distribution.",
            "",
            ".",
            "",
            "Test clone method",
            "Initializes input for the process.\n\n    Parameters\n    ----------\n    img1_path : str\n        Path to the first image.\n    img2_path : str, optional\n        Path to the second image. The default is None.\n\n    Returns\n    -------\n    img_list : list\n        List of images.\n    bulkProcess : bool\n        True if the input is a list of images, False otherwise.",
            "",
            ",\n    Args:\n        kernel_size (int or tuple): The size of the convolving kernel.\n        stride (int or tuple): The stride of the convolution.\n        padding (int or tuple): The amount of padding added to the input.\n        data_format (str): The data format of the input.\n        device (str, optional): The device to allocate the module's resources on.\n        v (None or Tensor, optional): The input tensor.\n        dtype (None or Tensor, optional): The data type of the input tensor.",
            "Return a list of tokens, the number of tokens, and a list of tuples\n    (start_idx, end_idx) where the tokens appear in the row.",
            "Returns a string that can be used as the ms_payload parameter in the msfvenom command.\n\n    Args:\n        payload (str): The payload to use.\n\n    Returns:\n        str: The ms_payload parameter.",
            ".\n    :param parent:\n    :param params:\n    :param response:\n    :return:",
            "Align a mobj on a border of a bounding box.\n\n    Parameters\n    ----------\n    direction : np.array\n        Direction to align the mobj on the border.\n    buff : int\n        Buffer to add to the direction.\n\n    Returns\n    -------\n    mobj : mobj\n        The mobj that was aligned.",
            "Returns the names of the slots used by the optimizer.",
            "",
            "Parameters\n    ----------\n    kernel_type : str, optional\n        The type of kernel to use. Defaults to 'primal'.\n    dim : int, optional\n        The dimension of the input data. Defaults to 30.\n    lamb : float, optional\n        The regularization parameter. Defaults to 1.\n    gamma : float, optional\n        The parameter for the gamma kernel. Defaults to 1.",
            "Test for the bad ratio input",
            "Depth First Search",
            ".\n    Handle an event.\n\n    :param event: The event to handle.\n    :param params: Optional parameters to pass to the event handler.\n    :param kwparams: Optional keyword parameters to pass to the event handler.\n    :return: The return value of the event handler.",
            "Given a query, a list of choices, and an optional processor and scorer,\n    return the most likely choice.",
            ".\n    Backward pass.",
            "Prune heads of the model.",
            "",
            "for a function object",
            "",
            "* @return {boolean}",
            ".\n    Raise an exception if the given exception type is not supported.",
            "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "Return an iterator for the list.",
            ".",
            "Get proof of address.\n    \n    Args:\n        address (str): Address.\n        \n    Returns:\n        list: List of transactions.",
            "XOR the string s with the key k",
            "@return: Fleet number",
            "(str, Path, bool) -> None:",
            "Writes data to the buffer.",
            "Returns the url for the emoji.",
            "",
            ".",
            "Multiplication of two rigid transformations.\n\n    Args:\n        right (torch.Tensor): The right multiplicand.\n\n    Returns:\n        Rigid: The product of the two rigid transformations.",
            "\u83b7\u53d6\u5fae\u535a\u5185\u5bb9 \n    :param info: \n    :param is_original: \n    :return:",
            "Safely saves the model for HF Trainer.\n    \n    Args:\n        trainer: The trainer object.\n        output_dir: The output directory to save the model.",
            "Return the next item.",
            "Test that the list_courses() method returns the expected output",
            "Initialize the space with random points.\n\n    Parameters\n    ----------\n    init_points : int\n        The number of points to initialize the space with.\n\n    Returns\n    -------\n    None",
            "Prevent the use of dash events",
            ".\n    :param environment_dict:\n    :return:",
            ".\n    Extract code from the response.\n\n    Args:\n        response (str): The response to extract the code from.\n        separator (str, optional): The separator to use for splitting the code. Defaults to \"```\".\n\n    Raises:\n        NoCodeFoundError: If no code is found in the response.\n\n    Returns:\n        str: The extracted code.",
            "Initializes a new instance of the Ability class.\n\n    Args:\n      data: A dict containing the data for the ability.",
            "Returns the path to the output directory.",
            ".",
            "Sends a payload to the device.\n    \n    Args:\n        payload (dict): The payload to send to the device.\n    \n    Returns:\n        dict: The response from the device.",
            "(object):",
            "_Print a message to stdout and stderr.\n    \n    :param message: The message to print.\n    :param ostream: The stream to print to.\n    :type message: str\n    :type ostream: IO\n    :return: None",
            "",
            "Convert a string representation of a continuation align style to the\n    appropriate constant.",
            "Cancel a job.\n    \n    :param job: Job to cancel.\n    :type job: :class:`~celery.worker.control.AsyncResult`",
            "for a given layer, update the key-value cache for that layer.\n\n    Args:\n        kv (torch.FloatTensor): The key-value cache for the layer.\n        inference_params (InferenceParams): The inference parameters.",
            "(self, r)",
            ".",
            "",
            "Tab key handler.",
            "",
            "Returns the number of pages of the document.",
            ".\n    Add a new column to the dataframe.\n    :param name: name of the new column\n    :param data: data to fill the new column with\n    :return:",
            "Calculate the F1 score for the predictions and gold labels.\n    \n    Args:\n        predictions (torch.Tensor): Predictions for the data.\n        gold_labels (torch.Tensor): Gold labels for the data.\n        mask (Optional[torch.Tensor]): Mask for the data.\n    \n    Returns:\n        torch.Tensor: F1 score for the predictions and gold labels.",
            "_create_vision_transformer",
            "True loss function",
            "Return the number of units in the network.",
            "Return all child prefixes of this prefix.",
            ".",
            "Args:\n        im (np.ndarray): Input image.\n        im_info (dict): Image info dict.\n\n    Returns:\n        np.ndarray: Preprocessed image.",
            "",
            ".",
            ".\n    Checks if the image is partly within the self.image.\n\n    :param image: The image to check.\n    :return: True if the image is partly within the self.image, False otherwise.",
            ".\n    Parses a string in the format \"device_type:device_id\" and returns a Device object.",
            ".\n    Returns session info.",
            ".\n\n    :param dtype:\n    :param size:\n    :return:",
            "",
            ".predict_on_image(self, img)\n\n    Args:\n        img: Image to be predicted on.\n\n    Returns:\n        Prediction of the image.",
            "for each row in X, fit a linear model\n    to predict y.",
            "Save the model checkpoint.",
            "_summary_\n    Removes SQL from the question\n    \n    Args:\n        question (str): The question to remove SQL from\n    \n    Returns:\n        bool: True if the question was removed, False otherwise\n    \n    Raises:\n        SQLRemoveError: If the question could not be removed",
            "(int) -> None\n\n    Sets the failure threshold for the client.\n\n    Args:\n        failure_threshold (int): The new failure threshold for the client.\n\n    Returns:\n        None",
            "\u83b7\u53d6\u89c6\u9891id",
            "Calculate the distance between each item and the album info",
            "for multiclass classification",
            ".",
            ":param x: input tensor, shape [B, T, C]\n    :param x_mask: mask of input tensor, shape [B, T]\n    :param offset: offset of input tensor, int\n    :return: output tensor, shape [B, T, C]",
            ".\n    Check if the given URL is on the same host as this URL.",
            "_raw_to_proto",
            "Get the path for the given environment variable or default.\n    \n    Args:\n        key (str): The name of the environment variable.\n        default (Optional[Union[PathLike, str]]): The default path to use if the environment variable is not set.\n\n    Returns:\n        Optional[Path]: The path for the given environment variable or default.",
            "@param flatIdx: the index of the flat this neuron is in",
            "Add a flow to the store.",
            "Train the model.\n\n    :param args:\n    :param kwargs:\n    :return:",
            ".\n    Send attachments to telegram.\n    :param chat_id: Chat ID.\n    :param notify_type: Notification type.\n    :param attach: Attachments.\n    :return: True if all attachments have been sent successfully.",
            "_summary_\n\n    Args:\n        path (str, optional): _description_. Defaults to '.'.\n        commit (bool, optional): _description_. Defaults to True.\n\n    Yields:\n        _type_: _description_",
            "",
            "A function that modifies the output of the state machine.",
            "\u5224\u65ad\u9879\u76ee\u662f\u5426\u9700\u8981\u66f4\u65b0\n    :param project_name: \u9879\u76ee\u540d\u79f0\n    :param updatetime: \u66f4\u65b0\u65f6\u95f4\n    :return: True \u9700\u8981\u66f4\u65b0 False \u4e0d\u9700\u8981\u66f4\u65b0",
            "Initialize the encoder",
            ".\n    Returns cost of a given state",
            "_summary_\n\n    Args:\n        message (str): _description_",
            "for each piece on the board,",
            "Build DataParallel or DistributedDataParallel.\n\n    Args:\n        model (nn.Module): The model to be built.\n        device (str): The device to be used.\n        dim (int): The dimension of the data.\n        *args: Additional arguments for DataParallel.\n        **kwargs: Additional keyword arguments for DataParallel.\n\n    Returns:\n        nn.DataParallel or DistributedDataParallel.",
            "_unsortedbin_\n\n    Returns:\n        _type_: _description_",
            "Forward function.",
            ".",
            "Delete item from the dictionary. \n    \n    Args:\n        key (str): The key to delete.",
            "Returns the value at the given offset, in the given format.",
            "Returns:\n        int: The maximum length of a sequence.",
            "(self, buffers)\n\n    Initializes the buffers for the class.\n\n    :param buffers: A list of buffers.",
            ":param year:\n    :param quarter:\n    :return:",
            "this function is used to check if a number is even or odd\n    \n    Args:\n        number (int): number to check\n    \n    Returns:\n        bool: True if number is even, False if number is odd",
            "Test that static proxy is working",
            "Set the model name to use in the environment variables",
            "Returns a list of all the trackers for the current frame.",
            ".\n    Test that cleanup removes expired jobs.",
            "(tf.Tensor) -> tf.Tensor\n      Returns the logits for each token in the body.",
            "Args:\n        bboxes: tensor, shape = (num_bboxes, 4)\n        img_shape: tuple, (height, width)\n        scale_factor: tuple, (scale_x, scale_y)\n        flip: bool, whether to flip the image",
            ".\n    Called when the app goes to the background.",
            ".\n    Convert the cell to text.",
            "(float)\n    Computes the reward for the given output sequence.",
            "(str) -> str\n\n    Generates a new text based on the text provided.\n\n    Parameters\n    ----------\n    text : str\n        The text to generate from.\n\n    Returns\n    -------\n    str\n        The generated text.",
            "Ask a question.\n\n    :param args:\n        Arguments to pass to Prompt.ask.\n    :param prompt_type:\n        Type of prompt to use.\n    :param kwargs:\n        Keyword arguments to pass to Prompt.ask.\n    :return:\n        The user's response.",
            ".",
            "Match the given record against the component matchers.\n    \n    @param rec: The record to match against.\n    @type rec: Record\n    \n    @return: True if the record matches the component matchers, False otherwise.\n    @rtype: bool",
            ".\n    \n    This function will use the OpenAI API to generate a review draft based on the draft text.\n    \n    Args:\n        draft (str): The draft text to generate a review draft from.\n    \n    Returns:\n        str: The generated review draft.\n    \n    Example:\n        >>> draft = \"This is a sample draft text.\"\n        >>> review = review_draft(draft)\n        >>> print(review)\n        \"This is a sample draft text.\"",
            "Return a dictionary with the hyperparameters of the model.",
            "",
            "Update the latest price for all Boms in the database.\n        \n        This function updates the latest price for all Boms in the database.\n        \n        It checks if the \"update_bom_costs_automatically\" setting is enabled in the \"Manufacturing Settings\"\n        module. If the setting is enabled, the function will update the latest price for all Boms in the\n        database.",
            "Set all gradients to zero.",
            "_uname_info function",
            "Update the forward references of a class.",
            "Train the neural network using the given data.",
            "Return the URL for this resource.",
            "Convert the given value to a Python object.\n    \n    :param value: The value to convert.\n    :return: The converted Python object.",
            ".\n    Stop the scheduler.",
            "Update budget",
            "This method is called when the parser encounters a tag.",
            "(str, str, str) -> Optional[ModuleSpec]",
            ":type n: int\n    :rtype: int",
            "Returns the maximum number of processes that can be run simultaneously.",
            "Updates the status of the future object.\n    \n    Parameters:\n    ft (Future): The future object to update the status of.\n    \n    Returns:\n    None",
            "_test_cache_categories",
            "fromfile(*args, **kwargs)\n\n    Read data from a file.\n\n    Parameters\n    ----------\n    *args\n        The arguments to `numpy.fromfile`.\n    **kwargs\n        The keyword arguments to `numpy.fromfile`.\n\n    Returns\n    -------\n    array\n        The array read from the file.",
            "Deserialize a ciphertext blob into a Ciphertext object.\n    \n    Args:\n        ciphertext_blob (bytes): The ciphertext blob to deserialize.\n    \n    Returns:\n        Ciphertext: The deserialized Ciphertext object.",
            ".\n    Args:\n      experiment_id: An integer.\n\n    Returns:\n      An Experiment.",
            "Return a string representation of this object.",
            "sections",
            ".set()\n    Sets the resource for a logicalId.",
            "Creates embedding matrix and initializes it with pretrained word2vec vectors.",
            "List all models.",
            "",
            "Updates the label map path in the given configs.\n    \n    Args:\n        configs (dict): The dictionary containing the configs.\n        label_map_path (str): The path to the label map file.",
            "Save query in redis",
            "_init_\n\n    Args:\n        encoder_path (str, optional): Path to the encoder weights. Defaults to \"taesd_encoder.pth\".\n        decoder_path (str, optional): Path to the decoder weights. Defaults to \"taesd_decoder.pth\".",
            "Sends data to the control server.\n    \n    Args:\n        log_data (bool, optional): Whether to log the data. Defaults to True.",
            "Disable the adapter layers of the base model. \n    \n    Args:\n        self (PromptLearningModel): The instance of the PromptLearningModel class.\n    \n    Yields:\n        None\n    \n    Returns:\n        None",
            "Convert pcm to silk\n    :param pcm_path: pcm file path\n    :param silk_path: silk file path\n    :return: silk file duration",
            "Add a callback to be called when a frame is detached.\n    \n    Parameters\n    ----------\n    event: Literal[\"framedetached\"]\n        The event to listen for.\n    f: typing.Callable[[\"Frame\"], \"typing.Union[typing.Awaitable[None], None]\"]\n        The callback to call when the frame is detached.\n    \n    Returns\n    -------\n    None",
            "Returns the number of threads to use for the given parameters.",
            "",
            "Check that the target is reachable.",
            "Save model checkpoint.\n    \n    Args:\n        program (fluid.core.Program): Program.\n        ckpt_name (str): Checkpoint name.\n    \n    Returns:\n        str: Checkpoint dir.",
            ".",
            "Deletes a conversation from the database. \n    \n    Args:\n        convo_id (str): The ID of the conversation to delete.",
            "Return a queryset of objects that can be accessed by the current user.",
            "",
            "def __init__(self, features):",
            "Returns a course staff group name.",
            ".",
            "(float) -> float",
            "Save sample images",
            ".",
            "Returns a list of all the floating point data types. \n    def int_dtypes(endianness='?', sizes=(16, 32, 64)):",
            ".",
            "for the organization admin role, the user can add surveys",
            "Returns the maximum sequence length.",
            ".",
            ".\n\n    Args:\n        K (int): The number of metrics to average.\n        device (str): The device to use for the average.",
            "",
            "Get all unarchived folders",
            "KL divergence between two multivariate normal distributions. \n    \n    :param mean1: mean of the first distribution\n    :param logvar1: log variance of the first distribution\n    :param mean2: mean of the second distribution\n    :param logvar2: log variance of the second distribution\n    \n    :return: KL divergence between the two distributions",
            "(Tensor) -> Tensor",
            "Create a new instance of the class from a dictionary mapping.\n    \n    Parameters:\n    - cls (class): The class to create the instance from.\n    - mapping (dict): A dictionary mapping keys to values.\n    \n    Returns:\n    - Any: A new instance of the class.",
            ".",
            "Args:\n        weights: the weights to be regularized.\n        name: the name of the operation.\n    Returns:\n        the regularization term.",
            "Test for check_success",
            "_get__",
            "(self, number) -> Window\n\n    Returns the window with the given number.",
            "Returns a + b",
            "'Test post'",
            ".",
            "",
            "Stop all jobs in all sessions.",
            ".\n    Constructor for PatchMatch object.",
            "for result",
            "Set the output keys for all datasets.\n    \n    Parameters\n    ----------\n    datasets : list of :class:`~datasets.Dataset`\n        The datasets to set the output keys for.\n    output_keys : list of str\n        The output keys to set for the datasets.",
            ":param color: The color to use for the color palette.\n    :param opacity: The opacity to use for the color palette.\n    :param color_lookup: The color lookup to use for the color palette.",
            "@summary: get\n    @param fmt: \n    @param offset: \n    @return:",
            "Removes all tasks that have been completed and are older than the time interval",
            "Enhanced connection to the database\n    \n    Parameters\n    ----------\n    session : requests.Session\n        The requests session\n    pool_connections : int\n        The number of connections to the database\n    pool_maxsize : int\n        The maximum number of connections to the database\n    max_retries : int\n        The maximum number of retries to the database\n    \n    Returns\n    -------\n    requests.Session\n        The enhanced session",
            "'tag' is a function that takes a string and returns a list of\n    tuples, where each tuple is a tag and its associated text.\n\n    'tokenize' is a boolean that determines whether to tokenize the text\n    before tagging. If tokenize is True, the function will tokenize the text\n    and return a list of tokens. If tokenize is False, the function will return\n    a list of tuples where each tuple is a tag and its associated text.\n\n    The function returns a list of tuples where each tuple is a tag and its\n    associated text. The tags are defined in the 'tags' variable.\n\n    The function returns a list of tuples where each tuple is a tag and its\n    associated text. The tags are defined in the 'tags' variable.\n\n    The function returns a list of tuples where each tuple is a tag and its\n    associated text. The tags are defined in the 'tags' variable.\n\n    The function returns a list of tuples where each tuple is a tag and its\n    associated text. The tags are defined in the 'tags' variable.\n\n    The function returns a list of tuples where each tuple is a tag and its\n    associated text. The tags are defined in the",
            ".",
            "_summary_\n\n    Returns:\n        _type_: _description_",
            "_read_tsv\n\n    Args:\n        data_dir: The directory where the data files are stored.\n\n    Returns:\n        list[Dict[str, str]]: List of data records.",
            ".prepare(self, method=None, url=None, headers=None, files=None,\n        data=None, params=None, auth=None, cookies=None, hooks=None, json=None)",
            ".",
            "for time_func:\n    def fl_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False):",
            "Load the album data into the record.",
            "date_string should be in the format of \"%Y-%m-%d %H:%M+%Z\"",
            "Test the default mode.",
            "_summary_",
            "Create a multi-layer perceptron network.\n    \n    Parameters\n    ----------\n    num_layers : int, optional\n        Number of hidden layers.\n    num_hidden : int, optional\n        Number of hidden units per layer.\n    activation : function, optional\n        Activation function.\n    \n    Returns\n    -------\n    network_fn : function\n        A function that takes an input tensor and returns a tuple of\n        (output tensor, None).",
            "Set the display name of the player.\n    \n    Args:\n        display_name (str): The new display name of the player.\n    \n    Raises:\n        RuntimeError: If the player has already started.",
            "_test_individual_boss_on_unit_test_",
            "Returns a list of all the keys in the configuration file.",
            ", file_path):",
            ".\n    Deletes a file.\n\n    :param shareName: The name of the share.\n    :param pathName: The path of the file.\n    :return: The result of the operation.\n    :rtype: smb.Result\n    :raises SessionError: If the session is not connected.",
            "Clears the queue of jobs.",
            ".\n    Check if the interval contains the given interval.\n\n    :param other: Interval to check.\n    :return: True if the interval contains the given interval.\n    :rtype: bool",
            "close the tab when the middle mouse button is pressed",
            ".authenticate_user()",
            "",
            "Create a new game",
            "_pyro_param",
            ".\n    Args:\n      blocks_args: A list of block args.\n      global_params: A dict of global params.",
            "Find snippet files for a given file type. \n    \n    Arguments:\n    ft -- file type\n    directory -- directory to search in\n    \n    Returns:\n    set of snippet file paths",
            ", X_val, Y_val, trigger, val_method=None):",
            ".\n    \n    Returns:\n        str: JSON string representation of the configuration.",
            "Creates a new typed tuple with the given item type and iterable.\n    \n    :param item_type: The type of the items in the tuple.\n    :param iterable: An iterable of items to be added to the tuple.\n    :return: A new typed tuple with the given item type and iterable.",
            "'hosts' decorator overrides 'env hosts'",
            ".",
            "for post release",
            "Returns the fields of the model.",
            "Return the number of times that value appears in the list.",
            "_search()",
            "_to_dict__\n\n    Convert the Counter object to a dictionary.\n\n    :param get_value:\n        A function that returns the value of the counter.\n        Defaults to None.\n    :return:\n        A dictionary representation of the Counter.",
            ":param cls:\n    :param id_:\n    :param name:\n    :param sizes:\n    :return:",
            "Decode a base62 string to a string.\n    \n    Args:\n        ctext (T): The base62 string to decode.\n    \n    Returns:\n        Optional[U]: The decoded string, or None if the decoding fails.",
            "(self, nodes, thunks, pre_call_clear)\n\n    Args:\n        nodes (list): \n        thunks (list): \n        pre_call_clear (bool):",
            "Opens a file in ASCII mode.",
            "2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.",
            "loglikelihood of observations",
            "_test_count_connected_components_",
            "Choose a match from the available matches.\n    \n    :param session: The session object.\n    :return: The chosen match.",
            "This function checks the accuracy of the model.",
            "Returns a dictionary containing the topic, the topic type, the answer, and the format of the answer.",
            ".\n    Args:\n        dataloader:\n        current_iter:\n        tb_logger:\n        save_img:",
            "_Process features from tf.train.Example or features.FeatureDict.\n\n    Args:\n      raw_features: Union[tf.train.Example, features.FeatureDict].\n      random_seed: int.\n\n    Returns:\n      features.FeatureDict.",
            "Decorator for registering a model class.\n    \n    Args:\n        name (str): The name of the model class.\n    \n    Returns:\n        Type: The decorated model class.",
            "",
            ".encode(self, x: torch.Tensor, n_q: tp.Optional[int] = None, st: tp.Optional[int] = None) -> torch.Tensor\n    \n    Encodes the input tensor using the VQ-VAE.\n    \n    Args:\n        x: Input tensor.\n        n_q: Number of quantization levels.\n        st: Start index for quantization.\n    \n    Returns:\n        Encoded tensor.",
            "_children(self, tag=None, recursive=False)\n\n    Returns a list of child elements of the current element.\n\n    :param tag: The tag name of the child elements.\n    :param recursive: Whether to recursively search for child elements.\n    :return: A list of child elements.",
            ".",
            "(object)",
            "::summary::\n    Stops TensorBoard writer.",
            "This function calculates the token limit for a given model.\n    \n    Parameters:\n    model (str): The name of the model.\n    \n    Returns:\n    int: The token limit for the given model.",
            "_get_param_groups__\n    \n    :return:",
            "()\n\n    def __init__(self, leaf):\n        self[\"leaf\"] = leaf",
            "The function returns the number of possible combinations of a sylvester's triangle.\n    \n    Parameters:\n    - number: The number of rows in the sylvester's triangle.\n    \n    Returns:\n    - The number of possible combinations of a sylvester's triangle.\n    \n    Raises:\n    - ValueError: If the input value of [n] is not an integer or less than 1.\n    \n    Examples:\n    >>> sylvester(1)\n    2\n    >>> sylvester(2)\n    3\n    >>> sylvester(3)\n    6\n    >>> sylvester(4)\n    10\n    >>> sylvester(5)\n    15\n    >>> sylvester(6)\n    21\n    >>> sylvester(7)\n    28\n    >>> sylvester(8)\n    36\n    >>> sylvester(9)\n    45\n    >>> sylvester(10)\n    55\n    >>> sylvester(11)\n    66\n    >>> sylvester(12)\n    78\n    >>> sylvester(13)\n    91",
            ".\n    Generates the context for the LLM.\n\n    Args:\n        message (str): The message to generate the context for.\n\n    Returns:\n        str: The generated context.",
            "to be called by the expert devices",
            "",
            "",
            "(x)\n    \n    Args:\n        sample (torch.FloatTensor): [description]\n        return_dict (bool, optional): [description]. Defaults to True.\n\n    Returns:\n        Union[DecoderOutput, torch.FloatTensor]: [description]",
            "Set cached dataframe for pair and timeframe\n    \n    Args:\n        pair (str): pair\n        timeframe (str): timeframe\n        dataframe (DataFrame): dataframe\n    \n    Returns:\n        None",
            "",
            ".\n    :param service:\n    :param session:\n    :param region:\n    :return:",
            "(Override) Run all flows in the trial",
            ".\n    The first process in the process pool.",
            "Returns the sort key for the given key.",
            "Get environment variables for the application.",
            "\"\n    Prints a message to the console.\n    \n    :param message: The message to print.\n    :param exit_code: The exit code to return.\n    :return: None",
            "Prints a deployment.\n    \n    Args:\n        deployment (dict): The deployment to print.",
            "Converts a string to UTF-8.",
            ".close()",
            "",
            ".",
            "Returns a dict containing the results of the identification.\n    \n    :param text: The text to identify.\n    :param min_rarity: The minimum rarity of the result.\n    :param max_rarity: The maximum rarity of the result.\n    :param included_tags: The tags to include in the result.\n    :param excluded_tags: The tags to exclude from the result.\n    :return: A dict containing the results of the identification.",
            "(str) -> NoneType",
            "'\n    Adds summaries for losses\n    Args:\n        total_loss: Total loss from loss op\n    Returns:\n        loss_averages_op: op for updating moving averages of losses"
        ],
        [
            ".\n    Yields:\n        ObjectReferencePart.",
            "(self, x)",
            "",
            "Forward pass of the generator\n\n    :param x: input image\n    :return: sine_merge, noise, uv",
            "Stops the Scalene program.",
            "Compute the ratio of the image and resize it to fit the model\n    \n    Parameters\n    ----------\n    img : numpy array\n        The image to resize\n    width : int\n        The width of the image\n    height : int\n        The height of the image\n    model_height : int\n        The height of the model\n    \n    Returns\n    -------\n    img : numpy array\n        The resized image\n    ratio : float\n        The ratio of the image",
            "(X) -> (y)",
            "Returns a dict of the test scores and the number of steps taken in each episode.\n    \n    Parameters\n    ----------\n    algo_name : str, optional\n        The name of the algorithm. If None, the name of the experiment directory is used.\n    score_thresholds : np.ndarray, optional\n        The thresholds to use for the score. If None, the thresholds are determined by the score_thresholds parameter.\n\n    Returns\n    -------\n    dict\n        A dictionary containing the test scores and the number of steps taken in each episode.",
            "Static file serving.\n    \n    This is a very simple file serving middleware. It serves static files\n    from a directory or a file.\n    \n    The file serving is done by opening the file and reading it.\n    \n    The file is served with the Content-Type header set to the mimetype\n    of the file.\n    \n    If the file is a directory, it is served with a list of files in the\n    directory.\n    \n    If the file is a symlink, it is served by following the symlink.\n    \n    If the file is a directory and the directory is empty, an empty file\n    is served.\n    \n    If the file is a directory and the directory is not empty, an error is\n    raised.\n    \n    If the file is a directory and the directory is not empty and the\n    directory is not a symlink, a 404 error is raised.\n    \n    If the file is a directory and the directory is not empty and the\n    directory is a symlink, a 403 error is raised.\n    \n    If the file is a directory and the directory is not empty",
            "to iterate over the buffers",
            "",
            "Returns the coordinate of the extremum along a given dimension.",
            "(result)",
            "Native string encoding function. \n    \n    This function is used to convert a string to a native string encoding. \n    \n    Parameters\n    ----------\n    s : str\n        A string to be converted to a native string encoding.\n    encoding : str, optional\n        The encoding to be used for conversion. Default is 'latin-1'.\n    errors : str, optional\n        The error handling strategy to be used for conversion. Default is 'strict'.\n    \n    Returns\n    -------\n    str\n        The native string encoding of the input string.",
            "Args:\n        args (Any): \n        concat_rows (bool, optional): \n        kwargs (Any):",
            "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "TODO: Refactor this method to use pathlib.Path instead of string",
            ".\n    Args:\n        xs: [batch_size, seq_len, embed_size]\n        masks: [batch_size, seq_len]\n\n    Returns:\n        [batch_size, seq_len, embed_size]",
            "Returns the four corners of the region.",
            "This function adds two numbers together.\n    \n    Parameters\n    ----------\n    a : int\n        The first number to add.\n    b : int\n        The second number to add.\n    \n    Returns\n    -------\n    int\n        The sum of the two numbers.",
            "Pad the data to a multiple of 64 bytes",
            ".\n    Checks if an image is fully within the image.",
            "",
            "Return the parameters of the model.",
            "Start a process that will be detached from the main process.\n\n    Parameters\n    ----------\n    executable : str\n        Path to the executable to be started.\n    *args : list\n        Arguments to pass to the executable.\n\n    Returns\n    -------\n    int\n        Process ID of the started process.",
            "Destroy the object.",
            "(self, x, style, skip=None)\n    Args:\n        x: input tensor\n        style: style tensor\n        skip: skip tensor\n    Returns:\n        out: output tensor",
            "for a target function f(x) = 0.5 * x' * A * x,\n    A is a symmetric positive definite matrix.",
            ".\n    Args:\n        output_file: The file to write the output to.\n        resume: Whether to resume the job from the last checkpoint.\n        progress_file: The file to write the progress to.",
            ".\n    Logs the values to WandB.\n\n    Args:\n        values (dict): The values to log.\n        step (Optional[int]): The step to log the values for. Defaults to None.\n        **kwargs: Additional keyword arguments to pass to wandb.log.\n\n    Raises:\n        Exception: If the wandb.run is not set.",
            ".",
            ".format_tb(exc_traceback, limit=None, frame=None)",
            "",
            "Generate a CloudWatch Logs policy for the app.",
            "Sets the backend for all configs.\n    \n    :param backend: backend to use",
            "- Return the MIME type of the file.",
            ":param type: \n    :param message: \n    :param stack_trace: \n    :param inner_exception: \n    :param data: \n    :param error_response:",
            "Returns a random digit that is not null.",
            "access to the QNetworkAccessManager for the application.",
            "Test command execution.",
            "Get the prompt embedding for a given adapter name. \n    \n    Args:\n        adapter_name (str): The name of the adapter to get the prompt embedding for.\n    \n    Returns:\n        torch.Tensor: The prompt embedding for the given adapter name.",
            ".\n    Clears the screen.",
            "",
            "Get the center of the arc",
            "(\n        self,\n        config: dict,\n        conversation_id: str | None = None,\n        parent_id: str = \"\",\n        base_url: str = \"\",\n    ) -> None:",
            "Args:\n        model_config:\n        quantization:\n    Returns:\n        model:\n        quant_map:",
            ".\n\n    Returns a normalized iterable.",
            "Download a file from a remote target. \n    \n    Args:\n        target (str): Remote target to download from.\n        use_cache (bool): Whether to use the local cache.\n    \n    Returns:\n        str: Path to the downloaded file.",
            "(cls, name: str, agent_cls: Type['Agent']) -> None:",
            "Set the interval of the timer to 1/60th of a second.",
            "",
            "(object)",
            "Parse a set statement.",
            ".",
            "Returns the distance and angle between two points.",
            "(self, *args, **kwargs):",
            ".\n\n    Parameters\n    ----------\n    regexes : List[Tuple[str, Regularizer]], optional\n        List of tuples containing regular expressions and their corresponding regularizers.\n        The default is None.\n\n    Returns\n    -------\n    None.",
            "Sign the given payload using the RSA signing key.",
            "Convert an object to a string.\n    \n    :param obj: The object to convert.\n    :param encoding: The encoding to use.\n    :param errors: The errors to use.\n    :return: The string representation of the object.",
            "to close the database connection.",
            "Returns the type name of the current node.",
            "Send the status table to the chat.",
            ".\n    Override the `__call__` method of the `Optimizer` class.",
            "",
            ".\n    Returns a YowStack with the default layers for a given layer, axolotl, groups, media, privacy, profiles.\n\n    Args:\n        layer (Layer): Layer to add to the stack.\n        axolotl (bool): Whether to use the axolotl stack.\n        groups (bool): Whether to use the groups stack.\n        media (bool): Whether to use the media stack.\n        privacy (bool): Whether to use the privacy stack.\n        profiles (bool): Whether to use the profiles stack.\n\n    Returns:\n        YowStack: YowStack with the default layers.",
            ".\n    Run the model with the given prompt.\n\n    Returns:\n        str: The answer to the prompt.",
            "Forward pass of the network\n    \n    Args:\n        x: input tensor\n\n    Returns:\n        out: output tensor",
            "Get the Mel filters.\n    \n    Args:\n        n_mels (int): Number of filters.\n    \n    Returns:\n        torch.Tensor: Mel filters.",
            "Get the format profile for the given itag. \n    \n    :param itag: the itag of the video to get the format profile for\n    :return: a dictionary with the format profile",
            "Adds words to a word set from a given url. \n    \n    :param word_set: The word set to add words to.\n    :param url: The url to get words from.\n    :param line_function: The function to use to process each line.\n    :return: None",
            ".\n    Run the function.",
            "Returns a list of users that the current user has requested to follow.",
            "Configure the echarts-js-embed library.\n\n    :param jshost:\n        The URL of the host that provides the echarts-js-embed library.\n        Defaults to 'https://echarts.apache.org/assets/echarts.min.js'.\n    :param echarts_template_dir:\n        The directory where the echarts-js-embed library is located.\n        Defaults to 'https://echarts.apache.org/assets/echarts.min.js'.\n    :param force_js_embed:\n        Whether to force the echarts-js-embed library to be embedded.\n        Defaults to True.",
            "_summary_\n\n    Args:\n        cls (_type_): _description_\n        search_doc (SearchDoc): _description_\n        db_doc_id (int, optional): _description_. Defaults to 0.\n\n    Returns:\n        _type_: _description_",
            "Returns the FJS label for the given pitch.",
            ".",
            "Returns all songs in the database.",
            "This function will call the encryption class and return the encrypted text.\n    \n    Args:\n        greppable (bool): Whether or not to grep the text\n        Cipher (class): The class to use for encryption\n        text (str): The text to encrypt\n        debug (bool): Whether or not to print debug information\n    \n    Returns:\n        str: The encrypted text",
            "adaClassify(datToClass,classifierArr)\n    \n    Parameters\n    ----------\n    datToClass : ndarray\n        The data to classify.\n    classifierArr : list\n        The list of classifiers.\n    \n    Returns\n    -------\n    list\n        The list of classifications.",
            "vocab_size: size of the vocabulary\n    num_hiddens: size of the hidden state\n    device: cpu or gpu\n    get_params: function to get the parameters of the model\n    init_state: function to initialize the hidden state\n    forward_fn: function to compute the forward pass of the model",
            ":param cls: \n    :param v: \n    :return:",
            "::str -> TokenConverter\n\n    Convert an expression into a TokenConverter.",
            ".\n    Dispatches the input to the registered dispatchers.\n    Args:\n      inp: input to be dispatched.\n    Returns:\n      The output of the registered dispatchers.",
            "Build a backbone from a cfg dict.\n    \n    Args:\n        cfg (dict): A dictionary containing the configuration for the backbone.\n        default_args (dict, optional): A dictionary containing the default arguments for the backbone. Defaults to None.\n    \n    Returns:\n        Backbone: A backbone object.",
            ".\n    Returns a random number between 10 and 100.",
            "Converts an XML node to a Python dictionary.\n    \n    Args:\n        xml (xml.dom.minidom.Element): The XML node to convert.\n    \n    Returns:\n        dict: A Python dictionary representing the XML node.",
            "Prepare sample text for chat completion\n    \n    Args:\n        example: dict\n\n    Returns:\n        text: str",
            "Kick off the process of the game.",
            "Logs the current status of the server",
            "Trains an autoencoder on the pong dataset.",
            "forward pass\n    \n    Args:\n        x: input tensor, shape [batch_size, input_size]\n    \n    Returns:\n        out: output tensor, shape [batch_size, output_size]",
            ".",
            ".",
            "Returns the number of items in the list.",
            "This function is used to get the cached logic",
            ".",
            "Lock the object.\n    \n    @return: A lock object.",
            "_summary_",
            "::classmethod::",
            ".",
            "",
            "Return a dict containing the access token and expiry time.",
            "_summary_\n\n    Args:\n        kb_file (KnowledgeFile): _description_\n\n    Returns:\n        _type_: _description_",
            "Test that we can scrape the DAI docs and convert them to outputs.",
            ".",
            ".\n\n    Args:\n        bottomUpInput (numpy.ndarray):\n        enableLearn (bool):\n        computeInfOutput (bool):\n\n    Returns:\n        numpy.ndarray:",
            "Selects rows that match the given regex in the given columns.\n\n    Parameters\n    ----------\n    regex : str\n        The regex to match.\n    columns : list of pandas.Series\n        The columns to match.\n    unselect : bool, optional\n        Whether to unselect the rows that match the regex.\n\n    Returns\n    -------\n    pandas.DataFrame\n        The selected rows.",
            "Forward pass of the model.",
            "Returns a dictionary of backgrounds and their respective options",
            "Iterate over all files in a list of directories. \n    \n    Parameters\n    ----------\n    paths : list\n        A list of directories to iterate over.\n\n    Yields\n    ------\n    str\n        The path to a Python file.",
            "",
            "Update the data of a node.",
            ".",
            "Return the content between start and end.\n    \n    Parameters\n    ----------\n    string : str\n        The string to search in.\n    start : str\n        The start of the content.\n    end : str, optional\n        The end of the content. The default is None.\n\n    Returns\n    -------\n    str\n        The content between start and end.\n\n    Examples\n    --------\n    >>> str_between(\"Hello, world!\", \"Hello\", \"!\")\n    \"world!\"\n    >>> str_between(\"Hello, world!\", \"Hello\")\n    \"world!\"\n    >>> str_between(\"Hello, world!\", \"Hello\", \"!\")\n    \"world!\"\n    >>> str_between(\"Hello, world!\", \"Hello\", \"!\")\n    \"world!\"\n    >>> str_between(\"Hello, world!\", \"Hello\", \"!\")\n    \"world!\"\n    >>> str_between(\"Hello, world!\", \"Hello\", \"!\")\n    \"world!\"\n    >>> str_between(\"Hello, world!\", \"Hello\", \"!\")\n    \"world!\"\n    >>> str_between(\"Hello, world!\", \"Hello\", \"!\")\n    \"world!\"",
            ".",
            "_test_get_version_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0",
            "'Run a shell command on the device'",
            "(im, label) -> (im, label)",
            ".\n    Run the model on the given input sequence.\n\n    :param input_sequence: input sequence to run the model on\n    :param training: whether to run in training mode\n    :param mask: mask to use for padding\n    :return: dictionary of tensors",
            "Parses the data from the file and returns a list of lists",
            "to run the function in a new thread.",
            "Return the current date in the format YYYY-MM-DD",
            "input_example = torch.randn(16, self._feat_in, 256).to(self._device)\n    return tuple([input_example])",
            "_summary_\n    \n    _description_\n    \n    _param_1_: _type_\n    \n    _return_: _type_\n    \n    _raises_: _type_",
            "Check if the data is not empty and not only spaces\n    \n    :param data: str\n    :return: bool",
            ".\n    Load the prompt cache from the given path.\n\n    Args:\n        path (str): The path to the prompt cache file.\n\n    Returns:\n        dict: A dictionary containing the prompt IDs and prompt keys-values.",
            "Get the cached response if any",
            "Test seek() with SEEK_CUR",
            "Check if a column should be filtered out.\n    \n    Args:\n        name (str): Name of the column.\n        regex (str): Regular expression to match against column names.\n        virtual (bool): Whether the column is a virtual column.\n        strings (bool): Whether the column should be filtered out for strings.\n        hidden (bool): Whether the column should be filtered out for hidden columns.\n        \n    Returns:\n        bool: True if the column should be filtered out, False otherwise.",
            ".",
            ".",
            ".",
            ".",
            "Returns the range of the range object.",
            "Test that a pip install with the wrong version of the package fails.",
            ".",
            "2016-12-27 15:54:44\n    :param sentence:\n    :return:",
            "Args:\n        model (str, optional): path to model. Defaults to \"yolov8n.pt\".\n        task (str, optional): task to perform. Defaults to None.\n        verbose (bool, optional): verbose mode. Defaults to False.",
            "Creates a method not allowed handler that sets the status to 405 and\n    sets the Allow header to the allowed methods.\n\n    :param allowed_methods: A list of HTTP methods that are allowed.\n    :type allowed_methods: list\n    :return: A function that sets the status to 405 and sets the Allow header.\n    :rtype: function",
            "Validate the exchange value.\n    \n    :param value: The exchange value to validate.\n    :return: The validated exchange value or None if the value is invalid.",
            "Decrypt the credential history data using the supplied key.\n    \n    :param enckey: The encryption key to use.\n    \n    :returns: None",
            "Return HTML representation of the widget.",
            "_get_message_by_status_impl_by_status",
            "Returns a Page object for the heap region containing the address addr.",
            "_init_",
            ".\n\n    :param start:\n    :param end:\n    :param addr_space:\n    :return:",
            "Search for the correspond LM ID in the LM set. \n    \n    Parameters\n    ----------\n    xAug : array\n        Augmented state.\n    PAug : array\n        Augmented covariance matrix.\n    zi : array\n        Innovation matrix.\n\n    Returns\n    -------\n    minid : int\n        Correspond LM ID.",
            "Initialise the centroids to random points from the dataset.\n    \n    Parameters\n    ----------\n    X : array-like, shape = [n_samples, n_features]\n        The training data, where n_samples is the number of samples and\n        n_features is the number of features.\n        \n    Returns\n    -------\n    centroids : ndarray, shape = [k, n_features]\n        The initial centroids.",
            "Sets the feeds for the scraper.",
            "(self, predictor, default_args):\n\n        Decorator for wrapping a predictor's forward method to set the\n        default arguments passed to the predictor's forward method.\n\n        Parameters\n        ----------\n        predictor : Predictor\n            The predictor to decorate.\n\n        default_args : dict\n            The default arguments to set on the predictor's forward method.\n\n        Returns\n        -------\n        Predictor\n            The decorated predictor.\n\n        Example\n        -------\n        >>> from pytorch_lightning.core.lightning import LightningModule\n        >>> from pytorch_lightning.core.decorators import wrap_forward_with_set_fields\n        >>>\n        >>> class MyPredictor(LightningModule):\n        >>>     def __init__(self, *args, **kwargs):\n        >>>         super().__init__(*args, **kwargs)\n        >>>\n        >>>     @wrap_forward_with_set_fields(default_args={\"a\": 1, \"b\": 2})\n        >>>     def forward(self, x):\n        >>>         return x + self.a + self.b\n        >>>\n        >>> predictor = MyPredictor()\n        >>> print(predictor",
            "_recursive_children(element, tag=None, _results=None)\n\n    Recursively get all children of the element.\n\n    :param element: Element\n    :param tag: str\n    :param _results: set\n    :return: list",
            "'This function creates a widget that allows the user to enter text.",
            "_init__\n    :param df_lists: list of tuples (df, prob)",
            "This function will return the page layout of the current document.",
            "Forward pass.\n\n    Parameters\n    ----------\n    x : torch.Tensor\n        Input tensor of shape (batch_size, num_nodes, num_features).\n    emb : torch.Tensor\n        Embedding tensor of shape (num_nodes, num_features).\n\n    Returns\n    -------\n    torch.Tensor\n        Output tensor of shape (batch_size, num_nodes, num_features).",
            "_register_resource_type\n\n    Register a resource type with the resource body class.\n\n    :param cls:\n    :param resource_body_cls:\n    :return:",
            ".",
            "Check if the given value is a valid transaction hash.",
            ".get_api_url()\n\n    Returns:\n        str: api url",
            "Args:\n        x: [batch_size, num_frames, 1]\n\n    Returns:",
            ".\n\n    Args:\n        users (list, optional): List of users to ignore. Defaults to [].\n\n    Returns:\n        self: The current instance of the `UserBot` class.",
            "Extract features from the model.\n    \n    Arguments:\n    \n        *args:\n            \n        **kwargs:\n    \n    Returns:\n    \n        extracted features",
            ":param result: \n    :return:",
            ".from_keypair(cls, keypair)\n\n    Create a new instance of this class from a keypair.\n\n    :param keypair: a tuple of 32 bytes\n    :return: a new instance of this class",
            ".",
            ".\n    Returns the offset of a chunk key.",
            "(self, element):\n        Insert an element into the database.\n\n        Args:\n            element: The element to insert.\n\n        Returns:\n            None.",
            ".",
            "Returns True if the request was successful, False otherwise.",
            "",
            ">>> @queue\n    >>> def fn(x):\n    >>>     return x*2\n    >>> fn(1)\n    2\n    >>> fn(2)\n    4\n    >>> fn(3)\n    6\n    >>> fn(4)\n    8\n    >>> fn(5)\n    10\n    >>> fn(6)\n    12\n    >>> fn(7)\n    14\n    >>> fn(8)\n    16\n    >>> fn(9)\n    18\n    >>> fn(10)\n    20\n    >>> fn(11)\n    22\n    >>> fn(12)\n    24\n    >>> fn(13)\n    26\n    >>> fn(14)\n    28\n    >>> fn(15)\n    30\n    >>> fn(16)\n    32\n    >>> fn(17)\n    34\n    >>> fn(18)\n    36\n    >>> fn(19)\n    38\n    >>> fn(20)\n    40\n    >>> fn(21",
            "",
            ".",
            "Generate a sequence of betas that corresponds to the training schedule\n    :param num_diffusion_timesteps: the number of betas to generate, these are the training timesteps\n    :param alpha_bar: the function that estimates the rate at which the exponential decay of the beta will be\n    :param max_beta: the maximum beta to use; use values between 0.999 and 1.0 to avoid overshooting",
            ".\n\n    Returns:\n\n        str:",
            "def __init__(self, exclude=[], include=[], invalid=False):",
            ".\n    Fits the model to the given data.",
            "Sets the model type to YOLOv3",
            "",
            "Get an object from the object list.",
            "for each buffer in self._buffers",
            "",
            "(self, driver):\n\n        Sets the driver to use for the test.\n\n        Args:\n            driver (webdriver.WebDriver): The driver to use for the test.\n\n        Raises:\n            ValueError: If `driver` is `None`.",
            "Randomly flips the image horizontally.\n\n    Args:\n        img (PIL.Image.Image): Image to be flipped.\n        d (int, optional): The axis to be flipped. Defaults to 0.\n\n    Returns:\n        PIL.Image.Image: Flipped image.",
            ".\n    Args:\n        source (str): Path to source image.\n        results (list): List of results.\n        device (str): Device to use.",
            ".",
            "for the given regex, return a QueryRegex object",
            "Delete a tensor from the graph. \n    \n    Args:\n        name (str): The name of the tensor to delete.",
            "(dict) -> dict",
            "Parse level content from text",
            "Clear the jobs list.\n\n    :param tag: the tag to clear\n    :type tag: str or None",
            ".",
            ":param text: Text to be highlighted",
            "Removes the desktop shortcut for the currently selected game.",
            ".\n\n    Parameters\n    ----------\n    dLdy : np.ndarray\n        The derivative of the loss with respect to the output of the last layer.\n    X : np.ndarray\n        The input to the last layer.\n\n    Returns\n    -------\n    dX : np.ndarray\n        The derivative of the loss with respect to the input to the last layer.\n    dW : np.ndarray\n        The derivative of the loss with respect to the weights of the last layer.\n    dB : np.ndarray\n        The derivative of the loss with respect to the biases of the last layer.",
            "Expand a tensor to a new dimension.\n    \n    Args:\n        value: Tensor to expand.\n        newdim: New dimension to expand to.\n    \n    Returns:\n        Expanded tensor.",
            "Returns:\n        str: String representation of the PdfInfo object.",
            "'timeout' decorator for asynchronous functions.\n\n    :param timeout: a tuple of (seconds, microseconds)\n    :return: a timeout object",
            "",
            "Serialize the event into a dictionary.",
            ".\n    Parses the given file and returns its contents as a string.\n\n    Args:\n        file (Path): The path to the file to be parsed.\n        errors (str): The error handling strategy to use.\n\n    Returns:\n        str: The contents of the file as a string.\n\n    Raises:\n        ValueError: If the docx2txt library is not installed.",
            ".\n    Args:\n      random: A Random instance.\n      cells: A list of Cell instances.\n      connections: A Connections instance.\n    Returns:\n      A Cell instance.",
            "start_project",
            "Test that the function returns a pathlib.Path object.",
            "'Patches' environment variables.",
            "Saves the event to Sentry.\n    \n    :param cache_key: The cache key to use.\n    :param data: The event data.",
            "calculate factorial of a number",
            "Backward step.\n\n    :param input_tensor:\n    :param output_tensor:\n    :param output_tensor_grad:\n    :return:",
            "for each data point, draw a point and label it with the value.",
            "Creates the session object.",
            ".",
            "for value < 0, return -inf",
            "Return list of Document objects from the database.\n    \n    Parameters\n    ----------\n    file_name : str, optional\n        File name of the document. If None, return all documents.\n    metadata : Dict, optional\n        Metadata of the document. If None, return all documents.\n    \n    Returns\n    -------\n    List[Document]\n        List of Document objects.",
            "(self, w0=30)\n\n    Initializes a ``Keras.Model.Model`` with the following attributes:\n\n    - ``w0``: ``float``\n      The frequency of the sinusoid.\n\n    - ``fan_mode``: ``str``\n      The fan mode of the sinusoid.\n\n    - ``power``: ``float``\n      The power of the sinusoid.\n\n    - ``gain``: ``float``\n      The gain of the sinusoid.",
            "",
            "Deletes a game from the database. \n    \n    Parameters\n    ----------\n    slug : str\n        The slug of the game to delete. \n    \n    Returns\n    -------\n    None",
            "Unzip file entry to target directory.\n    \n    Args:\n        zip_ref (zipfile.ZipFile): zipfile object.\n        file_entry (zipfile.ZipInfo): zipfile entry object.\n        target_dir (str): target directory.",
            "Applies a rotation factor to the image.\n    \n    Parameters\n    ----------\n    img : ndarray\n        The image to rotate.\n    factor : int, optional\n        The rotation factor.\n    \n    Returns\n    -------\n    ndarray\n        The rotated image.",
            ".",
            "",
            ".\n    Constructor for the class.",
            "Find the first node matching xpath with key and val. \n    \n    Parameters\n    ----------\n    node : Node\n        The node to search.\n    xpath : str\n        The xpath expression to search for.\n    key : str\n        The key to search for.\n    val : str\n        The value to search for.\n    \n    Returns\n    -------\n    Node\n        The first node matching xpath with key and val.",
            "",
            "Returns a list of watched extensions.",
            "Show the admin toolbar only for internal IPs.",
            "Returns a sorter for sorting groups.\n    \n    Parameters\n    ----------\n    group_index : array_like\n        Index of groups.\n    ngroups : int\n        Number of groups.\n    \n    Returns\n    -------\n    sorter : array_like\n        Index of groups.",
            "new_objfile_handler:",
            ".\n    Returns:\n        str: The title of the game.",
            "Extract text from the document using a regex.",
            "Sort the results by score or cross_score.\n    \n    Args:\n        rank_results (bool): Whether to rank results by score or cross_score.\n        hits (List[dict]): The list of hits.\n    \n    Returns:\n        List[dict]: The sorted list of hits.",
            "Import a symbol from the app's models module.\n    \n    For example, if the app's models module is named `app.models`, this\n    method will import the symbol `app.models.SomeModel`.\n    \n    This method works in the same way as `import_relative_to_app` in\n    `flask_sqlalchemy.model`, except it works in the app's models module.\n    \n    Args:\n        attr (str): The symbol to import.\n    \n    Returns:\n        Any: The symbol.\n    \n    Raises:\n        ImportError: If the symbol could not be imported.",
            ".\n    Args:\n        observation: Observation to predict actions for.\n        deterministic: Whether to return deterministic actions.\n    Returns:\n        Actions predicted by the model.",
            "Preconvert an item into a serializable form. \n    \n    Parameters\n    ----------\n    item : object\n        The item to preconvert.\n\n    Returns\n    -------\n    object\n        The preconverted item.",
            "(int)\n    Returns:\n        (int)",
            "Returns a dictionary with environment variables.",
            "Test clone method.",
            "img1_path: str or list of str\n    img2_path: str or list of str",
            "",
            ",\n    Parameters\n    ----------\n    kernel_size : int or tuple of ints\n        The size of the convolving kernel.\n    stride : int or tuple of ints\n        The stride of the convolution.\n    padding : int or tuple of ints\n        The number of \"pixels\" to pad the input along each dimension.\n    data_format : {'NHWC', 'NCHW'}\n        Whether the data is in channel-major (NHWC) or channel-minor (NCHW) format.\n    device : str or None\n        The device to place the module's parameters on.\n    dtype : str or None\n        The data type of the module's parameters.",
            "",
            "Returns a ms payload based on the given payload.",
            ".\n    :param parent:\n    :param params:\n    :param response:\n    :return:",
            "Align the current mobj on the border of the frame. \n    \n    Parameters\n    ----------\n    direction : tuple\n        The direction to align the current mobj.\n    buff : int\n        The buffer to use when aligning the mobj on the border of the frame.\n        \n    Returns\n    -------\n    mobj : mobj\n        The current mobj with the aligned on the border.",
            "Returns all the names of the slots used by the optimizer. \n    \n    :return: list of strings",
            "@param logins: a dictionary of logins to User objects\n    @param ins: input stream\n    @param out: output stream",
            "Parameters\n    ----------\n    kernel_type : str, optional\n        The kernel type. The default is 'primal'.\n    dim : int, optional\n        The dimension of the input data. The default is 30.\n    lamb : float, optional\n        The regularization parameter. The default is 1.\n    gamma : float, optional\n        The gamma parameter. The default is 1.",
            "_test_smote_bad_ratio_raises_value_error",
            ":param source: \n    :param visited: \n    :return:",
            ".",
            "Extract the best one from a list of choices. \n    \n    Parameters\n    ----------\n    query : str\n        The query.\n    choices : list of str\n        The list of choices.\n    processor : callable, optional\n        The processor to apply to the query.\n    scorer : callable, optional\n        The scorer to apply to the query.\n    score_cutoff : float, optional\n        The score cutoff to apply to the query.\n\n    Returns\n    -------\n    str or None\n        The best choice or None if there is no best choice.",
            ".\n\n    Parameters\n    ----------\n    dLdy : float\n        Gradient of the loss with respect to the output of the last layer.\n    X : array-like\n        The input to the last layer.\n\n    Returns\n    -------\n    dX : array-like\n        Gradient of the loss with respect to the input of the last layer.\n    dW : array-like\n        Gradient of the loss with respect to the weights of the last layer.\n    dB : array-like\n        Gradient of the loss with respect to the bias of the last layer.",
            "Prunes heads of the model.",
            "_save_m2m\n\n    Saves the many to many relationships.",
            ".",
            ":param json:\n    :return:",
            ".",
            ".\n    Raises a given exception type.",
            "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "Returns:\n        \n        iter:",
            ".\n    Args:\n        router (Optional[APIRouter], optional):\n            The router to use for the endpoint. Defaults to None.\n        router_prefix (str, optional):\n            The prefix for the router. Defaults to \"/api/v1/awel/trigger\".",
            "Returns a list of all the proof blocks for the given address.",
            "",
            "Gets the fleet number of the OpSi that is currently selected.",
            "(str, DisplayablePath, bool) -> None",
            "Writes data to the buffer.",
            "Returns the URL of the emoji.",
            "Prompts the user with a question and returns True or False \n    based on their answer.",
            ".",
            ".\n    Multiply two Rigid objects.",
            "\u83b7\u53d6\u5fae\u535a\u5185\u5bb9",
            "_summary_\n    Args:\n        trainer: transformers.Trainer\n        output_dir: str",
            "Return the next item in the sequence.\n    \n    :return:",
            "Test that list_courses returns the expected output",
            "Initialize the points\n    :param init_points: number of points to initialize\n    :return:",
            "Raises a NonExistentEventException if the dash events are not\n    supported by dash.",
            ".",
            ".\n    Extract the code from the response.\n\n    Args:\n        response (str): The response from the server.\n        separator (str, optional): The separator used to split the code. Defaults to \"```\".\n\n    Raises:\n        NoCodeFoundError: If no code is found in the response.\n\n    Returns:\n        str: The code extracted from the response.",
            ":param data: A data object containing the ability data.",
            "_summary_\n\n    Returns:\n        str: _description_",
            ":return:",
            "Sends a message to the client.",
            "for clip",
            "_i_\n\n    Print a message to stderr.\n\n    :param message: The message to print.\n    :type message: str\n    :param ostream: The output stream to print to.\n    :type ostream: str\n    :return: None\n    :rtype: None",
            "This class is used to set hyperparameters of a given variable",
            "Convert a string to a continuation align style.",
            "Cancel a job.",
            "for a given kv, update the kv cache for the given layer_idx.",
            ".",
            ".",
            "",
            "Detect <Tab> key and complete the current buffer.",
            "Initialize the generator object.\n    \n    Args:\n        generator (object): The generator object to be initialized.",
            "Return the number of pages in the object.",
            "to add a column to the DataFrame",
            "Computes the F1 score for the predictions and gold labels.",
            "_create_vision_transformer",
            "True loss function for the model. \n    \n    Args:\n        cls (torch.nn.Module): The model.\n        result (torch.Tensor): The result tensor.\n        argd (torch.Tensor): The argument tensor.\n    \n    Returns:\n        torch.Tensor: The loss tensor.",
            "Returns the number of units in the output layer.",
            "Returns all prefixes that are a child of this prefix.",
            ".",
            ".",
            "",
            ".",
            ",\n    Checks whether the image is partly within the image bounds.",
            ".\n    Parses a string in the format \"<device_type>:<device_id>\" and returns a Device object.",
            ".",
            ".\n    Return a tensor of the given type and shape.",
            "Create a regular link.",
            ".\n    Args:\n        img (np.ndarray): Image to predict on.\n    Returns:\n        np.ndarray: Predicted label.",
            "(self, X, y) -> self\n    \n    Fit the model to data X and labels y.\n    \n    Returns\n    -------\n    self : object\n        Returns self.",
            "Saves the model checkpoint with the given iteration number.",
            "Removes SQL from the question",
            ".\n    Sets the failure threshold.",
            "get video id from url",
            "Calculate the distance between the album information and the items.",
            ".\n    Args:\n        y_true: A 1-D array-like with shape `(batch_size,)`.\n        y_pred: A 1-D array-like with shape `(batch_size,)`.\n        sample_weight: A 1-D array-like with shape `(batch_size,)`.",
            ".get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item(self, entry, handle_value = 0)\n\n    .get_item",
            ":param x: (batch_size, seq_len, emb_dim)\n    :param x_mask: (batch_size, seq_len)\n    :param offset: (batch_size, seq_len)\n    :return:",
            ".\n    Returns whether the URL is on the same host as this server.",
            "Converts raw data to protobuf\n    \n    Args:\n        raw: raw data\n    \n    Returns:\n        proto",
            "Get the value of an environment variable.\n\n    Parameters\n    ----------\n    key : str\n        The name of the environment variable.\n    default : Optional[Union[PathLike, str]], optional\n        The default value to return if the environment variable is not set.\n\n    Returns\n    -------\n    Optional[Path]\n        The value of the environment variable.",
            "(init)",
            "_add(self, f: mitmproxy.flow.Flow) -> None:\n\n    Adds a flow to the store.\n\n    Args:\n        f (mitmproxy.flow.Flow): The flow to add.",
            "Override this method to implement your own training logic.",
            ".\n\n    :param chat_id:\n    :param notify_type:\n    :param attach:\n    :return:",
            "\u4fee\u6539\u914d\u7f6e\u6587\u4ef6",
            "Registers the public key for the client.",
            "This function is a decorator that adds the \"output\" modifier to the string.\n    \n    Args:\n        string (str): The string to be modified.\n        state (str): The state of the machine.\n        \n    Returns:\n        str: The modified string.",
            "\u5224\u65ad\u9879\u76ee\u662f\u5426\u9700\u8981\u66f4\u65b0\n    :param project_name: \u9879\u76ee\u540d\u79f0\n    :param updatetime: \u9879\u76ee\u66f4\u65b0\u65f6\u95f4\n    :return: bool",
            "Initialize the encoder CNN.\n    \n    Parameters:\n    - embed_size (int): Dimensionality of the embedding space.\n    \n    Returns:\n    - None",
            ".\n    Finds the cost of going from start to goal.",
            "_summary_\n\n    Args:\n        message (str): _description_",
            "for the state of the game",
            "Build DataParallel or DistributedDataParallel",
            "_summary_\n\n    Args:\n        addr (int, optional): _description_. Defaults to None.\n        verbose (bool, optional): _description_. Defaults to True.\n\n    Returns:\n        _type_: _description_",
            "Forward pass.\n\n    Parameters\n    ----------\n    x : torch.Tensor\n        Input tensor.\n    \n    Returns\n    -------\n    torch.Tensor\n        Output tensor.",
            ".",
            "Delete the element with the specified key.",
            "Gets the value of the given offset.\n    \n    @param fmt: The format of the value.\n    @param offset: The offset to get the value from.\n    \n    @return: The value of the given offset.",
            "Returns the maximum length of sequences used in the dataset.",
            "(class)",
            "get growth data",
            "This function is used to check if the number is even or not.",
            "Test static proxy",
            "Set the model name in the environment\n    \n    Args:\n        model (str): The name of the model to use\n    \n    Raises:\n        ValidationError: If the model name is not set",
            ".",
            ".cleanup() should remove expired jobs from the registry.",
            ":param body_output:\n    :param _:\n    :return:",
            "bboxes: (N, 4)\n    img_shape: (H, W)\n    scale_factor: (H, W)\n    flip: bool",
            ".\n    Override the default pause method",
            "for markdown cells",
            "(float)\n    Computes the reward for a given output sequence.\n\n    Args:\n        output_sequence (torch.Tensor): The output sequence to compute the reward for.\n        output_sequence_mask (torch.Tensor): The mask to apply to the output sequence.\n\n    Returns:\n        torch.Tensor: The reward for the output sequence.",
            "(self, text):",
            "_summary_\n\n    Args:\n        *args (str): _description_\n        prompt_type (type[str] | type[int] | None, optional): _description_. Defaults to None.\n        **kwargs: _description_\n\n    Returns:\n        str: _description_",
            "(name, value, minval=None, maxval=None, check_fn=None)\n\n    Initializes a new instance of the ``Config`` class.\n\n    Args:\n\n        name (str): The name of the config variable.\n\n        value (object): The value of the config variable.\n\n        minval (object, optional): The minimum value of the config variable.\n\n        maxval (object, optional): The maximum value of the config variable.\n\n        check_fn (callable, optional): A callable function that is called to validate the config variable.\n\n    Returns:\n\n        Config: A new instance of the ``Config`` class.\n\n    Example:\n\n        config = Config(\"example_config\", 10, minval=0, maxval=100, check_fn=lambda x: x >= 0 and x <= 100)",
            "Match a record against the current matcher.",
            "Review the draft and return a list of review suggestions.\n\n    Args:\n        draft (str): The draft to review.\n\n    Returns:\n        list: A list of review suggestions.",
            "Returns hyperparameters of the model.",
            "",
            "Update latest price in all BOMs.",
            "Sets the gradients of all tensors to zero.\n    \n    Parameters\n    ----------\n    set_to_none : bool\n        If True, sets the gradients of all tensors to None.\n        If False, sets the gradients of all tensors to zero.",
            ".",
            "Update forward references to the cls module.\n\n    .. versionadded:: 3.8\n\n    .. versionchanged:: 4.0\n\n        The ``localns`` argument was added.\n\n    :param cls: The class to update forward references for.\n    :param localns: A dictionary of local names to use for forward references.\n    :return: None",
            "Train the neural network.\n    \n    Parameters\n    ----------\n    data : list\n        List of tuples (input, output) representing the training data.\n    iterations : int\n        Number of training iterations.\n    rate : float\n        Learning rate.\n    momentum : float\n        Momentum factor.\n    \n    Returns\n    -------\n    None",
            "Return the URL of the request.",
            "Convert a value to a Python object.",
            ".",
            "_summary_\n\n    Args:\n        budget_id (int): _description_\n        budget (BudgetIn): _description_\n        Authorize (AuthJWT, optional): _description_. Defaults to Depends(check_auth).\n\n    Returns:\n        _type_: _description_",
            "Called when the parser encounters a start tag.",
            "(str, list[str], str) -> Optional[ModuleSpec]",
            ":type n: int\n    :rtype: int",
            "Return the maximum number of processes that can be run concurrently.",
            "Updates the status of the job.\n    \n    :param ft: The future object representing the job execution.\n    :type ft: Future\n    :return: None",
            "_test_cache_categories\n    \n    Test that cache is used to store category urls",
            "fromfile(*args, **kwargs)\n    \n    Read data from a file.\n    \n    Parameters\n    ----------\n    args :\n        The arguments to be passed to numpy.fromfile.\n    \n    kwargs :\n        The keyword arguments to be passed to numpy.fromfile.\n    \n    Returns\n    -------\n    array :\n        The data read from the file.",
            "Deserialize a ciphertext blob from a serialized form.\n    \n    Args:\n        ciphertext_blob (bytes): The serialized ciphertext blob.\n    \n    Returns:\n        Ciphertext: The deserialized ciphertext.",
            ".",
            "\"Return a string representation of this object.",
            "sections",
            ".set()\n    Sets the resource for a logical ID.",
            "Creates the embedding matrix for the model.",
            "List models.\n\n    :param extra_headers: Extra headers to send with the request.\n    :param extra_query: Extra query parameters to send with the request.\n    :param extra_body: Extra body to send with the request.\n    :param timeout: Timeout for the request.\n    :return: A page of models.",
            "Run the command \"foo\" and return the result.",
            "",
            "Save query to Redis",
            "Initialize the TAESD model.\n\n    Args:\n        encoder_path (str, optional): Path to the encoder model weights. Defaults to \"taesd_encoder.pth\".\n        decoder_path (str, optional): Path to the decoder model weights. Defaults to \"taesd_decoder.pth\".",
            "Sends the data to the telemetry server. \n    \n    :param log_data: If True, sends the data to the server. If False, sends the data to the server as a redacted string.\n    :type log_data: bool\n    :return: None\n    :rtype: NoneType",
            "",
            "Convert a .wav file to a .silk file.\n\n    Args:\n        pcm_path (str): Path to the .wav file.\n        silk_path (str): Path to the .silk file.\n\n    Returns:\n        None",
            "This function is called when the frame is detached from the parent window.\n    \n    Parameters\n    ----------\n    event: Literal[\"framedetached\"]\n        The event type.\n    f: typing.Callable[[\"Frame\"], \"typing.Union[typing.Awaitable[None], None]\"]\n        The function to call when the frame is detached from the parent window.\n        \n    Returns\n    -------\n    None",
            "",
            "Check if the request is a William request.",
            "_summary_\n    Check if the exploit is successful.\n\n    Args:\n        target (target): Target to check.\n\n    Returns:\n        bool: True if the exploit is successful, False otherwise.",
            "Save the model checkpoint to disk.\n    \n    Args:\n        program: The program to be saved.\n        ckpt_name: The name of the checkpoint to be saved.\n    \n    Returns:\n        The directory where the checkpoint was saved.",
            ".",
            "Deletes a conversation.\n    \n    Args:\n        convo_id (str): Conversation ID.",
            "Returns a queryset of objects that the user can read.",
            "Initializes a new instance of the File class.",
            ".",
            "Returns the name of the group for the staff group for the given location.",
            ".",
            ".kde.evaluate(xs)",
            "Generates sample images from generators and save them as images",
            ".",
            "Return a list of floating point data types.",
            ".",
            ".\n    Check if the user has permission to add an organization.",
            "Returns the maximum sequence length",
            ".",
            ".",
            "The constructor for the class.\n    \n    :param name: The name of the application.\n    :param linux_command: The linux command to run.\n    :param windows_command: The windows command to run.",
            "Get the unarchived folders from the snapshots.\n    \n    :param snapshots: The snapshots to get the unarchived folders from.\n    :param out_dir: The output directory.\n    :return: The unarchived folders.",
            "KL divergence between two multivariate Gaussians",
            "(Tensor) -> Tensor\n    Performs a forward pass through the network.\n\n    Args:\n        tensor_input (Tensor): Input tensor to be passed through the network.\n\n    Returns:\n        Tensor: Output tensor produced as a result of applying the network to the input.",
            "",
            ".",
            "Args:\n        weights: the tensor to be regularized.\n        name: the name of the regularization.\n    \n    Returns:\n        the regularization.",
            "_check_success_test_case_",
            "Returns the value of a key in the dictionary or a default value if the key is not found.",
            "for windows",
            "This function does something",
            "'test_post'",
            "Get the header for an animated image.",
            "_test_upgrade_packages_option_no_existing_file_\n\n    Test that upgrade packages option works with no existing file.",
            "Stop all jobs",
            ".Diff_Timeout = 1.0\n\n    self.Diff_EditCost = 4\n\n    self.Match_Threshold = 0.5\n\n    self.Match_Distance = 1000\n\n    self.Patch_DeleteThreshold = 0.5\n\n    self.Patch_Margin = 4\n\n    self.Match_MaxBits = 32",
            ".\n    Initialize the result object.",
            "Set the output keys for each dataset.\n    \n    Parameters\n    ----------\n    datasets : list of Dataset objects\n        The datasets to set the output keys for.\n    output_keys : list of str\n        The output keys to set for each dataset.\n    \n    Returns\n    -------\n    None",
            "",
            "Gets a value from the database.\n    \n    Args:\n        fmt (str): The format of the value to get.\n        offset (int): The offset to get the value from.\n    \n    Returns:\n        str: The value from the database.",
            "Removes all tasks from the queue that have exceeded the rate limit.",
            "This function will enhance the connection to the session object \n    to handle the connection pooling \n    \n    Args:\n        session (object): The session object \n        pool_connections (int): The number of connections to the pool \n        pool_maxsize (int): The maximum number of connections to the pool \n        max_retries (int): The maximum number of retries to the pool \n    \n    Returns:\n        None",
            "",
            "(self, cfg):\n        \n        @param cfg:\n        @return:",
            ".\n    Returns:\n        Dict[str, Dict]: A dictionary of model information.",
            ".\n\n    Args:\n      data_dir: Data directory.",
            ".",
            "_process_all_forms(self, form):",
            ".\n    Returns a copy of the current audio with the time_func applied to the\n    audio.\n\n    Parameters\n    ----------\n    time_func : callable\n        The time function to apply to the audio.\n    apply_to : list, optional\n        The audio attributes to apply the time_func to. The default is\n        ['mask', 'audio'].\n    keep_duration : bool, optional\n        If True, the duration of the audio is preserved. The default is\n        False.\n\n    Returns\n    -------\n    audio : Audio\n        The audio with the time_func applied to the audio.",
            "Loads the current record.",
            "date_string: string in format YYYY-MM-DD HH:MM+Z\n    Returns datetime object",
            "Test that the default mode is 777 - S_IWUSR - S_IWGRP - S_IWOTH",
            "Returns a rendered graph for the given interface.",
            "A multi-layer perceptron.",
            "Sets the display name of the participant. \n    \n    Parameters\n    ----------\n    display_name : str\n        The new display name of the participant.",
            "_test_individual_boss_on_unit_test()",
            "Returns a list of all the immutable keys",
            ".\n    Extract the tar file.\n    :param file_path: path to tar file\n    :return: True if successful, False otherwise",
            ".\n    Delete a file or folder from a share.\n\n    :param shareName: Name of the share to delete a file from.\n    :param pathName: Name of the file or folder to delete.\n    :return: True if the file or folder was deleted successfully, False otherwise.",
            "Clear all jobs from the queue.",
            "Returns True if the given value is contained in this interval.\n\n    :param other: The value to check.\n    :return: True if the value is contained, False otherwise.",
            "* @brief  \u91cd\u5199\u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6\n    * @param  event\n    * @return void",
            ".authenticate_user(self, request: Request) -> AuthResponse:",
            "",
            "Create a new game\n    \n    Args:\n        number_to_guess (int): Number to guess\n        \n    Returns:\n        None",
            "",
            ".",
            "Find snippet files for a given filetype in a directory.\n    \n    @param ft: Filetype (e.g. 'python')\n    @param directory: Directory to search in\n    @return: Set of snippet files",
            ".\n    Set validation data.\n\n    :param batch_size:\n    :param X_val:\n    :param Y_val:\n    :param trigger:\n    :param val_method:\n    :return:",
            ".\n    Returns:\n        str: JSON string representation of the config.",
            "Create a typed tuple from a sequence.\n    \n    :param item_type: Type of each item in the tuple.\n    :param iterable: Sequence of items to be converted to a tuple.\n    :param _tuple_cache: Tuple cache.\n    :return: Typed tuple.",
            "'foo' should be in the hosts of 'bar'",
            ".\n    This method is called when the process is started.\n    :return:",
            ".\n    Post Release",
            "Returns a list of the names of the fields in the model.",
            "Return the number of times value occurs in the view.",
            "",
            "Convert the counter to a dictionary.\n    \n    :param get_value: function to get the value from the counter\n    :return: dictionary",
            ".",
            "@param ctext:\n    @return:",
            "(self, nodes, thunks, pre_call_clear)",
            "Opens a file in ascii mode.\n    \n    Parameters:\n    filename (str): The name of the file to open.\n    mode (str): The mode to open the file in.\n\n    Returns:\n    file: A file object representing the opened file.",
            ".getAppExt()\n\n    Returns the application extension data.\n\n    :param loops: The number of loops.\n    :type loops: int\n    :return: The application extension data.\n    :rtype: str",
            "(float)\n\n    Compute the log likelihood of the observations given the parameters.\n\n    Parameters\n    ----------\n    params : ndarray\n        The parameters to be used.\n\n    Returns\n    -------\n    float\n        The log likelihood of the observations.",
            ".\n    Test function for count_connected_number_of_component class.\n    count_connected_number_of_component.py\n<|fim_prefix|><|fim_suffix|>\n\n    def count_components(self,l,size):",
            "",
            "Function to check the accuracy of our model",
            "Returns the answer to the question.",
            "validation",
            "_summary_\n\n    Args:\n      raw_features: The raw features to process.\n      random_seed: The random seed to use for generating random features.\n\n    Returns:\n      A `features.FeatureDict` containing the processed features.",
            "Register a model class.\n    \n    Parameters\n    ----------\n    name : str, optional\n        The name to use for the model class.\n    \n    Returns\n    -------\n    Type\n        The model class.",
            "",
            "::\n\n        Parameters:\n            x (torch.Tensor): input tensor to be encoded\n            n_q (int): number of codes to be encoded\n            st (int): starting index for codes\n        \n        Returns:\n            torch.Tensor: encoded tensor",
            "_recursive_children",
            "(self, params, **cfg)",
            "(MemoryStorage)",
            "_summary_",
            "Returns the token limit for the given model.\n\n    Args:\n        model (str, optional): The name of the model. Defaults to \"gpt-3.5-turbo-0301\".\n\n    Returns:\n        int: The token limit for the given model.",
            ".\n    Returns:\n        Dict[str, List[Parameter]]:",
            "() -> int:",
            "The function returns the number of possible combinations of \n    letters in the name of the person with the given number of letters.",
            ".\n    Generates a context string for the given message.",
            "to compute the expert to gates transformation.",
            "",
            "",
            "(x: torch.FloatTensor, return_dict: bool = True) -> Union[DecoderOutput, torch.FloatTensor]:",
            "Sets the cached dataframe for a given pair and timeframe. \n    \n    Args:\n        pair (str): The pair to cache the dataframe for.\n        timeframe (str): The timeframe to cache the dataframe for.\n        dataframe (DataFrame): The dataframe to cache.\n    \n    Returns:\n        None",
            "Shell +",
            ".\n    :param service:\n    :param session:\n    :param region:\n    :return:",
            "(self, trial_parameters: dict, workspace: str = 'workspace', callback=None, **kwargs):",
            ".\n    * Returns:\n        Yields:",
            "",
            "get environment variables from user",
            "Print a message to the console in red and bold.\n    \n    :param message: The message to print.\n    :param exit_code: The exit code to use.",
            "Prints the deployment information.\n    \n    Args:\n        deployment (dict): The deployment information.\n    \n    Returns:\n        dict: The deployment information with the API key obfuscated.",
            "Converts a string to UTF-8.",
            ".close()\n    \n    def clear(self):",
            ".\n\n    Parameters\n    ----------\n    scores : array-like, shape (n_samples,)\n        Scores of the detectors.\n\n    Returns\n    -------\n    candidates : array-like, shape (n_selected,)\n        Indices of the selected detectors.",
            ".",
            "Returns a dict with the results of the identification process.",
            ".",
            "Adds summaries for losses and the total loss to tensorboard."
        ],
        [
            "for each element in self.recursive_crawl(\"identifier\"),\n        yield an ObjectReferencePart object.",
            "(self, x)\n\n    Combine two dictionaries.",
            "",
            "_forward_impl(self, x):\n        See base class.",
            "Stops the program",
            "Compute the ratio and resize the image to the model height\n    :param img:\n    :param width:\n    :param height:\n    :param model_height:\n    :return:",
            ",",
            "Args:\n        algo_name (str, optional): Name of the algorithm. Defaults to None.\n        score_thresholds (np.ndarray, optional): Thresholds for the score. Defaults to None.\n\n    Returns:\n        dict: Dictionary containing the scores.\n        np.ndarray: Array of the number of steps.\n        np.ndarray: Array of the score thresholds.",
            "",
            "to iterate over the buffers",
            "",
            "Returns the coordinate of the extremum along the given dimension.",
            "(result)",
            "Converts a string to a native Python type.",
            "",
            "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "TODO: refactor",
            ".\n    Args:\n        xs (paddle.Tensor):\n        masks (paddle.Tensor):\n    Returns:\n        paddle.Tensor:",
            "Returns the four corners of the current region as a list of points",
            "",
            "padding function",
            ".\n    Checks if the image is fully within the image.",
            "",
            "Return the parameters for the current model. \n    \n    Returns\n    -------\n    parameters : list\n        A list of the parameters for the current model.",
            "Start a detached process and return the process ID.",
            "Destroys the game object.",
            "(x, style, skip=None) -> torch.Tensor\n        x: input tensor of shape (N, C, H, W)\n        style: style tensor of shape (N, C, H, W)\n        skip: skip tensor of shape (N, C, H, W)\n        return: output tensor of shape (N, C, H, W)",
            "for i in range(len(self._keys)):\n            self._cache[self._keys[i]] = self._bounds[i]",
            "(self, output_file=None,\n                 resume=False, progress_file=sys.stderr)\n\n    Initialize the progress bar.\n\n    Parameters\n    ----------\n    output_file : str, optional\n        File to write progress to. Defaults to sys.stderr.\n    resume : bool, optional\n        Whether to resume from the last saved position. Defaults to False.\n    progress_file : file-like, optional\n        File to write progress to. Defaults to sys.stderr.\n\n    Returns\n    -------\n    None.",
            "for logging in wandb.",
            "for json.dumps()",
            ".format_tb(exc_traceback, limit=None, frame=None,\n                 source_path=None)",
            "Returns\n    -------\n    F.arange(0, len(self))",
            "_summary_",
            "Sets the backend to use for this config.",
            "for unknown types",
            "_init__",
            "Returns a random digit, excluding zero.",
            "access the network access manager",
            "Test that the command is executed on the local machine.",
            "Get the prompt embedding for the given adapter name.",
            ".clear()\n    \n    def _clear(self):\n        self._draw_area.clear()\n        self._draw_area.fill((0, 0, 0))\n        self._draw_area.set_source_rgb(1, 1, 1)\n        self._draw_area.rectangle((0, 0, self._width, self._height))\n        self._draw_area.stroke()\n        self._draw_area.fill()\n        self._draw_area.set_source_rgb(0, 0, 0)\n        self._draw_area.set_font_size(20)\n        self._draw_area.move_to(10, 10)\n        self._draw_area.show_text(\"Hello, world!\")\n        self._draw_area.fill()\n    \n    def _update(self):\n        self._draw_area.show()\n    \n    def _draw_text(self, text):\n        self._draw_area.show_text(text)\n        self._update()\n    \n    def _draw_rect(self,",
            "ResNeXt101 32x8d\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet",
            "Returns the center of the arc.",
            ".",
            "",
            ".\n\n    Returns a normalized version of the iterable.",
            "Download file from remote and return local path.\n    \n    Parameters\n    ----------\n    target : str\n        Remote file path.\n    use_cache : bool\n        Whether to use local cache.\n    \n    Returns\n    -------\n    local_name : str\n        Local file path.",
            ".\n    Registers an agent class with the given name.\n\n    Args:\n        cls (type): The class to register.\n        name (str): The name to associate with the agent class.\n        agent_cls (Type['Agent']): The agent class to register.\n\n    Raises:\n        ValueError: If the agent class is already registered under the given name.\n\n    Example:\n        class MyAgent(Agent):\n            pass\n\n        @register(\"my_agent\", MyAgent)\n        class MyAgent(Agent):\n            pass\n\n        # Now, you can use the agent class as follows:\n        agent = MyAgent()",
            "This method is called when the widget is mounted.",
            "",
            "(self, buffers)\n\n    Initialize the class.\n\n    Args:\n        buffers (list): List of buffers to be used.",
            "Parse a set statement.",
            ".\n\n    Args:\n        path (str): path to the file.\n        ext_map (Optional[Dict[str, List[str]]]): mapping of file extensions to their corresponding classes.\n\n    Returns:\n        str: code representing the file.",
            "Calculate the Euclidean distance between two points",
            "(self, *args, **kwargs):\n        self.done = False\n        self.order = None\n        self.frame_count = 0\n        self.portfolio = None\n\n        self.registered_transforms = {}\n        self.transforms = []\n        self.sources = []\n\n\n        self.slippage = VolumeShareSlippage()\n        self.commission = PerShare()\n\n\n\n        self.initialized = False\n\n\n        self.initialize(*args, **kwargs)",
            "(str, Regularizer) -> NoneType\n    \n    Initializes the Regularizer object.\n    \n    Args:\n        regexes (List[Tuple[str, Regularizer]]): A list of tuples containing the regular expression and the Regularizer.\n    \n    Returns:\n        NoneType: None",
            "Sign an ID token using the testing keys.",
            "Convert a string-like object to a string.\n    \n    Parameters\n    ----------\n    obj : str-like object\n        The object to convert to a string.\n    \n    Returns\n    -------\n    str\n        The converted string.",
            ".",
            "Returns the type of the node.",
            "Shows the status of the bot and its RPC.",
            ".\n    Arguments:\n        opt (OptimizerType): optimizer used during training",
            "Represents the scope of a bot command, covering a specific chat member.",
            ".",
            ".\n    Runs the graph.\n\n    Returns:\n        str: The answer to the prompt.",
            "Forward function\n    \n    Parameters:\n    -----------\n    x : torch.Tensor\n        Input tensor\n\n    Returns:\n    --------\n    torch.Tensor\n        Output tensor",
            "Create a Mel-filters tensor.\n    \n    Args:\n        device (torch.device): The device to create the tensor on.\n        n_mels (int, optional): The number of Mel-filters to create. Defaults to N_MELS.\n    \n    Returns:\n        torch.Tensor: The Mel-filters tensor.",
            "Get video format profile.\n    \n    :param itag: itag of video\n    :type itag: int\n    :return: dict",
            "Adds words from the specified url to the word_set. \n    The word_set must be a set. \n    The url must be a string. \n    The line_function must be a function that takes a string and returns a string.",
            ".",
            "Lookup friendships between the current user and other users.\n    \n    :param user_id: The ID of the user to lookup\n    :param screen_name: The screen name of the user to lookup\n    :return: A list of :class:`~twitter.models.Relationship` objects",
            "_summary_\n\n    Args:\n        jshost (str, optional): _description_. Defaults to None.\n        echarts_template_dir (str, optional): _description_. Defaults to None.\n        force_js_embed (bool, optional): _description_. Defaults to None.\n\n    Returns:\n        _type_: _description_",
            "Creates a SavedSearchDoc object from a SearchDoc object.\n    \n    Args:\n        cls (SavedSearchDoc): The class to create the object from.\n        search_doc (SearchDoc): The SearchDoc object to create the object from.\n        db_doc_id (int, optional): The ID of the document in the database. Defaults to 0.\n    \n    Returns:\n        SavedSearchDoc: The SavedSearchDoc object.",
            "'Call' a note with optional position.\n\n    Parameters\n    ----------\n    x: float\n        The note number to call.\n    pos: Optional[int]\n        The octave position of the note.\n\n    Returns\n    -------\n    str\n        The lab note.\n\n    Examples\n    --------\n    >>> from py_lab import Lab\n    >>> lab = Lab()\n    >>> lab(0)\n    'C'\n    >>> lab(0, 0)\n    'C'\n    >>> lab(0, 1)\n    'D'\n    >>> lab(0, 2)\n    'E'\n    >>> lab(0, 3)\n    'F'\n    >>> lab(0, 4)\n    'G'\n    >>> lab(0, 5)\n    'A'\n    >>> lab(0, 6)\n    'B'\n    >>> lab(0, 7)\n    'C'\n    >>> lab(1, 0)\n    'C#'\n    >>> lab(1, 1)\n    'D#'\n    >>> lab(1, 2)",
            "Args:\n\n    inputs (torch.Tensor): input tensor\n\n    Returns:\n\n    torch.Tensor: output tensor",
            "Gets all songs from the database",
            "This function will encrypt or decrypt a string\n    :param text: The text to be encrypted or decrypted\n    :param Cipher: The cipher to be used for encryption or decryption\n    :param greppable: Whether or not the text is greppable\n    :param debug: Whether or not to print debug information\n    :return: The decrypted or encrypted text",
            "Function: adaClassify\n    \n    Description:\n    \n    Parameters:\n    \n    Returns:",
            "",
            "_summary_\n\n    Args:\n        cls (type): _description_\n        v (Union[str, List[str], Set[str]]): _description_\n\n    Returns:\n        Union[str, List[str], Set[str]]: _description_",
            "Ungroup a nested grouping expression.\n    \n    >>> ungroup(\"(a b c)\")\n    'abc'\n    >>> ungroup(\"(a (b c) d)\")\n    'abcdc'\n    >>> ungroup(\"(a (b c (d e f)) g)\")\n    'abdcdefg'\n    >>> ungroup(\"(a (b (c (d e (f g)))) h)\")\n    'abcefgdh'\n    >>> ungroup(\"(a (b (c (d (e (f (g (h)))))))))\")\n    'abcefgdh'\n    >>> ungroup(\"(a (b (c (d (e (f (g (h)))))))))\")\n    'abcefgdh'\n    >>> ungroup(\"(a (b (c (d (e (f (g (h)))))))))\")\n    'abcefgdh'\n    >>> ungroup(\"(a (b (c (d (e (f (g (h)))))))))\")\n    'abcefgdh'\n    >>> ungroup(\"(a (b (c (d (e (f (g (h)))))))))\")\n    'abce",
            ".dispatch(self, inp)\n\n    Dispatch the inp to the dispatchers.\n\n    Args:\n      inp: A Tensor.\n\n    Returns:\n      A Tensor.",
            "Build a backbone.",
            "Fonction qui permet de randomiser le nombre d'\u00e9l\u00e9ments d'une liste",
            "_to_dict_",
            "Prepare sample text for model. \n    \n    Args:\n        example (dict): Example dictionary with prompt and completion. \n        \n    Returns:\n        str: Prepared text.",
            "Kick off the game.",
            "Capture logs from the `up` method and return a list of the events.",
            "@param problem_name:\n    @param data_dir:\n    @param output_dir:\n    @param hparams:\n    @param epoch:\n    @return:",
            "Forward pass of the model.\n\n    Args:\n        x: [batch_size, input_size]\n    Returns:\n        out: [batch_size, output_size]",
            ".\n    Override to save a previous pk to the config.",
            ".",
            "Return the number of items in the list.",
            ".",
            "Return a string representation of this object.",
            ":param args: \n    :param kwargs: \n    :return:",
            "Deletes a model from SageMaker.\n    \n    Args:\n        model_name (str): The name of the model to delete.\n    \n    Returns:\n        str: An empty string.",
            "",
            ".",
            "",
            "Gets a token for the Microsoft Graph API.",
            "Add a KnowledgeFile to Milvus.\n    \n    Args:\n        kb_file (KnowledgeFile): The KnowledgeFile to be added.\n    \n    Returns:\n        bool: True if the KnowledgeFile was added successfully, False otherwise.",
            "Test that we can scrape all the docs",
            "(self, hook, file_args):\n        Run a hook.",
            ".",
            "Selects rows matching the given regex.\n    \n    Args:\n        regex (str): The regex to match against.\n        columns (list): The columns to select.\n        unselect (bool): If True, unselect rows that match the regex.\n    \n    Returns:\n        None",
            "x: [batch_size, seq_len, emb_dim]\n    emb: [emb_dim, emb_dim]",
            "This function returns the background image to be used by the bot.",
            "Iterate over all files in a list of paths.\n    \n    Args:\n        paths (list): List of paths to search.\n    \n    Yields:\n        str: Path to a file that ends with .py.",
            "for stock_day data, the init_data_by_df should be a DataFrame",
            "This method updates the data in the database.\n    \n    Args:\n        data (dict): The data to be updated.",
            ".\n    Loads games from the given directory.",
            "Returns the content between start and end in string.",
            ".",
            "Test the get method",
            "'Execute an ADB command on the device.\n\n    :param command: The command to execute.\n    :return: The output of the command.",
            ".",
            ".\n    Call the model.\n\n    Args:\n        input_sequence: The input sequence.\n        training: If True, the model is trained.\n        mask: The mask.\n\n    Returns:\n        The output sequence.",
            "",
            ".",
            "Return today's date in YYYY-MM-DD format.",
            "This is an example of how to input data into the model.",
            "Save the document.",
            "Checks if a string has data.\n    \n    Args:\n        data (str): The string to check.\n    \n    Returns:\n        bool: True if the string has data, False otherwise.",
            ".\n    Load the prompt cache from disk.",
            "Get the cached response logic.",
            "",
            "_summary_\n\n    Args:\n        name (_type_): _description_\n\n    Returns:\n        _type_: _description_",
            "Return the simulator's name.",
            ".\n    Report the exception to Sentry.",
            ".",
            ".",
            "Returns the range of the given range.",
            "",
            "()",
            "2022-02-13 15:28:35.707000 199108089494737832 [INFO]\n    def _normalized_numbers(self, sentence):",
            "Args:\n        model (str or Path): Path to model.\n        task (str or None): Task to use.\n        verbose (bool): Verbose.",
            "Create a method that responds with a 405 Method Not Allowed.",
            "Validates the exchange input.",
            "Decrypt the encrypted credhist.encrypted data with the given key",
            "Return the HTML representation of the widget.",
            "Gets the message for a given status.\n    \n    Args:\n        cls (ScanStatus): The ScanStatus class.\n        status (int): The status to get the message for.\n    \n    Returns:\n        str: The message for the given status.\n    \n    Raises:\n        ValueError: If the status is not a valid ScanStatus.",
            ".\n    Get a page boundary for a given address.\n\n    :param addr:\n    :return:",
            "_init_",
            ".\n    Reads a range of addresses from the specified address space.\n    :param start: The start address.\n    :param end: The end address.\n    :param addr_space: The address space to read from.\n    :return: A list of addresses.",
            "This function finds the index of the minimum distance between the \n    input zi and the corresponding LM. \n    \n    Parameters\n    ----------\n    xAug : array_like\n        The augmented state vector\n    PAug : array_like\n        The augmented state covariance matrix\n    zi : array_like\n        The input vector\n    \n    Returns\n    -------\n    minid : int\n        The index of the minimum distance",
            "Initialize centroids randomly\n    \n    Parameters\n    ----------\n    X : numpy.ndarray\n        Input data matrix.\n    \n    Returns\n    -------\n    centroids : numpy.ndarray\n        Centroids.",
            "Set the feed urls for the feed extractor.",
            ".",
            "_recursive_children(element, tag: str = None, _results=None)\n    \n    Recursively returns a set of all children of element.\n    \n    Args:\n        element: Element to recursively search for children of.\n        tag: Optional tag name to filter results by.\n        _results: Optional set to store results in.\n    \n    Returns:\n        Set of all children of element.",
            "Create the widget for the input.",
            "_init__\n\n    Args:\n        df_lists (list):",
            "",
            "",
            "Decorator for registering a resource body class.\n    \n    :param cls: The class that will be registered.\n    :param resource_body_cls: The class that will be registered.\n    :return: The registered class.",
            "(self)",
            "Checks if the given value is a valid transaction hash.\n\n    :param value: The value to check.\n    :type value: str\n\n    :raises RPCError: If the given value is not a valid transaction hash.",
            "- Returns the URL of the API Gateway for a given stage.\n\n    :param stage_name: The name of the stage.\n\n    :returns: The URL of the API Gateway.\n\n    :rtype: str",
            "(self, x):",
            ".set_ignore_users(self, users: list = [])\n\n    Sets the ignore users for the bot.\n\n    Args:\n        users (list): A list of users to ignore.\n\n    Returns:\n        self: The bot instance.",
            "Extract features from the model.\n    \n    Args:\n        args (tuple): Arguments to pass to the model.\n        kwargs (dict): Keyword arguments to pass to the model.\n\n    Returns:\n        tuple: Extracted features.",
            "",
            ".from_keypair(cls, keypair) -> cls\n\n    Create a new instance from a keypair.",
            ".",
            ".\n    Return the offset of the key in the chunk.\n\n    :param key: The key to search for.\n    :type key: str\n    :rtype: int",
            "(self, element):",
            ".",
            "Returns:\n        bool: True if the request was successful, False otherwise.",
            ".\n    Initialize the DecodeCache.",
            ">>> queue = queue(lambda x: x*2)\n    >>> queue(1)\n    2\n    >>> queue(2)\n    4\n    >>> queue(3)\n    6\n    >>> queue(4)\n    8\n    >>> queue(5)\n    10\n    >>> queue(6)\n    12\n    >>> queue(7)\n    14\n    >>> queue(8)\n    16\n    >>> queue(9)\n    18\n    >>> queue(10)\n    20\n    >>> queue(11)\n    22\n    >>> queue(12)\n    24\n    >>> queue(13)\n    26\n    >>> queue(14)\n    28\n    >>> queue(15)\n    30\n    >>> queue(16)\n    32\n    >>> queue(17)\n    34\n    >>> queue(18)\n    36\n    >>> queue(19)\n    38\n    >>> queue(20)\n    40\n    >>> queue(21)\n    42",
            ":param env: \n    :param skip:",
            ".",
            "Calculate the beta values for a given alpha_bar.\n\n    Args:\n        num_diffusion_timesteps (int): Number of diffusion timesteps.\n        alpha_bar (function): Function that returns the alpha_bar value for a given t.\n        max_beta (float, optional): Maximum beta value to use. Defaults to 0.999.\n\n    Returns:\n        np.ndarray: Array of beta values.",
            ".\n\n    Returns:\n\n        str: The config reference.",
            "",
            ".\n    Fits the model to the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Data points.\n    Y : np.ndarray\n        Data labels.\n\n    Returns\n    -------\n    None",
            "Sets the model type to YOLOv3.",
            "Returns the encoding of the file.",
            ".",
            ".\n\n    Return an iterator over the buffers.",
            "This is a docstring.",
            "(self, driver):",
            "Apply a random horizontal flip to the image.\n    \n    Parameters\n    ----------\n    img : torch.Tensor\n        Input image.\n    \n    d : int, optional\n        The dimension of the image to flip. Default is 0.\n    \n    Returns\n    -------\n    torch.Tensor\n        The flipped image.",
            "(Clip) Class for CLIP image retrieval.\n    Args:\n        source (str): Path to source image.\n        results (int): Number of results to return.\n        device (str): Device to use.",
            ".",
            ".\n    Returns a QueryRegex object for this key.",
            "Delete a tensor by name.\n    \n    Args:\n        name (str): The name of the tensor to delete.",
            "_parse_result(self, d)\n\n    Parse a result from the server.\n\n    :param dict d: the result dict\n    :return: the parsed result\n    :rtype: dict",
            "Parse level content from text\n    \n    :param text: Text to parse\n    :param pattern: Pattern for searching\n    :return: List of tree objects",
            "Clear all jobs.",
            ".",
            "Highlights the text in the given Text widget.\n    \n    Args:\n        text (Text): The Text widget to highlight.\n    \n    Returns:\n        None",
            "Remove the desktop shortcut for the selected game.",
            ".\n    Backward pass.",
            "Expand a tensor to a new shape.\n    \n    Parameters\n    ----------\n    value : tensor\n        The tensor to expand.\n    newdim : int\n        The new dimension to expand to.\n    \n    Returns\n    -------\n    tensor\n        The expanded tensor.",
            "Return a string representation of the PdfInfo object.",
            "Timeout decorator",
            "Close the current tab when the middle mouse button is pressed.",
            "Returns:\n        Dict[str, Any]:",
            ".",
            ".\n    @param random: the random number generator\n    @param cells: the cells\n    @param connections: the connections\n    @return: the least used cell",
            "_start_project\n\n    Starts a project with the given idea.\n\n    Args:\n        idea (str): The idea to start the project with.\n        role (str, optional): The role of the person starting the project. Defaults to \"BOSS\".\n        cause_by (BossRequirement, optional): The requirement that caused the project to start. Defaults to BossRequirement.\n\n    Returns:\n        None",
            "Test that the function returns a pathlib.Path object.",
            "'patch_environment' is a generator function that patches the environment\n    variables with the values passed in the `kwargs` dictionary.\n\n    Args:\n        **kwargs (dict): A dictionary containing the environment variables to be\n        patched.\n\n    Yields:\n        None\n\n    Example:\n        >>> patch_environment(FOO=1, BAR=2)\n        >>> os.environ['FOO'] == '1'\n        True\n        >>> os.environ['BAR'] == '2'\n        True",
            "Save an event to the database.\n    \n    :param cache_key: The cache key to use for the event.\n    :param data: The event data to save.",
            "This function calculates the factorial of a number. \n    \n    Args:\n        num (int): The number for which the factorial is to be calculated.\n        \n    Returns:\n        int: The factorial of the number.",
            "Backward step",
            ", draw_points(self, ax, data, center)",
            "",
            ".",
            "(float, float, float) -> float\n\n    Returns the log-cumulative distribution function of the\n    PolyaGamma distribution at a given value.\n\n    Arguments:\n        value (float): the value at which the CDF is evaluated\n        h (float): the shape parameter\n        z (float): the scale parameter\n\n    Returns:\n        float: the log-cumulative distribution function of the\n        PolyaGamma distribution at the given value\n\n    Raises:\n        ValueError: if the value is less than 0 or if h <= 0\n\n    Examples:\n        >>> logcdf(0.5, 2.0, 3.0)\n        -1.2328174798463305\n        >>> logcdf(1.0, 2.0, 3.0)\n        -1.2328174798463305\n        >>> logcdf(1.5, 2.0, 3.0)\n        -1.2328174798463305\n        >>> logcdf(2.0, 2.0",
            "Get all documents in a KB.\n\n    Args:\n        file_name (str): File name to search.\n        metadata (Dict): Metadata to filter documents.\n\n    Returns:\n        List[Document]: List of documents.",
            "",
            "Return a string representation of the PdfInfo object.",
            "Deletes a game from the database",
            "Unzip a file entry from a zip file.\n    \n    :param zip_ref: A ZipFile object.\n    :param file_entry: A ZipFile.ZipInfo object.\n    :param target_dir: The directory to extract the file to.\n    :return: The path to the extracted file.",
            "Apply the filter to the image\n    \n    Parameters\n    ----------\n    img : ndarray\n        Input image\n    factor : int, optional\n        Rotation factor. The default is 0.\n    \n    Returns\n    -------\n    ndarray\n        Filtered image",
            ".",
            "Convert a Python object to a string safely. \n    \n    This function is useful for converting objects to a string, \n    and also for converting objects to a string, and then \n    passing the result to a function that expects a string.",
            "(self, result=None, verbose=False, print_all=False)",
            "Finds an xpath attribute in a given node.\n    \n    @param node: a BeautifulSoup node\n    @param xpath: xpath expression\n    @param key: attribute name\n    @param val: attribute value\n    @return: a BeautifulSoup node",
            "def reduce_CreateInheritableAnnotation(self, *kids):",
            "_watchedExtensions",
            "Show the toolbar only for the internal IP addresses.",
            "",
            "",
            "for the title of the game",
            "Extract all text from the regex in the current document.",
            "Sort the hits by score.",
            "_get_symbol_by_name_from_app_module_",
            ".\n    Args:\n        observation: Observation to predict actions for.\n        deterministic: Whether to return the deterministic actions or the\n            actions sampled from the distribution.\n    Returns:\n        Actions predicted by the model.",
            "Preconvert items to appropriate types.",
            "(self, cfg):",
            "Returns a dict of environment variables.",
            "Test clone method.",
            "img1_path : str\n        path of image to be processed\n    img2_path : str\n        path of image to be processed",
            "",
            ",\n    Args:\n        kernel_size (int or tuple): Size of the convolving kernel.\n        stride (int or tuple): Stride of the convolution.\n        padding (int or tuple): Padding added to both sides of the input.\n        data_format (str): Data layout format of the input.\n        device (str or None): Device on which the layer will be created.\n        dtype (str or None): Data type of the input.",
            "Given a row, return the tokens, the number of tokens, and the token ranges",
            "This function takes a string as input and returns the corresponding payload name.",
            ".\n    Calls the API and returns the result.",
            "Align the current mobject on the border of the frame\n    \n    Parameters\n    ----------\n    direction : tuple\n        Direction to align the mobject on the border\n    buff : int\n        Buffer around the mobject to align\n    \n    Returns\n    -------\n    mobject\n        The aligned mobject",
            "Return a list of strings representing the names of the slots used by this \n    optimizer.",
            "Initialize the UserIO object.\n\n    Parameters\n    ----------\n    logins : dict\n        A dictionary of logins to users.\n    ins : file-like object\n        The input stream.\n    out : file-like object\n        The output stream.",
            "Parameters\n    ----------\n    kernel_type : str\n        kernel type\n    dim : int\n        dimension of the data\n    lamb : float\n        regularization parameter\n    gamma : float\n        parameter for the kernel",
            "Test for bad ratio.",
            "dfs(source,visited)",
            ".",
            "Extract the best match from a list of choices,\n    with the given query and processor.\n    \n    Args:\n        query: the query to be matched\n        choices: a list of choices\n        processor: a function to process the query\n        scorer: a function to score the choices\n        score_cutoff: the cutoff score to consider a choice a match\n    \n    Returns:\n        The best match from the list of choices, or None if no match is found.",
            ".\n    Backward pass.",
            "Prunes heads of the model.",
            "",
            ".\n    Decorator for function.",
            "Convert a JSON object to an object of the correct type.",
            ".",
            ".\n    Raises an exception of the given type.\n    :param exception_type: The exception type to raise.\n    :return: True.",
            "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "Return an iterator over the list's elements.",
            ".",
            "Gets a proof for a given address.\n    \n    Args:\n        address (str): Address to get proof for.\n    \n    Returns:\n        list: List of transactions.",
            ":type s: str\n    :type k: str\n    :rtype: str",
            "Returns the OpSi fleet number.",
            "(self, path: Union[str, Path], parent_path: \"DisplayablePath\", is_last: bool)",
            "Write data to the output.\n    \n    Args:\n        data (str): The data to write.\n    \n    Returns:\n        None",
            "Returns the url of the emoji",
            "Prompts the user for confirmation.\n    \n    :param question: The question to ask the user.\n    :type question: str\n    :return: True if the user confirmed, False otherwise.\n    :rtype: bool",
            ".",
            "for multiplication with a right-hand Tensor",
            "\u83b7\u53d6\u5fae\u535a\u5185\u5bb9\n    :param info:\n    :param is_original: \u662f\u5426\u662f\u539f\u521b\u5fae\u535a\n    :return:",
            "_summary_\n    Save model for HF Trainer\n    Args:\n        trainer (transformers.Trainer): The HF Trainer instance\n        output_dir (str): The output directory to save the model",
            "Returns the next item in the sequence.",
            "Test the list_courses method.",
            "Initialize the simulation.\n\n    Parameters\n    ----------\n    init_points : int\n        Number of points to initialize the simulation.",
            "This function raises an exception if dash events are used.",
            ".",
            "_extract_code(self, response: str, separator: str = \"```\") -> str:\n\n    Extract the code from the response.\n\n    Args:\n        response (str): The response from the API.\n        separator (str, optional): The separator used to separate the code. Defaults to \"```\".\n\n    Returns:\n        str: The code extracted from the response.\n\n    Raises:\n        NoCodeFoundError: If no code is found in the response.\n\n    Example:\n        >>> response = \"```python\\nprint('Hello, World!')\\n```\"\n        >>> code = _extract_code(response)\n        >>> print(code)\n        print('Hello, World!')",
            ".",
            "Return the path to the output directory",
            ".",
            "Send the payload to the server.\n    \n    @param payload: The payload to send.\n    @type payload: dict\n    @return: The response from the server.\n    @rtype: dict",
            "(init) Initialize the class",
            "Print a message to the standard output stream.",
            "",
            "Converts a string to a continuation align style. \n    \n    Parameters\n    ----------\n    s : str, optional\n        The string to convert. If ``None``, the default style is used.\n    \n    Returns\n    -------\n    str\n        The continuation align style.\n    \n    Raises\n    ------\n    ValueError\n        If the input string is not a valid continuation align style.",
            "'Cancel a job.",
            ".\n\n    Args:\n        kv (torch.FloatTensor): The key-value pairs to update.\n        inference_params (InferenceParams): The inference parameters.\n\n    Returns:\n        None",
            "(self, r):",
            ".",
            "Return the size of the block that is currently being written to.",
            "@brief: Handles the <Tab> key\n    @param event: The event object",
            "Generator class for generating names",
            "Return the number of pages in the document.",
            ".add_column(self, name, data)\n\n    Adds a new column to the DataFrame.\n\n    Parameters\n    ----------\n    name : str\n        Name of the column to add.\n    data : ndarray\n        Data to add to the column.",
            "Args:\n        predictions (torch.Tensor): Predictions of the model\n        gold_labels (torch.Tensor): Gold labels of the data\n        mask (Optional[torch.Tensor], optional): Mask of the data. Defaults to None.\n\n    Returns:\n        torch.Tensor: Accuracy of the model",
            "_create_vision_transformer",
            "Computes the loss for the given result and argd.\n    \n    Args:\n        cls: The loss function to use.\n        result: The result to compute the loss for.\n        argd: The argd to compute the loss for.\n    \n    Returns:\n        The loss for the given result and argd.",
            "Returns the number of units in the output layer of the network.",
            "Returns a list of child prefixes for the given prefix",
            "Bans the given IP address.",
            "Args:\n        im (np.ndarray): Image to be normalized\n        im_info (dict): Metadata of the image\n    Returns:\n        np.ndarray: Normalized image",
            "",
            ".",
            ".\n    Checks if a given image is partly within the image.\n\n    Args:\n        image (np.ndarray): The image to check.\n\n    Returns:\n        bool: True if the image is partly within the image, False otherwise.",
            ".\n    >>> from_str(\"1234567890\")\n    Device(DeviceType.PHONE, 1234567890)",
            ".",
            "for numpy arrays",
            "Creates a regular link.",
            ".\n    Predict on a single image.\n    Args:\n        img (np.ndarray): Image to predict on.\n    Returns:\n        np.ndarray: Predicted label.",
            ",X,y) -> self\n\n    Fits the model to the data X and returns self.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix}, shape = [n_samples, n_features]\n        Training data.\n\n    y : array-like, shape = [n_samples]\n        Target values.\n\n    Returns\n    -------\n    self : object",
            "Save the model checkpoint.",
            "Remove SQL from the question.",
            "for the number of failures to trigger a failure.",
            "\u83b7\u53d6\u89c6\u9891\u7684id",
            "Calculates the distance between the album and the mapping.",
            "(y_true, y_pred, sample_weight) -> float",
            "Gets an object from the item.",
            "Forward function for the Transformer model.\n    \n    Parameters:\n    x (paddle.Tensor): Input tensor.\n    x_mask (paddle.Tensor): Mask tensor for input tensor.\n    offset (int): Offset for positional encoding.\n    \n    Returns:\n    x (paddle.Tensor): Output tensor.\n    pos_emb (paddle.Tensor): Positional encoding tensor.\n    x_mask (paddle.Tensor): Mask tensor for output tensor.",
            "_is_same_host_impl\n\n    :param url:\n    :return:",
            "",
            "Returns a Path object for the given environment variable key.\n    If the key is not found in the environment, and default is not provided,\n    then None is returned.",
            ".\n    Args:\n        flatIdx (int): Flat index of the neuron.",
            "Add a flow to the store and notify any listeners.",
            "",
            ".\n\n    Send attachment to Telegram.\n\n    :param chat_id: chat_id.\n    :param notify_type: notify type.\n    :param attach: attachment.\n    :return: True if success, False otherwise.",
            "Modify config file.\n    \n    Args:\n        path (str): Path to config file.\n        commit (bool): Commit changes to git repository.",
            "Register the public key for the server's ephemeral key exchange.",
            "This is a function that takes a string and a state and returns a string.",
            "\u68c0\u67e5\u9879\u76ee\u662f\u5426\u9700\u8981\u66f4\u65b0\n    \n    :param project_name: \u9879\u76ee\u540d\u79f0\n    :param updatetime: \u9879\u76ee\u66f4\u65b0\u65f6\u95f4\n    :return: \u662f\u5426\u9700\u8981\u66f4\u65b0",
            "Initialize the encoder CNN model.\n    \n    Args:\n    embed_size (int): The dimension of the embedding vector.\n    \n    Returns:\n    None",
            ", returns the cost of a path from start to goal.",
            "Display a message in markdown format.",
            ".",
            "Build DataParallel or DistributedDataParallel.\n    \n    Args:\n        model (nn.Module): The model to be built.\n        device (str): The device to be used.\n        dim (int): The dimension of the data.\n        *args: Additional arguments.\n        **kwargs: Additional keyword arguments.\n    \n    Returns:\n        nn.DataParallel or DistributedDataParallel.",
            "_summary_\n\n    Args:\n        addr (_type_, optional): _description_. Defaults to None.\n        verbose (_type_, optional): _description_. Defaults to True.\n\n    Returns:\n        _type_: _description_",
            "forward function",
            "for study_id",
            "Deletes an item from the dictionary. \n    \n    Args:\n        key (str): The key of the item to delete.",
            "",
            "Returns the maximum sequence length in the dataset.",
            "(self, buffers)\n\n    Initialize a new buffer object.\n\n    :param buffers: a list of buffers",
            "_summary_\n    \n    _description_\n    \n    Args:\n        year (int): _description_\n        quarter (int): _description_\n    \n    Returns:\n        _type_: _description_",
            "this function check if number is even or odd\n    \n    :param number: int\n    :return: bool",
            "\u6d4b\u8bd5\u9759\u6001\u4ee3\u7406",
            "This function sets the model for the environment.\n    \n    Args:\n        model (str): The name of the model.\n        \n    Raises:\n        ValidationError: If the model is not set correctly.",
            "@return: a list of trackers",
            ".test_cleanup(self):",
            "for each time step, calculate the top-k predictions",
            "Args:\n        bboxes (Tensor): [x1, y1, x2, y2]\n        img_shape (Tuple): (height, width)\n        scale_factor (float): scale factor\n        flip (bool): whether flip the bbox\n    \n    Returns:\n        Tensor: [x1, y1, x2, y2]",
            ".\n\n    Return True to pause the game.",
            ".\n    Returns the text of the cell.",
            "(float)\n    Computes the reward for the current sequence.\n\n    Args:\n        output_sequence (torch.Tensor): The output sequence of the model.\n        output_sequence_mask (torch.Tensor): The mask for the output sequence.\n\n    Returns:\n        torch.Tensor: The reward for the current sequence.",
            "(str) -> str\n\n    Generate a new password.",
            "_summary_\n\n    Args:\n        *args (str): _description_\n        prompt_type (type[str] | type[int] | None, optional): _description_. Defaults to None.\n        **kwargs: _description_\n\n    Returns:\n        str: _description_",
            ".",
            "Returns True if the given record matches the components of this\n    matcher.",
            ".",
            "Returns the hyperparameters for the model.",
            "",
            "This function will update the latest price of all the BOMs",
            "Zeroes the gradients for all parameters in this module.",
            ".\n    Returns:\n        str: username",
            "Update forward references in a class.\n\n    .. versionadded:: 3.8\n\n    .. versionchanged:: 4.0\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.1\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.2\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.3\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.4\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.5\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.6\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.7\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. versionchanged:: 4.8\n\n        This function now takes a local namespace as an optional\n        argument.\n\n    .. version",
            "Train the neural network using backpropagation.\n\n    Arguments:\n    data -- a list of tuples (x, y) to train the neural network with\n    iterations -- number of times to train the neural network\n    rate -- learning rate of the neural network\n    momentum -- momentum of the neural network",
            "Return the url of the current page.",
            "Convert a value to the Python equivalent.",
            ".",
            "Update budget",
            "for start tag",
            "(self, fullname, path=None, target=None) -> ModuleSpec | None:",
            ":type n: int\n    :rtype: int",
            "Return the maximum number of processes that can be run in parallel",
            "Update status of the job",
            "_test_cache_categories",
            "Read a numpy array from a file.",
            "Deserialize a ciphertext blob into a Ciphertext object.\n    \n    Args:\n        ciphertext_blob (bytes): The ciphertext blob to deserialize.\n    \n    Returns:\n        Ciphertext: The deserialized ciphertext object.",
            ".\n    Args:\n      experiment_id: An integer.\n    Returns:\n      An Experiment object.",
            "Returns a readable representation of the object.",
            "Extract all sections of markdown document.\n\n    :param markdown: Markdown document.\n    :return: List of sections.",
            ".set(self, logicalId, resource)\n\n    Set a resource.\n\n    Args:\n        logicalId (str): Logical ID of the resource.\n        resource (dict or SamResource): Resource data.",
            "Create embedding matrix for word embeddings.",
            "List models.",
            "",
            "Update the label map path.",
            "Save a query in redis",
            "Initialize the TAESD model.\n\n    Args:\n        encoder_path (str, optional): Path to the encoder model weights. Defaults to \"taesd_encoder.pth\".\n        decoder_path (str, optional): Path to the decoder model weights. Defaults to \"taesd_decoder.pth\".",
            "Sends telemetry data to the server.\n    \n    :param log_data: Whether to log the data. Defaults to True.\n    :type log_data: bool\n    :return: None",
            "Disable adapter layers for the specified adapter.\n    \n    Args:\n        self (PromptTrainer): The PromptTrainer instance.\n        \n    Yields:\n        None",
            "Convert pcm to silk\n    \n    Parameters\n    ----------\n    pcm_path : str\n        path to pcm file\n    silk_path : str\n        path to silk file\n    \n    Returns\n    -------\n    None",
            "",
            "",
            "Check that the request is a valid SAML request.",
            "_check_success_\n\n    This function will check if the target is vulnerable.",
            "Save model checkpoint.",
            "for attribute in self.attributes",
            "Deletes a conversation by its id.\n\n    Args:\n        convo_id (str): The id of the conversation to delete.\n\n    Returns:\n        None",
            "Returns a queryset of all the objects that this user can see.",
            "Constructor for the Image class.",
            "",
            "Return the name of the course staff group for the given location.",
            ".",
            "for each x in xs, return the density at that point.",
            "Saves a generated sample from the validation set\n\n    :param batches_done: integer, number of batches done so far\n    :return:",
            ".",
            "Floating point types.\n\n    Parameters\n    ----------\n    endianness : {'?', 'little', 'big'}\n        Endianness of the data.\n    sizes : tuple\n        Sizes of the data.\n\n    Returns\n    -------\n    dict\n        Dictionary of floating point types.",
            ".",
            "for the organization",
            "Return the maximum sequence length for the model.",
            ".",
            "(optional) Set device to use for averaging.",
            "Initialize the class with the following attributes:\n    \n    name: The name of the program.\n    linux_command: The Linux command to run the program.\n    windows_command: The Windows command to run the program.",
            "Get all unarchived folders from the snapshots.",
            "Calculate the normal KL divergence between two distributions.\n    \n    Args:\n        mean1 (th.Tensor): Mean of the first distribution.\n        logvar1 (th.Tensor): Log variance of the first distribution.\n        mean2 (th.Tensor): Mean of the second distribution.\n        logvar2 (th.Tensor): Log variance of the second distribution.\n    \n    Returns:\n        th.Tensor: The normal KL divergence between the two distributions.",
            "(Tensor) -> Tensor\n\n    Performs a forward pass through the network.\n\n    Args:\n        tensor_input (Tensor): Input tensor to the network\n\n    Returns:\n        Tensor: Output of the network",
            "Create a new object from a mapping.",
            ".",
            "Compute the maximum norm regularization term for weights.\n    \n    Args:\n        weights: A `Tensor`.\n        scale: A `Tensor`.\n    \n    Returns:\n        A `Tensor`.",
            "This function is a test function for the check function\n    \n    :param generic_target: GenericTarget object\n    :type generic_target: GenericTarget\n    :return: True if the check function is working correctly\n    :rtype: bool",
            "Returns the value of the given key in the object. \n    If the key is not found, returns the default value of the object.",
            "(self, number) -> Window\n\n    Returns the window with the given number.",
            "",
            "",
            "",
            "Test that the upgrade packages option works with no existing file",
            "Stop all jobs",
            ".",
            ".\n\n    :param kwargs:\n    :return:",
            "Set the output keys for all datasets in the list.\n    \n    Parameters\n    ----------\n    datasets : list of Dataset objects\n        The list of datasets to set the output keys for.\n    output_keys : list of str\n        The list of output keys to set.\n    \n    Returns\n    -------\n    None",
            ":param color:\n    :param opacity:\n    :param color_lookup:",
            "Get the value of a variable at a given offset.",
            "Removes all tasks from the queue that are older than the limit.",
            "This function is used to enhance the connection pool of requests. \n    \n    Parameters:\n    session (requests.Session): The session object to be enhanced.\n    pool_connections (int): The number of connections in the pool.\n    pool_maxsize (int): The maximum number of connections in the pool.\n    max_retries (int): The maximum number of retries for a failed request.\n    \n    Returns:\n    None",
            "",
            "(int) -> int",
            ".\n    Returns:\n        Dict[str, Dict]:",
            "_get_dev_examples.",
            "(self, method=None, url=None, headers=None, files=None,\n        data=None, params=None, auth=None, cookies=None, hooks=None, json=None)",
            "_process_all_forms",
            ".\n    \n    Apply a function to all audio/mask channels of the audio/mask\n    \n    Parameters\n    ----------\n    time_func : callable\n        Function to apply to all channels\n    apply_to : list\n        Channels to apply the function to\n    keep_duration : bool\n        Keep the duration of the audio\n    \n    Returns\n    -------\n    Audio\n        Audio object with the modified channels",
            "Load the record from the library.",
            "Parses a date string into a datetime object. \n    \n    Args:\n        date_string (str): The date string to parse.\n    \n    Returns:\n        datetime: The parsed datetime object.",
            "Test the default mode for files and directories.",
            "_graphs_view_",
            "A multi-layer perceptron network.\n    \n    Arguments:\n    num_layers: Number of hidden layers.\n    num_hidden: Number of hidden units.\n    activation: Activation function.\n    \n    Returns:\n    A function that takes `X` and returns `logits`.",
            "Sets the display name of the user.\n    \n    Args:\n        display_name (str): The new display name of the user.\n    \n    Raises:\n        RuntimeError: If the display name can be set only before the work has started.",
            "_test_individual_boss_on_unit_test_",
            "Returns a list of all the keys in the config file.",
            "for extracting the tar file",
            ".\n    Deletes a file or directory on a remote share.\n    :param shareName: The name of the share to delete the file from.\n    :param pathName: The path to the file or directory to delete.\n    :return: True if the file or directory was deleted successfully, False otherwise.",
            "Clear all jobs.",
            ".contains()",
            "@brief \u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6\n    @param event \u4e8b\u4ef6",
            ".\n    :return:\n    :rtype:\n    :raises:",
            "",
            "Create a new game in memory",
            "@param msg: \n    @return:",
            ".\n\n    Args:\n      blocks_args: A list of dictionaries containing the arguments for each\n        block.\n      global_params: A dictionary containing the arguments for the global\n        block.",
            "Find all snippet files for a given file type.",
            "Sets validation data for the model.",
            ".\n    Returns:\n        str: A string representation of the configuration object in JSON format.",
            "Creates a new TypedTuple object from an iterable.\n    \n    Args:\n        item_type: The type of the items in the iterable.\n        iterable: The iterable to create the TypedTuple from.\n    \n    Returns:\n        A TypedTuple object.",
            "'test_hosts_decorator_overrides_env_hosts'",
            "() -> None:",
            ".\n    Post release hook.",
            "_fields getter",
            "Count the number of occurrences of a given value in the view.",
            "",
            "Returns a dict representation of this counter.\n    \n    :param get_value: a callable that, given a Counter, returns the value to be returned by get()\n    :type get_value: function\n    :return: a dict representation of this counter\n    :rtype: dict",
            ".",
            "Decode a base62 encoded string into a bytes object.",
            "(self, nodes, thunks, pre_call_clear)",
            "Opens a file in ASCII mode and returns a file object.",
            "21FF0B\\x03\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0",
            "(float)\n\n    Returns the negative log-likelihood of the observations given the parameters.",
            ".\n    Test the function count_components",
            "This method is called by the game to choose a match.",
            "This function checks the accuracy of the model on the test set.",
            "Get the page content for a given topic.\n    \n    Returns a dictionary with the following keys:\n        topic: The topic to be searched.\n        topic_type: The topic type.\n        answer: The page content.\n        format: The format of the answer.",
            "(self, dataloader, current_iter, tb_logger, save_img=False)\n    Args:\n        dataloader:\n        current_iter:\n        tb_logger:\n        save_img:",
            "_summary_\n\n    Args:\n      raw_features: A `tf.train.Example` or `features.FeatureDict`.\n      random_seed: A random seed for shuffling.\n\n    Returns:\n      A `features.FeatureDict` with processed features.",
            "Register a model class.\n    \n    This function is intended to be used in a model class's __init__ method.\n    \n    Parameters\n    ----------\n    name: str\n        The name of the model.\n        \n    Returns\n    -------\n    Type\n        The model class.",
            "",
            ".encode(self, x: torch.Tensor, n_q: tp.Optional[int] = None, st: tp.Optional[int] = None) -> torch.Tensor\n    \n    Encode x into codes.\n    \n    Args:\n        x: input tensor of shape (B, T, C)\n        n_q: number of codes to encode.\n        st: starting index.\n    \n    Returns:\n        codes: encoded tensor of shape (B, T, n_q, C)",
            "_Get all children of this element.",
            "(generator)",
            ".",
            "Close the TensorBoard writer.",
            "Returns the token limit for the given model.",
            "_get_param_groups_helper_method_",
            ".\n    Returns:\n        int: the number of leaf nodes in the tree.",
            "This function calculates the sum of the squares of the first n natural numbers.\n    \n    Parameters:\n    - number (int): The input number.\n    \n    Returns:\n    - int: The sum of the squares of the first n natural numbers.",
            ".\n\n    Args:\n        message (str): The message to generate the context for.\n\n    Returns:\n        str: The context for the message.",
            "to the gates for the expert devices.",
            "",
            "Parse the arguments of the command.",
            "(x: torch.FloatTensor, return_dict: bool = True) -> Union[DecoderOutput, torch.FloatTensor]:",
            "Sets the cached dataframe for a given pair and timeframe.\n    \n    Parameters:\n        pair (str): The pair for which the cached dataframe is being set.\n        timeframe (str): The timeframe for which the cached dataframe is being set.\n        dataframe (DataFrame): The DataFrame to be cached.",
            "Runs the django shell_plus command",
            "for the given service, create a client and store it in the cache.",
            "(\n        self,\n        trial_parameters: dict,\n        workspace: str = 'workspace',\n        callback=None,\n        **kwargs,\n    )",
            "for the first time, we are the main process.",
            "",
            "get_env()",
            "\"\n    Print a message to the user and exit.",
            "Print the deployment.\n\n    Args:\n        deployment (dict): The deployment to print.\n\n    Returns:\n        dict: The deployment.",
            "Convert to utf-8",
            ".close()",
            ".",
            ".",
            "",
            "(str) -> str",
            "'Add summaries for losses and gradients."
        ],
        [
            ".\n    Iterate over all references in the raw data.\n\n    :return: Generator over all references.",
            ".\n    Combine the two dictionaries",
            "",
            "(self, x):",
            "Stops the Scalene server",
            "compute the ratio of the image and resize the image",
            "(X, y) -> (X, y)\n    \n    Make predictions for X.\n    \n    Parameters\n    ----------\n    X : {array-like, sparse matrix} of shape (n_samples, n_features)\n        The input data.\n    \n    Returns\n    -------\n    X : {array-like, sparse matrix} of shape (n_samples, n_features)\n        The input data.",
            "Get the data for the score plots.\n    \n    Args:\n        algo_name (str, optional): The name of the algorithm. Defaults to None.\n        score_thresholds (np.ndarray, optional): The thresholds to use for the score plots. Defaults to None.\n    \n    Returns:\n        dict: The dictionary containing the score data.\n        np.ndarray: The episode steps data.\n        np.ndarray: The score thresholds.",
            "",
            "to iterate over the buffers in the buffer pool",
            "Function to predict the image class\n    \n    Parameters\n    ----------\n    image : ndarray\n        The image to predict\n    \n    Returns\n    -------\n    prediction : str\n        The predicted class of the image",
            "Get the coordinates of the extremum along a given dimension. \n    \n    Parameters\n    ----------\n    dim : int\n        The dimension along which to get the extremum.\n    direction : tuple, optional\n        The direction of the extremum. The default is ORIGIN.\n\n    Returns\n    -------\n    tuple\n        The coordinates of the extremum along the given dimension.",
            "(result) -> NoneType",
            "",
            "Initialize the DataFrame class.\n\n    Parameters:\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.",
            "_make_save_file_name_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "_summary_\n    This function returns the path to the log file.",
            ".\n    Args:\n        xs (paddle.Tensor): [description]\n        masks (paddle.Tensor): [description]\n\n    Returns:\n        [type]: [description]",
            "Return the corners and center of the region.\n    \n    :return: (pt1, pt2, pt3, pt4, center)",
            "A test function.",
            "Padded data.",
            ".\n    Checks if a given image is fully within the image.\n\n    :param image: the image to check\n    :return: True if the image is fully within the image, False otherwise",
            "Show an error bubble.\n    \n    :param str error: The error text to show.\n    :param str width: The width of the bubble.\n    :param tuple pos: The position of the bubble.\n    :param tuple arrow_pos: The position of the arrow.\n    :param bool exit: Whether to exit the app.\n    :param str icon: The icon to show.\n    :param int duration: The duration of the bubble.\n    :returns: None",
            "Returns the parameters for the model.",
            "_start_detached_process_internal",
            "Destroy the game",
            "(x, style, skip=None) -> out:\n\n    Args:\n        x: input image.\n        style: style image.\n        skip: skip connection.\n\n    Returns:\n        out: output image.",
            "for a given target function,\n    this class will be used to initialize a\n    random search algorithm.",
            "(self, output_file=None,\n                 resume=False, progress_file=sys.stderr)\n\n    Initializes a new ``ProgressReporter`` instance.\n\n    :param output_file: The file to write the progress report to.\n    :param resume: If ``True``, the progress report will be resumed from\n        the last known position.\n    :param progress_file: The file to write the progress report to.\n        Defaults to ``sys.stderr``.",
            ".\n    Log the values to wandb.",
            ".\n    Returns:\n        dict: The dictionary representation of the object.",
            ".format_tb(exc_traceback, limit=None)\n\n    Return a string containing the formatted traceback.",
            "",
            "_summary_\n    Generate the policy that will be applied to the app.",
            "Sets the backend for all configurations in this group.",
            ".",
            "Initializes the DebugInfoResponse class.\n    \n    Args:\n        type (str): The type of exception.\n        message (str): The message of the exception.\n        stack_trace (str): The stack trace of the exception.\n        inner_exception (Exception): The inner exception.\n        data (dict): The data associated with the exception.\n        error_response (dict): The error response associated with the exception.",
            "Return a random digit, but not 0.",
            ".\n    Returns:\n        QNetworkAccessManager:",
            "",
            "Get the prompt embedding.\n    \n    Args:\n        adapter_name (str): The adapter name.\n    \n    Returns:\n        torch.Tensor: The prompt embedding.",
            ".\n    \n    Clears the screen and resets the cursor position.",
            "",
            "Returns the center of the arc.",
            ".\n    Args:\n        config (dict): Configuration for the client.\n        conversation_id (str, optional): Conversation ID. Defaults to None.\n        parent_id (str, optional): Parent ID. Defaults to \"\".\n        base_url (str, optional): Base URL. Defaults to \"\".",
            "Group quantization model\n    \n    Args:\n        model_config: GemmaConfig\n        quantization: GroupQuantize\n\n    Returns:\n        model: nn.Module\n        quant_map: QuantizeMapping",
            ".\n\n    Returns a normalized iterable.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. warning::\n\n        This method is experimental.\n\n    :returns: A normalized iterable.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. warning::\n\n        This method is experimental.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable`.\n\n    .. note::\n\n        This method is a helper method for :meth:`~utils.normalize_iterable",
            "Download a file from a remote location and return the local path.\n    \n    Parameters\n    ----------\n    target : str\n        The remote location of the file.\n    use_cache : bool, optional\n        If True, the file will be downloaded from the cache if it exists.\n\n    Returns\n    -------\n    local_name : str\n        The local path of the downloaded file.",
            "(cls, name: str, agent_cls: Type['Agent']) -> None:",
            "Mount the component.",
            "This is the baz function",
            "(buffers)",
            "Parse a set statement.",
            ".",
            "",
            "Initialize the component.\n\n    Args:\n        *args:\n        **kwargs:",
            "(str, Regularizer) -> NoneType\n    \n    Initializes the regularizer.\n    \n    Args:\n        regexes: A list of tuples of the form (regex, regularizer).",
            "Create a signed JWT token for the given payload.\n    \n    :param payload: The payload to sign.\n    :return: A signed JWT token.",
            "Convert `obj` to a string.\n    \n    If `obj` is a string, return `obj`.\n    If `obj` is an integer, return `str(obj)`.\n    If `obj` is a float, return `str(obj)`.\n    If `obj` is a boolean, return `str(obj)`.\n    If `obj` is a `datetime.datetime` or `datetime.date`, return `obj.isoformat()`.\n    If `obj` is a `datetime.time`, return `obj.isoformat(sep=':')`.\n    If `obj` is a `datetime.timedelta`, return `obj.total_seconds()`.\n    If `obj` is a `datetime.tzinfo`, return `obj.utcoffset(obj.dst()).isoformat()`.\n    If `obj` is a `datetime.tzinfo` subclass, return `obj.tzname()`.\n    If `obj` is a `datetime.tzinfo` subclass with `tzname` and `dst` attributes, return `obj.tzname()`.\n    If `obj` is a `datetime.tzinfo",
            ".",
            "Return the name of the type of the object.",
            "Show the current status of the RPC.",
            ".\n    Args:\n        opt (dict): Configuration for training. It contains the following keys:\n            - n_steps (int): Number of steps\n            - lr_initial (float): Initial learning rate\n            - lr_final (float): Final learning rate\n            - n_epochs (int): Number of epochs\n            - n_epochs_decay (int): Number of epochs to decay learning rate\n            - n_epochs_warmup (int): Number of epochs to warm up learning rate\n            - warmup_factor (float): Warmup factor\n            - warmup_steps (int): Number of steps to warm up learning rate\n            - decay_factor (float): Decay factor\n            - decay_steps (int): Number of steps to decay learning rate\n            - decay_steps_warmup (int): Number of steps to decay learning rate\n            - decay_steps_decay (int): Number of steps to decay learning rate\n            - decay_type (str): Decay type, either 'step' or 'cosine'\n            - decay_by_epoch (bool): Decay learning rate by epoch\n            - n_classes (int): Number of classes\n            - n_channels (int): Number",
            "",
            ".",
            ".\n    Run the agent and return the answer.",
            "Forward pass of the network.\n    \n    Parameters:\n    x (torch.Tensor): Input tensor.\n\n    Returns:\n    torch.Tensor: Output tensor.",
            "Create a John filterbank.\n\n    Parameters\n    ----------\n    device: torch.device\n        Device to create the filterbank on.\n    n_mels: int\n        Number of filters in the filterbank.\n    \n    Returns\n    -------\n    torch.Tensor\n        Tensor of shape (n_mels, n_fft // 2 + 1).",
            "Get format profile for a given itag",
            "Adds words from the given URL to the given word set.\n\n    Args:\n        word_set (set): A set of words.\n        url (str): The URL from which to read words.\n        line_function (function): A function that takes a line from a URL and returns a word.\n\n    Returns:\n        None",
            ".\n    Runs the given x and y.\n\n    :param x: The first value.\n    :param y: The second value.\n    :return: The result of x and y.",
            "Lookup friendships between the current user and other users.",
            "Configure the jshost, echarts_template_dir, and force_js_embed.\n    \n    Parameters\n    ----------\n    jshost : str\n        The URL of the jshost.\n    echarts_template_dir : str\n        The directory containing the echarts template files.\n    force_js_embed : bool\n        Whether to force embedding the jshost.\n    \n    Returns\n    -------\n    None",
            "Convert a SearchDoc into a SavedSearchDoc. \n    \n    :param cls: The class of the SavedSearchDoc to create.\n    :param search_doc: The SearchDoc to convert.\n    :param db_doc_id: The ID of the document in the database.\n    :return: A SavedSearchDoc.",
            "Return the lab representation of the interval.",
            "(str) -> str",
            "Returns all songs from the database.",
            "A function that encrypts or decrypts a given text.\n    \n    Args:\n        greppable (bool, optional): If True, the text is encrypted with the given Cipher.\n        Cipher (class, optional): The class that is used to encrypt the text.\n        text (str, optional): The text to be encrypted or decrypted.\n        debug (bool, optional): If True, the function prints the text to be encrypted or decrypted.\n    \n    Returns:\n        str: The encrypted or decrypted text.",
            "This function classifies a given data matrix by a given list of classifiers.\n    \n    Parameters:\n    datToClass: a matrix of data to be classified.\n    classifierArr: a list of classifiers.\n    \n    Returns:\n    classEst: a matrix of class estimates.",
            "Initialize the RNN.\n    \n    Arguments:\n    vocab_size -- integer, size of the vocabulary\n    num_hiddens -- integer, number of hidden units\n    device -- torch.device, device to use for computation (cpu or gpu)\n    get_params -- function, function to get the model parameters\n    init_state -- function, function to initialize the hidden state\n    forward_fn -- function, function to perform a forward pass of the model (used in training)",
            "_summary_\n\n    Args:\n        cls (_type_): _description_\n        v (Union[str, List[str], Set[str]]): _description_\n\n    Returns:\n        Union[str, List[str], Set[str]]: _description_",
            "Convert a string into a list of tokens.",
            ".",
            "_summary_\n    Build backbone\n    Args:\n        cfg (ConfigDict): config\n        default_args (dict, optional): Defaults to None.\n    Returns:\n        nn.Module: backbone",
            ".\n    Returns a random number between 10 and 100.",
            "Convert a XML node to a dictionary\n    \n    :param xml: A XML node\n    :type xml: xml.dom.minidom.Element\n    \n    :return: A dictionary\n    :rtype: dict",
            "Takes a single example from the dataset and prepares it for use in a model.\n    \n    Parameters\n    ----------\n    example: dict\n        A dictionary containing the following keys:\n        - prompt: The prompt text for the example.\n        - completion: The completion text for the example.\n    \n    Returns\n    -------\n    text: str\n        The prepared text for use in a model.",
            ".\n    The kickoff method is the entry point of the simulation.\n    It starts the simulation by initializing the agents,\n    setting the initial positions, and running the simulation loop.",
            "",
            "@param problem_name:\n    @param data_dir:\n    @param output_dir:\n    @param hparams:\n    @param epoch:\n    @return:",
            "Forward pass of the RNN.\n\n    Args:\n        x (Tensor): Input tensor of shape `[batch_size, input_size]`.\n\n    Returns:\n        Tensor: Output tensor of shape `[batch_size, output_size]`.",
            "Save the model.",
            ":param color_hex: Color in hex format (e.g. #000000)\n    :return: Color instance",
            "returns the number of items in the cart",
            ".",
            ".",
            ":param args: \n    :param kwargs: \n    :return:",
            "Delete the model with the given name\n    \n    Parameters\n    ----------\n    model_name : str\n        The name of the model to delete\n    \n    Returns\n    -------\n    str\n        An empty string if the model is deleted successfully, otherwise an error message",
            "Returns True if the server is running, False otherwise.",
            ".",
            "",
            "acquire_token_func() -> dict[str, Any]\n\n    This function is used to acquire a token for the Microsoft Graph API.\n\n    Returns:\n        dict[str, Any]: A dictionary containing the access token and expiration time.",
            "Add documents to Milvus.\n    \n    Args:\n        kb_file (KnowledgeFile): KnowledgeFile object.\n        \n    Returns:\n        status (bool): True if the documents are added successfully, False otherwise.",
            "Test scrape_dai_docs_all_pandoc()",
            ".",
            ".",
            "Select rows based on a regular expression.\n    \n    Parameters\n    ----------\n    regex : str\n        The regular expression to match.\n    columns : list of str\n        The column names to match.\n    unselect : bool, optional\n        Whether to unselect the rows that do not match the regular expression.\n        Default is False.\n    \n    Returns\n    -------\n    pd.DataFrame\n        The selected rows.",
            "x: [batch_size, seq_len, emb_size]\n    emb: [emb_size, emb_size]",
            "Get the background configuration",
            "Yields:\n        Path to python source code",
            "(self, init_data_by_df, dtype='stock_day', if_fq='bfq')\n    \n    \u521d\u59cb\u5316\u51fd\u6570\uff0c\u521d\u59cb\u5316\u7c7b\u53d8\u91cf\n    \n    Parameters\n    ----------\n    init_data_by_df : pd.DataFrame\n        \u9700\u8981\u521d\u59cb\u5316\u7684DataFrame\uff0c\u6570\u636e\u683c\u5f0f\u4e3a\uff1a\u65e5\u671f\u3001\u6536\u76d8\u4ef7\u3001\u5f00\u76d8\u4ef7\u3001\u6700\u9ad8\u4ef7\u3001\u6700\u4f4e\u4ef7\u3001\u6210\u4ea4\u91cf\u3001\u6210\u4ea4\u989d\n    dtype : str, optional\n        \u6570\u636e\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a'stock_day'\uff0c\u652f\u6301'stock_day'\u3001'stock_min'\u3001'stock_hour'\u3001'stock_5min'\u3001'stock_15min'\u3001'stock_30min'\u3001'stock_60min'\u3001'stock_1day'\u3001'stock_1week'\u3001'stock_1month'\u3001'stock_1year'\u3001'stock_5year'\u3001'stock_10year'\u3001'stock_15year'\u3001'stock_20year'\u3001'stock_50year'\u3001'stock_100year'\u3001'stock_200year'\u3001'stock_500year'\u3001'stock_100",
            "",
            ".",
            "Return the content between start and end, if end is not provided,\n    return everything after start.",
            ".",
            "Test that the get() method returns the correct status code and items",
            "_adb_command(self, command)\n\n    Runs a command on the device.\n\n    :param command: The command to run.\n    :type command: str\n    :return: The output of the command.\n    :rtype: str",
            "(im, label) -> (im, label)",
            "(self, input_sequence, training=True, mask=None)\n\n    Parameters\n    ----------\n    input_sequence : tf.Tensor\n        The input sequence to the model.\n    training : bool\n        Whether to use the model in training mode.\n    mask : tf.Tensor\n        The mask to use for the model.\n\n    Returns\n    -------\n    dict\n        A dictionary containing the output of the model.",
            "This function reads the data from the file and returns the data as a list of lists.\n    \n    Parameters:\n    filename (str): The name of the file to be read.\n    \n    Returns:\n    list: A list of lists containing the data from the file.",
            "to be called from the target thread",
            "Returns the current date in YYYY-MM-DD format.",
            "input_example = torch.randn(16, self._feat_in, 256).to(next(self.parameters()).device)\n    return tuple([input_example])",
            "Save the document.",
            "Checks if the given string has any content,\n    i.e. not just whitespace.",
            ".\n    Load the prompt cache from the given path.",
            "Get cached response",
            "",
            "Check if column is valid for the given filter.\n    \n    :param name: column name\n    :return: True if column is valid, False otherwise",
            ".\n    Returns:\n        str: The simulator name.",
            ".",
            ".",
            ".",
            "Returns the range of the range.",
            "Tests that the requirement is installed correctly",
            "()\n    def start(self):",
            "2022-02-08 15:05:49.486880\n    @param sentence:\n    @return:",
            "Args:\n        model (str): path to model or model name\n        task (str): task to perform (default: None)\n        verbose (bool): verbosity (default: False)",
            "Return a 405 Method Not Allowed response.",
            "This function validates the exchange value \n    \n    :param value: str\n    :return: Optional[str]",
            "Decrypt the credentials history using the given key.",
            "",
            "Get message by status.\n    \n    :param cls: Class\n    :param status: ScanStatus\n    :return: message",
            ".",
            "_summary_\n\n    Args:\n        default (Optional[float], optional): _description_. Defaults to None.\n        label (Optional[str], optional): _description_. Defaults to None.\n        **kwargs: _description_.",
            ".read_addr_range(self, start, end, addr_space=None)\n\n    Read a range of memory.\n\n    Parameters\n    ----------\n    start : int\n        The start address of the memory to read.\n\n    end : int\n        The end address of the memory to read.\n\n    addr_space : AddressSpace\n        The address space to read from.\n\n    Returns\n    -------\n    data : array_like\n        The memory read.",
            "def calc_n_LM(xAug):",
            "Initialize centroids randomly\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Input data.\n    \n    Returns\n    -------\n    centroids : np.ndarray\n        Initial centroids.",
            "Sets the feeds list",
            ".",
            "Recursively find all children of the element\n    \n    Args:\n        element (Element): Element to find children of\n        tag (str): Tag name to filter children by\n        _results (set): Set to store results\n    \n    Returns:\n        list: List of children elements",
            "'\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0438\u0434\u0436\u0435\u0442 \u0432\u0432\u043e\u0434\u0430",
            ":param df_lists: list of tuples or list of lists\n    :return:",
            "@return: the current page layout.",
            "forward function",
            "Register a new resource type",
            ".write() method to write the data to the store.",
            "Check if value is a valid transaction hash.",
            "-",
            "Args:\n        x (Tensor): [batch, 1, 256, 256]\n\n    Returns:\n        sine_merge (Tensor): [batch, 1, 256, 256]\n        noise (Tensor): [batch, 1, 256, 256]\n        uv (Tensor): [batch, 1, 256, 256]",
            ".\n    Sets the users to ignore.\n\n    Args:\n        users (list, optional): List of users to ignore. Defaults to [].\n\n    Returns:\n        self: The current instance.",
            "Extract features from the given arguments",
            "",
            "(cls, keypair) -> cls\n\n    Create a new instance from a keypair.",
            ".",
            ".\n    :param key:\n    :return:",
            "for each element, update the cache if the query matches",
            ".\n    @pytest.mark.parametrize(\"space_data\", [\n        {\n            \"name\": \"test\",\n            \"description\": \"test\",\n            \"members\": json.dumps([{\"user_id\": 2, \"role\": \"MASTER\"}, {\"user_id\": 3, \"role\": \"DEVELOPER\"}])\n        }\n    ])\n    def test_get_update_default_space(self, user, testapp, client, space_data):\n        resp = client.put('%s/%d' % (self.uri_prefix, 1), data=space_data)\n\n        response_success(resp)\n        self.compare_space_req_resp(space_data, resp)",
            "Return True if the task was successful, False otherwise.",
            ".",
            "Queue a function to be executed in a thread pool\n    \n    :param fn: function to execute\n    :param queue: queue to use for executing the function\n    :param max_tries: max number of times to retry the function\n    \n    :return: function that wraps the function to be executed in a thread pool",
            ":param env: \n    :param skip:",
            "(th.Tensor, th.Tensor) -> Tuple[th.Tensor, th.Tensor]\n\n    Computes the log-probability of a model's parameters.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Arguments to the model's `log_prob` method.\n\n    Returns\n    -------\n    log_prob : th.Tensor\n        The log-probability of the parameters.\n    log_prob_sum : th.Tensor\n        The sum of the log-probabilities of the parameters.",
            "Calculate the beta values for a given alpha_bar function.\n    \n    Args:\n        num_diffusion_timesteps (int): The number of diffusion timesteps.\n        alpha_bar (function): A function that returns the value of alpha_bar at a given time.\n        max_beta (float, optional): The maximum beta value to use. Defaults to 0.999.\n        \n    Returns:\n        np.ndarray: An array of beta values.",
            "_get_config_ref\n    Returns the config reference",
            "Initialize the class.\n\n    @param exclude: A list of strings to exclude from the signature.\n    @param include: A list of strings to include in the signature.\n    @param invalid: Whether or not to display invalid signatures.",
            ".\n    Fit the model to the data.\n    Parameters\n    ----------\n    X : np.ndarray\n        The data to fit the model to.\n    Y : np.ndarray\n        The labels to fit the model to.\n    Returns\n    -------\n    None",
            "Sets the model type to YOLOv3.",
            "Returns the encoding used to encode the raw data.",
            "_get_item",
            ".\n    Return an iterator for the buffers.",
            "",
            ".\n    Sets the driver.\n\n    :param driver: The driver to use.\n    :type driver: :class:`selenium.webdriver.remote.webdriver.WebDriver`\n    :raises ValueError: If the driver is `None",
            "Flip the image horizontally or vertically.\n    \n    Args:\n        img (Tensor): Input image tensor.\n        d (int, optional): 0 for horizontal flip, 1 for vertical flip. Defaults to 0.\n    \n    Returns:\n        Tensor: Flipped image tensor.",
            ".\n    Args:\n        source (str): Source image path or URL.\n        results (list): List of results.\n        device (str): Device to run the model on.",
            ".",
            "for each character in the regex,\n    if it is a literal, add it to the query\n    if it is a group, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the query\n    if it is a quantifier, add it to the",
            "Delete a tensor by name.\n    \n    Parameters\n    ----------\n    name : str\n        The name of the tensor to delete.",
            "(float) -> float\n\n    Return the standard deviation of the data in d.",
            ":param text: \n    :param pattern: \n    :return:",
            "Clear all jobs or jobs with a specific tag.",
            ".",
            "Highlights text in the given Text widget.",
            "_summary_\n\n    Remove the launcher shortcut for the current game.\n\n    Args:\n        _args (tuple): _description_",
            ".\n    Backward pass.\n    Args:\n        dLdy: gradient of loss with respect to the output of the last layer.\n        X: input to the last layer.\n    Returns:\n        dX, dW, dB: gradients with respect to the input to the first layer.",
            "_expand_tile__\n\n    Expands a tile of a given value into a new dimension.\n\n    Parameters\n    ----------\n    value : tensor\n        The value to be expanded.\n    newdim : int\n        The dimension to expand the value to.\n\n    Returns\n    -------\n    tensor\n        The expanded tile.",
            "Return a string representation of the PdfInfo object.",
            "Sets the timeout for the current thread. \n    \n    Args:\n        timeout (tuple): A tuple containing the timeout duration and unit (e.g., (1, 'second')). \n        If None, no timeout is set. \n        \n    Returns:\n        Timeout: An instance of the Timeout class.",
            "",
            "Returns the object data in an object that can be serialized into JSON",
            "for parsing Microsoft Word files.",
            ".\n\n    :param random:\n    :param cells:\n    :param connections:\n    :return:",
            "",
            "{type: str}",
            "Patch environment variables.\n    \n    :param kwargs: Environment variables to patch.\n    :return: Generator",
            "Save event to sentry. \n    \n    :param cache_key: (optional) cache key to store event data\n    :param data: (optional) event data\n    :param kwargs: (optional) event data",
            "Calculate factorial of a number",
            "Backward step of a neural network.\n\n    Args:\n        input_tensor (torch.Tensor): The input tensor.\n        output_tensor (torch.Tensor): The output tensor.\n        output_tensor_grad (torch.Tensor): The gradient of the output tensor.\n\n    Returns:\n        Optional[torch.Tensor]: The gradient of the input tensor.",
            ".\n    Draw points in a scatter plot.\n    Parameters\n    ----------\n    ax : matplotlib axes object\n        Axes to draw points on.\n    data : 1d array\n        Array of data points.\n    center : float\n        Center of the scatter plot.",
            "",
            ".",
            ", value, h, z):",
            "_list_docs_from_db_\n\n    Args:\n        file_name (str, optional): _description_. Defaults to None.\n        metadata (Dict, optional): _description_. Defaults to {}.\n\n    Returns:\n        List[Document]: _description_",
            ".\n    Initialize the network.",
            "",
            "Deletes a game from the database.",
            "Unzip a single file entry from a zipfile.\n    \n    Args:\n        zip_ref (zipfile.ZipFile): zipfile object.\n        file_entry (zipfile.ZipInfo): zip entry object.\n        target_dir (str): directory to extract to.\n    \n    Returns:\n        str: path to extracted file.",
            "Apply the filter to the image. \n    \n    Parameters\n    ----------\n    img : array-like\n        The image to be filtered.\n    factor : int, optional\n        The factor to rotate the image by. Defaults to 0.\n    \n    Returns\n    -------\n    array-like\n        The filtered image.",
            ".",
            "Convert a value to a string, escaping any unicode characters.",
            ".",
            "Find xpath attribute in node.\n    \n    :param node: Node\n    :param xpath: XPath\n    :param key: Attribute name\n    :param val: Attribute value\n    :return: Node",
            "_reduce_CreateInheritableAnnotation",
            "Get a list of watched extensions.\n    \n    :return: List of watched extensions.\n    :rtype: list",
            "Show toolbar on debug mode",
            "",
            "",
            ".\n    Returns\n    -------\n    str\n        The title of the game.",
            "Extracts text from the HTML document using a regex pattern.\n    \n    Args:\n        regex (str): The regex pattern to use for extraction.\n    \n    Returns:\n        str: The extracted text.",
            "_summary_\n\n    Args:\n        rank_results (bool):\n        hits (List[dict]):\n\n    Returns:\n        List[dict]:",
            "Import a symbol from the app's models module. \n    \n    This is a wrapper around the `symbol_by_name` function in the `flask.app` module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module. \n    \n    This is used to import models from the app's models module.",
            "(self, observation: th.Tensor, deterministic: bool = False) -> th.Tensor:",
            "Convert a value to a list.",
            "(self, cfg) -> int:",
            "Get the environment variables for the game.\n    \n    :param prefer_system_libs: Whether to prefer system libraries over wine libraries.\n    :param wine_path: Path to the wine installation.\n    :return: The environment variables.",
            "_test_clone(self, estimator_instance)\n\n    Test clone function.\n\n    Parameters\n    ----------\n    estimator_instance : estimator\n        estimator instance.\n\n    Returns\n    -------\n    None.",
            "Initialize the input data for the model. \n    \n    Parameters\n    ----------\n    img1_path : str or list\n        The path of the first image.\n    img2_path : str or None\n        The path of the second image. If None, then img1_path will be used as the second image.\n\n    Returns\n    -------\n    img_list : list\n        A list of the image paths.\n    bulkProcess : bool\n        A boolean indicating whether the input is a list of image paths.",
            "",
            ",\n    Arguments:\n        kernel_size {int} -- The size of the kernel\n        stride {int} -- The stride of the convolution\n        padding {int} -- The padding of the convolution\n        data_format {str} -- The data format of the input data\n        device {str} -- The device to place the module on\n        v {None} -- The version of the module\n        dtype {None} -- The data type of the module",
            "Given a row, return the text and the number of tokens in the row.",
            "Returns the ms payload for the given payload number.",
            ".\n\n    :param parent:\n    :param params:\n    :param response:\n    :return:",
            "_Align the object to the border of the frame.\n\n    Parameters\n    ----------\n    direction : np.array\n        The direction vector of the object.\n    buff : float\n        The buffer to add to the object's position.",
            "Returns a list of strings that are the names of the slots used by this \n    optimizer.",
            "_init__",
            "Constructor for the class.",
            "test that ratio is a float between 0 and 1",
            ":param source: \n    :param visited: \n    :return:",
            ".",
            "Extract one of the choices that best matches the query.\n    \n    Args:\n        query (str): The query to extract one of the choices from.\n        choices (list): The list of choices to extract from.\n        processor (callable): A function that processes the query and choices.\n        scorer (callable): A function that scores the choices.\n        score_cutoff (int): The minimum score to consider a choice.\n        \n    Returns:\n        tuple: A tuple containing the best choice and its score.",
            ".\n    Backward pass.\n    Parameters\n    ----------\n    dLdy : torch.Tensor\n        The gradient of the loss with respect to the output of the model.\n    X : torch.Tensor\n        The input to the model.\n    Returns\n    -------\n    dX : torch.Tensor\n        The gradient of the loss with respect to the input to the model.\n    dW : torch.Tensor\n        The gradient of the loss with respect to the weights of the model.\n    dB : torch.Tensor\n        The gradient of the loss with respect to the bias of the model.",
            "Prune heads of the model.\n    \n    :param heads_to_prune: dict of {layer_num: list of heads to prune e.g. {'layer_4': [3]}};\n    See base class AttentionModule for more details.",
            "Save the object.\n\n    :param commit:\n    :return:",
            ".\n    Decorator that sets the decorated function as the function to be called\n    when the decorator is called.",
            "Get an object from the JSON data.\n    \n    Parameters\n    ----------\n    json : dict\n        The JSON data.\n    \n    Returns\n    -------\n    Object\n        The object.",
            "This function will raise an error if the counter is greater than the count.",
            "for testing exceptions",
            "_summary_\n\n    Args:\n        store_type (str): _description_\n\n    Returns:\n        str: _description_",
            "Return an iterator for the list.",
            ".\n    Args:\n        router (Optional[APIRouter]): The router to use. Defaults to None.\n        router_prefix (str, optional): The prefix to use for the router. Defaults to \"/api/v1/awel/trigger\".",
            "Get the proof of a given address.\n    \n    :param address: The address to get the proof for.\n    :return: The proof.",
            "Given a string s and a string k, perform an XOR operation on s with k.\n    Return the result of the XOR operation.",
            "Return the fleet number selected by the player.",
            "Parameters\n    ----------\n    path : str or Path\n        The path to the file or directory.\n    parent_path : DisplayablePath\n        The parent path.\n    is_last : bool\n        Whether this is the last item in the path.",
            "Write data to the stream.",
            "Returns the url of the emoji.",
            "Prompts the user with a question and returns True if they say yes,\n    and False if they say no.",
            ".",
            "Multiply two Rigid objects.",
            "\u83b7\u53d6\u5fae\u535a\u5185\u5bb9",
            "Saves the model, if needed.\n    \n    Args:\n        trainer: A transformers.Trainer object.\n        output_dir: The output directory.",
            "Returns the next element in the sequence.",
            "This test is for the list_courses method. \n    \n    The test should:\n    - Call get_page_json with the correct url\n    - Return the json from the fixture\n    - Assert that the returned json matches the expected json",
            "Initialize the environment with random points.",
            "Raise NonExistentEventException if dash events are used.",
            ".",
            ".\n    Args:\n        response (str): The response to extract the code from.\n        separator (str, optional): The separator to use to split the code. Defaults to \"```\".\n\n    Raises:\n        NoCodeFoundError: If no code is found in the response.\n\n    Returns:\n        str: The code extracted from the response.",
            ".",
            "_summary_\n\n    Returns:\n        str: _description_",
            ".",
            "Send a message to the server.",
            ".\n    Initialize CLIP model.\n    Args:\n        source (str): Path to CLIP model.\n        results (str): Path to save results.\n        device (str): Device to use for inference.",
            "Prints a message to the standard error stream.",
            "Class to set hyperparameters for a human",
            "Convert a string to a continuation align style.\n    \n    :param s: the string to convert\n    :returns: the converted continuation align style\n    :raises ValueError: if the string is not a valid continuation align style",
            "Cancel a job.\n\n    :param job: job to cancel\n    :type job: :class:`~scrapy.scheduler.Scheduler.job`",
            ".",
            "(self, r):",
            "Args:\n        pred: [N, H, W]\n        gt: [N, H, W]\n        mask: [N, H, W]\n        weights: [N, H, W]",
            "",
            "Detect Tab key.",
            "Args:\n        generator (str):",
            "Returns the number of pages in the document.",
            ".add_column(self, name, data)\n\n    Add a column to the DataFrame.\n\n    Parameters\n    ----------\n    name : str\n        The name of the column.\n    data : ndarray\n        The data for the column.",
            "Computes the loss for the model.\n\n    Parameters\n    ----------\n    predictions : torch.Tensor\n        The predictions of the model.\n    gold_labels : torch.Tensor\n        The gold labels of the model.\n    mask : Optional[torch.Tensor], optional\n        The mask of the model. Defaults to None.\n\n    Returns\n    -------\n    torch.Tensor\n        The loss of the model.",
            "_create_vision_transformer",
            "Args:\n        cls:\n        result:\n        argd:\n    \n    Returns:\n        loss:",
            "Returns the number of units in the network.",
            "Return all child prefixes of this prefix.",
            ".\n    Bans a client from the server.",
            "Args:\n        im (np.ndarray): Input image.\n        im_info (dict): Image information.",
            "",
            ".\n    \n    :param index:\n    :param data:\n    :param modify_index:\n    :return:",
            ".\n    Checks if the given image is partially or fully within the image.\n    :param image: Image to check\n    :return: True if the image is partially or fully within the image, False otherwise",
            ".\n    Parses a string in the format \"device_type:device_id\" and returns a Device object.\n\n    Args:\n        string (str): The string to parse.\n\n    Returns:\n        Device: A Device object with the parsed device type and ID.",
            ".\n    Get the session info from the akinator website.",
            ".\n    Create a new instance of the tensor.",
            "Creates a regular link",
            ".\n    Args:\n        img (np.ndarray): Input image of shape (3, H, W)\n\n    Returns:\n        np.ndarray: Predicted class label of shape (1,)",
            "(n_samples, n_features) -> (n_samples, n_features)",
            "Saves the model checkpoint.\n    \n    Parameters\n    ----------\n    iteration : int\n        The current iteration.\n    model : torch.nn.Module\n        The model to be saved.\n    args : argparse.Namespace\n        The arguments.",
            "_summary_\n    \n    Remove SQL from the database.\n    \n    Args:\n        question (str): The question to remove SQL from.\n    \n    Returns:\n        bool: True if the SQL was removed successfully, False otherwise.\n    \n    Raises:\n        SQLRemoveError: If there was an error removing the SQL.",
            "for failure_threshold",
            "\u4eceurl\u4e2d\u83b7\u53d6\u89c6\u9891id",
            "Returns the distance of the album to the given mapping.",
            "for example, if we have a binary classifier,\n    and the score function is the sigmoid of the logits,\n    then we can use this to implement binary crossentropy.",
            "_get_item\n    \n    Return the object that is associated with the given entry.\n    \n    Parameters:\n    entry -- the entry to get the object for\n    handle_value -- if non-zero, the handle value of the entry\n    \n    Returns:\n    the object associated with the entry",
            "Args:\n        x (paddle.Tensor): [batch_size, seq_len, hidden_size]\n        x_mask (paddle.Tensor): [batch_size, seq_len]\n    \n    Returns:\n        paddle.Tensor: [batch_size, seq_len, hidden_size]",
            ".\n    Returns:\n        bool: True if the host is the same as the current host.",
            "Converts a raw feature vector to a protobuf Feature message.\n    \n    Args:\n        raw (bytes): The raw feature vector.\n    \n    Returns:\n        feature_pb2.Feature: The protobuf Feature message.",
            "Get the value of an environment variable, or None if not found. \n    \n    Args:\n        key (str): The name of the environment variable.\n        default (Optional[Union[PathLike, str]]): The default value to return if the environment variable is not found.\n    \n    Returns:\n        Optional[Path]: The value of the environment variable, or None if not found.",
            ".",
            "Add a flow to the store.",
            "Train the model.",
            ".\n    Send media to Telegram.\n\n    :param chat_id: Chat ID to send to.\n    :param notify_type: Type of notification.\n    :param attach: Attachment to send.\n    :return: True if successfully sent, False otherwise.",
            "Modify config file in the given path. \n    \n    Args:\n        path (str): The path to the config file.\n        commit (bool): Whether to commit the changes.\n    \n    Yields:\n        dict: The modified config dictionary.\n    \n    Raises:\n        IOError: If the config file cannot be read or written.\n    \n    Returns:\n        dict: The modified config dictionary.",
            "Register the public key of the remote party.",
            "This function is used to output the string to the console.\n    \n    Parameters:\n        string (string): The string to be outputted to the console.\n        state (bool): The state of the program.\n    \n    Returns:\n        string (string): The string to be outputted to the console.",
            "\u5224\u65ad\u9879\u76ee\u662f\u5426\u9700\u8981\u66f4\u65b0\n    :param project_name: \u9879\u76ee\u540d\u79f0\n    :param updatetime: \u66f4\u65b0\u65f6\u95f4\n    :return:",
            "Args:\n        embed_size (int): Size of the embedding vector",
            ".\n    Calculate cost of a path\n    :param s_start: start state\n    :param s_goal: goal state\n    :return: cost of path",
            "_summary_\n\n    Args:\n        message (str): _description_",
            "for now return an empty state.",
            "Build DataParallel for model. \n    \n    Args:\n        model (nn.Module): Model to be built.\n        device (str): Device type, 'cuda' or 'mlu'.\n        dim (int): DataParallel dim.\n        *args: Additional arguments of DataParallel.\n        **kwargs: Additional keyword arguments of DataParallel.\n    \n    Returns:\n        nn.DataParallel: DataParallel model.",
            "_summary_\n    \n    _description_\n    \n    Args:\n        addr (int, optional): _description_. Defaults to None.\n        verbose (bool, optional): _description_. Defaults to True.\n    \n    Returns:\n        _type_: _description_",
            "Forward pass of the module.\n    \n    Args:\n        x (Tensor): Input tensor.\n    \n    Returns:\n        Tensor: Output tensor.",
            "for study_id",
            "Delete the item with the given key.",
            "Get the value of the offset from the fmt.",
            "Returns:\n        int: The maximum sequence length.",
            "(self, buffers)\n\n    Initialize the object.",
            "Returns the growth data for a given year and quarter.\n    \n    Parameters\n    ----------\n    year : int\n        The year for which the growth data is requested.\n    quarter : int\n        The quarter for which the growth data is requested.\n        \n    Returns\n    -------\n    pandas.DataFrame\n        The growth data for the given year and quarter.",
            "This function checks if a number is even or not.",
            "Test static proxy with static proxy",
            "Set the model name to the environment variable.\n\n    Args:\n        model (str): The name of the model.",
            ",\n    Returns a list of all the trackers.",
            ".test_cleanup()",
            "Args:\n      body_output: The output of the body.\n      _ : unused\n    Returns:\n      A tensor representing the logits of the top words.",
            "bboxes: tensor of shape [N, 4]\n    img_shape: tuple of (height, width)\n    scale_factor: tuple of (scale_x, scale_y)\n    flip: bool\n    \n    return: tensor of shape [N, 4]",
            ".\n\n    Return True to pause the game.",
            ".\n    Returns the text of the cell.",
            "(batch_size, 1)",
            "(str) -> str\n    Returns the text generated by the model.",
            "Prompt the user for input.\n\n    Args:\n        *args: The arguments to pass to Prompt.ask.\n        prompt_type: The type of prompt to use.\n        **kwargs: The keyword arguments to pass to Prompt.ask.\n\n    Returns:\n        The user's input.",
            ".",
            "Checks if a record matches a pattern.",
            "Review a draft of a proposal.",
            "Returns the hyperparameters of the model.",
            "",
            "This function will update the latest price in all BOMs",
            "Zeroes out the gradients of all the parameters in this module.",
            "_uname_info_docstring_",
            "Update forward references in the class.\n    \n    Parameters\n    ----------\n    cls : class\n        The class to update forward references in.\n    \n    localns : dict, optional\n        The local namespace to use for forward references.\n        Defaults to None.",
            "Trains the network on the given data.\n    \n    Parameters\n    ----------\n    data : list\n        List of tuples (input, output).\n    iterations : int\n        Number of iterations to train the network.\n    rate : float\n        Learning rate.\n    momentum : float\n        Momentum factor.",
            "Returns the url for the page.",
            "Override to_python method to handle time values",
            ".",
            "_summary_\n\n    Args:\n        budget_id (int): _description_\n        budget (BudgetIn): _description_\n        Authorize (AuthJWT, optional): _description_. Defaults to Depends(check_auth).\n\n    Raises:\n        HTTPException: _description_\n\n    Returns:\n        _type_: _description_",
            "for each tag, check if it is a header tag",
            ".\n    Find a module by its name.\n\n    :param fullname: The name of the module to find.\n    :param path: The path to search.\n    :param target: The target to search for.\n    :return: A :class:`ModuleSpec` instance or None if not found.",
            ":type n: int\n    :rtype: int",
            "Return the maximum number of processes that can be run in parallel",
            "Updates the status of the job\n    \n    Args:\n        ft (Future): Future object returned by the job",
            ".\n    Test that categories are set correctly.",
            "fromfile(*args, **kwargs)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float, sep='\\n', skip_header=0, skip_footer=0)\n    \n    fromfile(filename, dtype=float,",
            "Deserialize a ciphertext blob.\n    \n    Args:\n        ciphertext_blob: The ciphertext blob to deserialize.\n    \n    Returns:\n        A Ciphertext object.",
            ".\n    Args:\n      experiment_id: int64\n    Returns:\n      Experiment",
            "\"Return a string representation of this object.",
            "",
            ".set()\n\n    Sets the resource for the logicalId.\n\n    Args:\n        logicalId (str): The logical ID of the resource.\n        resource (SamResource): The resource to set.\n\n    Returns:\n        None",
            "Creates the embedding matrix.",
            "List all models.",
            "",
            "Updates the label map path in the config.\n    \n    Args:\n      configs: the model config.\n      label_map_path: the path to the label map.",
            "Save a query to Redis\n    \n    @param client_id: ID of the client\n    @param query: The query\n    \n    @return: None",
            "Initialize the class with the encoder and decoder paths.",
            "Sends telemetry data to the control server.",
            "Disable the adapter layers.",
            "Convert a PCM file to a SIL file using pysilk.\n    \n    Args:\n        pcm_path (str): Path to the PCM file.\n        silk_path (str): Path to the SIL file.\n        \n    Returns:\n        AudioSegment: The converted SIL file.",
            "_on_event_frame_detached\n\n    Args:\n        event (Literal[\"framedetached\"]): _description_\n        f (typing.Callable[[\"Frame\"], \"typing.Union[typing.Awaitable[None], None]\"]): _description_\n\n    Returns:\n        None: _description_",
            "Get the number of threads to use\n    \n    :param until_found: The number of threads to use until the threads_num is found\n    :param recent: The number of threads to use after the threads_num is found\n    \n    :return: The number of threads to use",
            "Checks if the request is a valid SAML request.",
            "Test that the check function returns True when the target is vulnerable.",
            "Save the model checkpoint\n    Args:\n        ckpt_name: the name of the checkpoint",
            "_get_attribute_description_for_attribute_name\n    \n    Returns the attribute description for the given attribute name.\n    \n    :param attribute: The name of the attribute.\n    \n    :return: The attribute description.",
            "Delete a conversation by id.\n\n    Args:\n        convo_id (str): The id of the conversation to delete.\n\n    Returns:\n        None",
            "_get_queryset",
            "Initializes the object with a path to the file.\n    \n    Args:\n        path (str): The path to the file.",
            ".",
            "",
            ".",
            "(xs) -> density",
            "Saves a generated sample from the validation set\n\n    Parameters:\n    batches_done (int) -- current batch number",
            "Parse and unwrap a code string.",
            "Return a dictionary of floating point dtypes.",
            ".",
            ".\n    Check if user can add organization",
            "Returns the maximum sequence length in the dataset.",
            ".",
            "callback for averaging metrics across multiple workers",
            ":param name: The name of the command.\n    :param linux_command: The linux command.\n    :param windows_command: The windows command.",
            "Get unarchived folders from snapshots.\n    \n    Args:\n        snapshots (Snapshots): Snapshots to get unarchived folders from.\n        out_dir (Path, optional): Output directory. Defaults to OUTPUT_DIR.\n    \n    Returns:\n        Dict[str, Optional[Link]]: Unarchived folders.",
            "KL divergence between two normal distributions.\n    \n    :param mean1: mean of the first distribution.\n    :param logvar1: log variance of the first distribution.\n    :param mean2: mean of the second distribution.\n    :param logvar2: log variance of the second distribution.\n    :return: KL divergence between two normal distributions.",
            ".\n\n    Args:\n        tensor_input (torch.Tensor): Input tensor.\n\n    Returns:\n        torch.Tensor: Output tensor.",
            "Create a new instance of a class from a mapping of attributes.\n    \n    :param cls: The class to create the instance of.\n    :param mapping: A mapping of attributes to set on the instance.\n    :return: A new instance of the class with the specified attributes set.",
            ".\n    Returns:\n      dm_env.TimeStep: The resulting time step.",
            "Args:\n        weights: weights to be regularized\n        name: name of the regularizer\n    \n    Returns:\n        regularizer: regularization term",
            "Check if target is vulnerable",
            "get the value of k in the dict or the default value if it does not exist",
            "(int) -> Window",
            "This function multiplies two numbers\n    \n    Args:\n        a (int): first number\n        b (int): second number\n        \n    Returns:\n        int: multiplication of a and b",
            "::test:: test_post",
            ".",
            "_upgrade_packages_option_no_existing_file_",
            "_stop_all_jobs\n    Stop all jobs in all sessions.",
            "()\n\n    Initialize the DiffMatchPatch object.",
            ".\n    Initialize the result.",
            "Set output keys for all datasets. \n    \n    Args:\n        datasets: list of datasets\n        output_keys: list of output keys",
            ":param color:\n    :param opacity:\n    :param color_lookup:",
            "Adds a GET operation to the operations list.",
            "",
            "Enhance the connection pool for the session. \n    \n    Parameters\n    ----------\n    session : requests.Session\n        The session to enhance.\n    pool_connections : int, default 20\n        The number of connections in the pool.\n    pool_maxsize : int, default 20\n        The maximum number of connections in the pool.\n    max_retries : int, default 30\n        The maximum number of retries.",
            ":param text: \n    :param tokenize: \n    :return:",
            ".",
            ".\n    Returns:\n        Dict[str, Dict]:",
            ".\n\n    Args:\n      data_dir: data directory\n\n    Returns:\n      examples: list of examples",
            "Prepare the request for execution.",
            "_process_all_forms",
            ".fl_time(self, time_func, apply_to=['mask', 'audio'],\n                keep_duration=False)\n\n    Applies time_func to all of the time-dependent attributes of self.\n\n    Parameters\n    ----------\n    time_func : function\n        A function that takes a time argument and returns a time-dependent\n        attribute.\n    apply_to : list, optional\n        A list of attributes to apply the time_func to. Defaults to\n        ['mask', 'audio'].\n    keep_duration : bool, optional\n        Whether to keep the duration of the time-dependent attributes.\n        Defaults to False.\n\n    Returns\n    -------\n    None.",
            "Load the current album from the library.",
            "Parses a date string in the format YYYY-MM-DD HH:MM+Z and returns a datetime object.\n\n    Args:\n        date_string (str): The date string to parse.\n\n    Returns:\n        datetime: The parsed datetime object.\n\n    Example:\n        >>> parse_date(\"2023-05-10 14:30+00\")\n        datetime.datetime(2023, 5, 10, 14, 30)",
            "Test that the default mode is set on the home directory.",
            "_summary_",
            "Simple Multi-Layer Perceptron\n    \n    Args:\n        num_layers: Number of layers in the network\n        num_hidden: Number of neurons in each hidden layer\n        activation: Activation function for hidden layers\n    \n    Returns:\n        A function that takes a tensor as input and returns the output of the network.",
            "Set the display name for the work.\n    \n    Parameters\n    ----------\n    display_name : str\n        The display name for the work.",
            "Test IndividualBOSS on unit test data",
            "Returns a list of the immutable keys in the config file.",
            "",
            ".\n    Deletes a file.\n\n    Args:\n        shareName (str): The share name.\n        pathName (str): The path name.\n\n    Returns:\n        bool: True if the file was deleted successfully, False otherwise.\n\n    Raises:\n        SessionError: If the session is not open or the file cannot be deleted.",
            "Clear the job queue.\n    \n    :param tag: optional tag to remove\n    :type tag: str",
            "for other in self.bounds",
            "\u91cd\u5199\u9f20\u6807\u6309\u4e0b\u4e8b\u4ef6\n    :param event:\n    :return:",
            ".",
            "",
            "Create a new game",
            "_pyro_param(self, msg)\n\n    Return the value of a named parameter.",
            ".\n\n    Parameters\n    ----------\n    blocks_args : list\n      A list of blocks arguments.\n    global_params : dict\n      Global parameters.",
            "Finds all snippet files in the given directory.\n    \n    :param ft: the file type to search for\n    :param directory: the directory to search\n    :return: a set of all snippet files",
            "for validation",
            ".\n    Return a JSON string representation of the configuration.",
            "__init__ for typedtuples\n\n    :param item_type: the type of items in the tuple\n    :param iterable: optional iterable to initialize the tuple\n    :return: a tuple of the specified type",
            "test_hosts_decorator_overrides_env_hosts",
            ".",
            ".",
            "Returns the fields of the model.",
            ":param value: \n    :return:",
            "Search using BM25.\n    \n    Args:\n        term (str): Search term.\n        weights (list): List of weights.\n        with_score (bool): If True, return the score of the search.\n        score_alias (str): Alias for the score.\n        explicit_ordering (bool): If True, return the search results in explicit order.\n    \n    Returns:\n        dict: Search results.",
            "Convert the counter to a dictionary.\n    \n    :param get_value: \n    :return:",
            "(cls, id_, name, sizes) -> spec",
            "Decode a base62 string to a UTF-8 string.\n    \n    Args:\n        ctext (T): The base62 string to decode.\n\n    Returns:\n        Optional[U]: The decoded UTF-8 string.",
            "(self, nodes, thunks, pre_call_clear)",
            "Opens a file in ASCII mode.",
            "",
            "Compute the log-likelihood of the observations",
            ".\n    Test count connected components.",
            "_choose_match_impl_",
            "Checks accuracy of the model\n\n    Args:\n        loader (pytorch dataloader): dataloader for the dataset\n        model (torch model): model to be evaluated\n\n    Returns:\n        float: accuracy of the model",
            "Returns a dict with the answer and the format of the answer.",
            "",
            "_summary_\n\n    Args:\n      raw_features: Union[tf.train.Example, features.FeatureDict]\n      random_seed: int\n\n    Returns:\n      features.FeatureDict",
            "Register a model for name.\n    \n    Args:\n        name (str, optional): Name of the model. Defaults to None.\n    \n    Returns:\n        Type: Decorator for registering the model.",
            "",
            "Encodes a tensor of floats to a tensor of integers.\n    Args:\n        x: tensor of floats\n        n_q: number of bits to encode to\n        st: start index\n    Returns:\n        tensor of integers",
            "_children\n\n    Returns a list of all direct children of this element.\n\n    :param tag: the tag name to filter by\n    :param recursive: whether to recurse into children\n    :return: a list of all direct children of this element",
            "(self, params, **cfg)\n\n    def __iter__(self):",
            "for the memory storage",
            "_summary_\n    Close TensorBoard writer.",
            "Returns the maximum number of tokens that can be used by the model.",
            ".",
            "() -> bool:",
            "This function calculates the sum of the numbers from 1 to n.\n    \n    Parameters\n    ----------\n    number : int\n        The number of the sum.\n\n    Returns\n    -------\n    int\n        The sum of the numbers from 1 to n.",
            ".\n    Generates the context for the LLM.\n\n    Args:\n        message (str): The message to generate the context for.\n\n    Returns:\n        str: The generated context.",
            "to the gates, which are the inputs to the expert.",
            "_run_",
            "",
            "(x: torch.FloatTensor) -> Union[DecoderOutput, torch.FloatTensor]:",
            "Set the cached dataframe for a given pair and timeframe.\n    \n    Args:\n        pair (str): The pair to cache the dataframe for.\n        timeframe (str): The timeframe to cache the dataframe for.\n        dataframe (DataFrame): The dataframe to cache.",
            "_summary_",
            ".\n\n    :param service: The service name.\n    :param session: The boto3 session.\n    :param region: The region.\n    :return: The client.",
            ".\n    Run the experiment.\n\n    Args:\n        trial_parameters (dict): Trial parameters.\n        workspace (str, optional): Workspace to save the results. Defaults to 'workspace'.\n        callback (function, optional): Callback function. Defaults to None.\n\n    Returns:\n        None",
            "Main process.",
            "",
            "Override the get_env method to add the user env to the environment.",
            "::message:: str\n    ::exit_code:: int",
            "Print deployment dict",
            "Converts a string to utf8.",
            ".close()",
            ".\n\n    Args:\n        scores (array_like): array of scores\n    Returns:\n        list: list of indices of selected detectors",
            ".",
            ":param text: Text to be searched for\n    :param min_rarity: Minimum rarity of the result\n    :param max_rarity: Maximum rarity of the result\n    :param included_tags: List of tags to include in the result\n    :param excluded_tags: List of tags to exclude from the result\n    :return: Dictionary with the following keys:\n        - id: The ID of the result\n        - text: The text of the result\n        - rarity: The rarity of the result\n        - tags: The tags of the result",
            "for each row in result, add a new row to self.rows",
            "Add summaries for losses and accuracies."
        ]
    ]
}